@prefix code: <https://github.com/infer-actively/pymdp> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://example.org/code-ontology> a owl:Ontology ;
    dc:title "Generated Code Component Knowledge Graph" .

code:Class____pymdp_agent_Agent a code:Class ;
    code:connectsTo code:Function____pymdp_agent_Agent_get_future_qs,
        code:Function____pymdp_agent_Agent_infer_policies,
        code:Function____pymdp_agent_Agent_infer_states,
        code:Function____pymdp_agent_Agent_reset,
        code:Function____pymdp_agent_Agent_sample_action,
        code:Function____pymdp_agent_Agent_set_latest_beliefs,
        code:Function____pymdp_agent_Agent_step_time,
        code:Function____pymdp_agent_Agent_update_A,
        code:Function____pymdp_agent_Agent_update_B,
        code:Function____pymdp_agent_Agent_update_D ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """ 
    The Agent class, the highest-level API that wraps together processes for action, perception, and learning under active inference.

    The basic usage is as follows:

    >>> my_agent = Agent(A = A, B = C, <more_params>)
    >>> observation = env.step(initial_action)
    >>> qs = my_agent.infer_states(observation)
    >>> q_pi, G = my_agent.infer_policies()
    >>> next_action = my_agent.sample_action()
    >>> next_observation = env.step(next_action)

    This represents one timestep of an active inference process. Wrapping this step in a loop with an ``Env()`` class that returns
    observations and takes actions as inputs, would entail a dynamic agent-environment interaction.
    """ ;
    code:isDocumented true ;
    code:name "Agent" .

code:Class____pymdp_envs_env_Env a code:Class ;
    code:connectsTo code:Function____pymdp_envs_env_Env_get_likelihood_dist,
        code:Function____pymdp_envs_env_Env_get_rand_likelihood_dist,
        code:Function____pymdp_envs_env_Env_get_rand_transition_dist,
        code:Function____pymdp_envs_env_Env_get_transition_dist,
        code:Function____pymdp_envs_env_Env_get_uniform_posterior,
        code:Function____pymdp_envs_env_Env_render,
        code:Function____pymdp_envs_env_Env_reset,
        code:Function____pymdp_envs_env_Env_sample_action,
        code:Function____pymdp_envs_env_Env_step ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """ 
    The Env base class, loosely-inspired by the analogous ``env`` class of the OpenAIGym framework. 

    A typical workflow is as follows:

    >>> my_env = MyCustomEnv(<some_params>)
    >>> initial_observation = my_env.reset(initial_state)
    >>> my_agent.infer_states(initial_observation)
    >>> my_agent.infer_policies()
    >>> next_action = my_agent.sample_action()
    >>> next_observation = my_env.step(next_action)

    This would be the first step of an active inference process, where a sub-class of ``Env``, ``MyCustomEnv`` is initialized, 
    an initial observation is produced, and these observations are fed into an instance of ``Agent`` in order to produce an action,
    that can then be fed back into the the ``Env`` instance.

    """ ;
    code:isDocumented true ;
    code:name "Env" .

code:Class____pymdp_envs_grid_worlds_DGridWorldEnv a code:Class ;
    code:connectsTo code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_get_init_state_dist,
        code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_get_likelihood_dist,
        code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_get_transition_dist,
        code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_position,
        code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_render,
        code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_reset,
        code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_sample_action,
        code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_set_init_state,
        code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_set_state,
        code:Function____pymdp_envs_grid_worlds_DGridWorldEnv_step ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring " 1-dimensional grid-world implementation with 3 possible movement actions (\"LEFT\", \"STAY\", \"RIGHT\")" ;
    code:isDocumented true ;
    code:name "DGridWorldEnv" .

code:Class____pymdp_envs_grid_worlds_GridWorldEnv a code:Class ;
    code:connectsTo code:Function____pymdp_envs_grid_worlds_GridWorldEnv_get_init_state_dist,
        code:Function____pymdp_envs_grid_worlds_GridWorldEnv_get_likelihood_dist,
        code:Function____pymdp_envs_grid_worlds_GridWorldEnv_get_transition_dist,
        code:Function____pymdp_envs_grid_worlds_GridWorldEnv_position,
        code:Function____pymdp_envs_grid_worlds_GridWorldEnv_render,
        code:Function____pymdp_envs_grid_worlds_GridWorldEnv_reset,
        code:Function____pymdp_envs_grid_worlds_GridWorldEnv_sample_action,
        code:Function____pymdp_envs_grid_worlds_GridWorldEnv_set_init_state,
        code:Function____pymdp_envs_grid_worlds_GridWorldEnv_set_state,
        code:Function____pymdp_envs_grid_worlds_GridWorldEnv_step ;
    code:dependsOn code:Class_Env ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring " 2-dimensional grid-world implementation with 5 actions (the 4 cardinal directions and staying put)." ;
    code:isDocumented true ;
    code:name "GridWorldEnv" .

code:Class____pymdp_envs_tmaze_TMazeEnv a code:Class ;
    code:connectsTo code:Function____pymdp_envs_tmaze_TMazeEnv_get_likelihood_dist,
        code:Function____pymdp_envs_tmaze_TMazeEnv_get_rand_likelihood_dist,
        code:Function____pymdp_envs_tmaze_TMazeEnv_get_rand_transition_dist,
        code:Function____pymdp_envs_tmaze_TMazeEnv_get_transition_dist,
        code:Function____pymdp_envs_tmaze_TMazeEnv_render,
        code:Function____pymdp_envs_tmaze_TMazeEnv_reset,
        code:Function____pymdp_envs_tmaze_TMazeEnv_reward_condition,
        code:Function____pymdp_envs_tmaze_TMazeEnv_sample_action,
        code:Function____pymdp_envs_tmaze_TMazeEnv_state,
        code:Function____pymdp_envs_tmaze_TMazeEnv_step ;
    code:dependsOn code:Class_Env ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring " Implementation of the 3-arm T-Maze environment " ;
    code:isDocumented true ;
    code:name "TMazeEnv" .

code:Class____pymdp_envs_tmaze_TMazeEnvNullOutcome a code:Class ;
    code:connectsTo code:Function____pymdp_envs_tmaze_TMazeEnvNullOutcome_get_likelihood_dist,
        code:Function____pymdp_envs_tmaze_TMazeEnvNullOutcome_get_transition_dist,
        code:Function____pymdp_envs_tmaze_TMazeEnvNullOutcome_reset,
        code:Function____pymdp_envs_tmaze_TMazeEnvNullOutcome_reward_condition,
        code:Function____pymdp_envs_tmaze_TMazeEnvNullOutcome_sample_action,
        code:Function____pymdp_envs_tmaze_TMazeEnvNullOutcome_state,
        code:Function____pymdp_envs_tmaze_TMazeEnvNullOutcome_step ;
    code:dependsOn code:Class_Env ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """ Implementation of the 3-arm T-Maze environment where there is an additional null outcome within the cue modality, so that the agent
    doesn't get a random cue observation, but a null one, when it visits non-cue locations""" ;
    code:isDocumented true ;
    code:name "TMazeEnvNullOutcome" .

code:Class____pymdp_envs_visual_foraging_RandomDotMotion a code:Class ;
    code:connectsTo code:Function____pymdp_envs_visual_foraging_RandomDotMotion_coherence,
        code:Function____pymdp_envs_visual_foraging_RandomDotMotion_dot_direction,
        code:Function____pymdp_envs_visual_foraging_RandomDotMotion_num_directions,
        code:Function____pymdp_envs_visual_foraging_RandomDotMotion_precision,
        code:Function____pymdp_envs_visual_foraging_RandomDotMotion_reset,
        code:Function____pymdp_envs_visual_foraging_RandomDotMotion_step ;
    code:dependsOn code:Class_Env ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """ 
    Implementation of the random-dot motion environment 
    """ ;
    code:isDocumented true ;
    code:name "RandomDotMotion" .

code:Class____pymdp_envs_visual_foraging_SceneConstruction a code:Class ;
    code:connectsTo code:Function____pymdp_envs_visual_foraging_SceneConstruction_reset,
        code:Function____pymdp_envs_visual_foraging_SceneConstruction_step ;
    code:dependsOn code:Class_Env ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "SceneConstruction" .

code:Class____pymdp_envs_visual_foraging_VisualForagingEnv a code:Class ;
    code:connectsTo code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_get_likelihood_dist,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_get_rand_likelihood_dist,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_get_rand_transition_dist,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_get_transition_dist,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_get_uniform_posterior,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_render,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_reset,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_sample_action,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_state,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_step,
        code:Function____pymdp_envs_visual_foraging_VisualForagingEnv_true_scene ;
    code:dependsOn code:Class_Env ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring " Implementation of the visual foraging environment used for scene construction simulations " ;
    code:isDocumented true ;
    code:name "VisualForagingEnv" .

code:Class____pymdp_jax_agent_Agent a code:Class ;
    code:connectsTo code:Function____pymdp_jax_agent_Agent_infer_parameters,
        code:Function____pymdp_jax_agent_Agent_infer_policies,
        code:Function____pymdp_jax_agent_Agent_infer_states,
        code:Function____pymdp_jax_agent_Agent_multiaction_probabilities,
        code:Function____pymdp_jax_agent_Agent_sample_action,
        code:Function____pymdp_jax_agent_Agent_unique_multiactions,
        code:Function____pymdp_jax_agent_Agent_update_empirical_prior ;
    code:dependsOn code:Class_Module ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """ 
    The Agent class, the highest-level API that wraps together processes for action, perception, and learning under active inference.

    The basic usage is as follows:

    >>> my_agent = Agent(A = A, B = C, <more_params>)
    >>> observation = env.step(initial_action)
    >>> qs = my_agent.infer_states(observation)
    >>> q_pi, G = my_agent.infer_policies()
    >>> next_action = my_agent.sample_action()
    >>> next_observation = env.step(next_action)

    This represents one timestep of an active inference process. Wrapping this step in a loop with an ``Env()`` class that returns
    observations and takes actions as inputs, would entail a dynamic agent-environment interaction.
    """ ;
    code:isDocumented true ;
    code:name "Agent" .

code:Class____pymdp_jax_task_PyMDPEnv a code:Class ;
    code:connectsTo code:Function____pymdp_jax_task_PyMDPEnv_reset,
        code:Function____pymdp_jax_task_PyMDPEnv_step ;
    code:dependsOn code:Class_Module ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "PyMDPEnv" .

code:Class____pymdp_utils_Dimensions a code:Class ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """
    The Dimensions class stores all data related to the size and shape of a model.
    """ ;
    code:isDocumented true ;
    code:name "Dimensions" .

code:Class____test_test_SPM_validation_TestSPM a code:Class ;
    code:connectsTo code:Function____test_test_SPM_validation_TestSPM_test_BMR_SPM_a,
        code:Function____test_test_SPM_validation_TestSPM_test_BMR_SPM_b,
        code:Function____test_test_SPM_validation_TestSPM_test_active_inference_SPM_1a ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestSPM" .

code:Class____test_test_agent_TestAgent a code:Class ;
    code:connectsTo code:Function____test_test_agent_TestAgent_test_actinfloop_factorized,
        code:Function____test_test_agent_TestAgent_test_agent_distributional_obs,
        code:Function____test_test_agent_TestAgent_test_agent_infer_states,
        code:Function____test_test_agent_TestAgent_test_agent_init_without_control_fac_idx,
        code:Function____test_test_agent_TestAgent_test_agent_with_A_learning_vanilla,
        code:Function____test_test_agent_TestAgent_test_agent_with_A_learning_vanilla_factorized,
        code:Function____test_test_agent_TestAgent_test_agent_with_B_learning_vanilla,
        code:Function____test_test_agent_TestAgent_test_agent_with_D_learning_MMP,
        code:Function____test_test_agent_TestAgent_test_agent_with_D_learning_vanilla,
        code:Function____test_test_agent_TestAgent_test_agent_with_factorized_inference,
        code:Function____test_test_agent_TestAgent_test_agent_with_input_alpha,
        code:Function____test_test_agent_TestAgent_test_agent_with_interactions_in_B,
        code:Function____test_test_agent_TestAgent_test_agent_with_sampling_mode,
        code:Function____test_test_agent_TestAgent_test_agent_with_stochastic_action_unidimensional_control,
        code:Function____test_test_agent_TestAgent_test_mmp_active_inference,
        code:Function____test_test_agent_TestAgent_test_reset_agent_MMP_wBMA,
        code:Function____test_test_agent_TestAgent_test_reset_agent_MMP_wPSP,
        code:Function____test_test_agent_TestAgent_test_reset_agent_VANILLA ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestAgent" .

code:Class____test_test_agent_jax_BasicAgent a code:Class ;
    code:connectsTo code:Function____test_test_agent_jax_BasicAgent_infer_states ;
    code:dependsOn code:Class_Module ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "BasicAgent" .

code:Class____test_test_agent_jax_TestAgentJax a code:Class ;
    code:connectsTo code:Function____test_test_agent_jax_TestAgentJax_test_vmappable_agent_methods ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestAgentJax" .

code:Class____test_test_control_TestControl a code:Class ;
    code:connectsTo code:Function____test_test_control_TestControl_test_deterministic_action_sampling_equal_value,
        code:Function____test_test_control_TestControl_test_deterministic_policy_selection_equal_value,
        code:Function____test_test_control_TestControl_test_expected_utility,
        code:Function____test_test_control_TestControl_test_get_expected_obs_factorized,
        code:Function____test_test_control_TestControl_test_get_expected_states,
        code:Function____test_test_control_TestControl_test_get_expected_states_and_obs,
        code:Function____test_test_control_TestControl_test_get_expected_states_interactions_multi_factor,
        code:Function____test_test_control_TestControl_test_get_expected_states_interactions_multi_factor_independent,
        code:Function____test_test_control_TestControl_test_get_expected_states_interactions_single_factor,
        code:Function____test_test_control_TestControl_test_pA_info_gain,
        code:Function____test_test_control_TestControl_test_pB_info_gain,
        code:Function____test_test_control_TestControl_test_sample_action,
        code:Function____test_test_control_TestControl_test_sample_policy,
        code:Function____test_test_control_TestControl_test_state_info_gain,
        code:Function____test_test_control_TestControl_test_state_info_gain_factorized,
        code:Function____test_test_control_TestControl_test_stochastic_action_unidimensional_control,
        code:Function____test_test_control_TestControl_test_temporal_C_matrix,
        code:Function____test_test_control_TestControl_test_update_posterior_policies_factorized,
        code:Function____test_test_control_TestControl_test_update_posterior_policies_pA_infogain,
        code:Function____test_test_control_TestControl_test_update_posterior_policies_pB_infogain,
        code:Function____test_test_control_TestControl_test_update_posterior_policies_states_infogain,
        code:Function____test_test_control_TestControl_test_update_posterior_policies_utility,
        code:Function____test_test_control_TestControl_test_update_posterior_policies_withE_vector ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestControl" .

code:Class____test_test_control_jax_TestControlJax a code:Class ;
    code:connectsTo code:Function____test_test_control_jax_TestControlJax_test_get_expected_obs_factorized,
        code:Function____test_test_control_jax_TestControlJax_test_info_gain_factorized ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestControlJax" .

code:Class____test_test_demos_GridWorldEnv a code:Class ;
    code:connectsTo code:Function____test_test_demos_GridWorldEnv_reset,
        code:Function____test_test_demos_GridWorldEnv_step ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "GridWorldEnv" .

code:Class____test_test_demos_TestDemos a code:Class ;
    code:connectsTo code:Function____test_test_demos_TestDemos_test_agent_demo,
        code:Function____test_test_demos_TestDemos_test_gridworld_activeinference,
        code:Function____test_test_demos_TestDemos_test_gridworld_genmodel_construction,
        code:Function____test_test_demos_TestDemos_test_tmaze_demo,
        code:Function____test_test_demos_TestDemos_test_tmaze_learning_demo ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestDemos" .

code:Class____test_test_fpi_TestFPI a code:Class ;
    code:connectsTo code:Function____test_test_fpi_TestFPI_test_factorized_fpi_multi_factor_multi_modality,
        code:Function____test_test_fpi_TestFPI_test_factorized_fpi_multi_factor_multi_modality_with_condind,
        code:Function____test_test_fpi_TestFPI_test_factorized_fpi_multi_factor_one_modality,
        code:Function____test_test_fpi_TestFPI_test_factorized_fpi_multi_factor_single_modality_with_condind,
        code:Function____test_test_fpi_TestFPI_test_factorized_fpi_one_factor_multi_modality,
        code:Function____test_test_fpi_TestFPI_test_factorized_fpi_one_factor_one_modality ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestFPI" .

code:Class____test_test_inference_TestInference a code:Class ;
    code:connectsTo code:Function____test_test_inference_TestInference_test_update_posterior_states,
        code:Function____test_test_inference_TestInference_test_update_posterior_states_factorized,
        code:Function____test_test_inference_TestInference_test_update_posterior_states_factorized_noVFE_compute,
        code:Function____test_test_inference_TestInference_test_update_posterior_states_factorized_single_factor ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestInference" .

code:Class____test_test_inference_jax_TestInferenceJax a code:Class ;
    code:connectsTo code:Function____test_test_inference_jax_TestInferenceJax_test_fixed_point_iteration_index_observations,
        code:Function____test_test_inference_jax_TestInferenceJax_test_fixed_point_iteration_multistate_multiobs,
        code:Function____test_test_inference_jax_TestInferenceJax_test_fixed_point_iteration_multistate_singleobs,
        code:Function____test_test_inference_jax_TestInferenceJax_test_fixed_point_iteration_singlestate_multiobs,
        code:Function____test_test_inference_jax_TestInferenceJax_test_fixed_point_iteration_singlestate_singleobs ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestInferenceJax" .

code:Class____test_test_learning_TestLearning a code:Class ;
    code:connectsTo code:Function____test_test_learning_TestLearning_test_prune_likelihoods,
        code:Function____test_test_learning_TestLearning_test_prune_prior,
        code:Function____test_test_learning_TestLearning_test_update_pA_diff_observation_formats,
        code:Function____test_test_learning_TestLearning_test_update_pA_factorized,
        code:Function____test_test_learning_TestLearning_test_update_pA_multi_factor_all,
        code:Function____test_test_learning_TestLearning_test_update_pA_multi_factor_one_modality,
        code:Function____test_test_learning_TestLearning_test_update_pA_multi_factor_some_modalities,
        code:Function____test_test_learning_TestLearning_test_update_pA_single_factor_all,
        code:Function____test_test_learning_TestLearning_test_update_pA_single_factor_one_modality,
        code:Function____test_test_learning_TestLearning_test_update_pA_single_factor_some_modalities,
        code:Function____test_test_learning_TestLearning_test_update_pB_interactions,
        code:Function____test_test_learning_TestLearning_test_update_pB_multi_factor_no_actions_all_factors,
        code:Function____test_test_learning_TestLearning_test_update_pB_multi_factor_no_actions_one_factor,
        code:Function____test_test_learning_TestLearning_test_update_pB_multi_factor_no_actions_some_factors,
        code:Function____test_test_learning_TestLearning_test_update_pB_multi_factor_some_controllable_some_factors,
        code:Function____test_test_learning_TestLearning_test_update_pB_multi_factor_with_actions_all_factors,
        code:Function____test_test_learning_TestLearning_test_update_pB_multi_factor_with_actions_one_factor,
        code:Function____test_test_learning_TestLearning_test_update_pB_multi_factor_with_actions_some_factors,
        code:Function____test_test_learning_TestLearning_test_update_pB_single_factor_no_actions,
        code:Function____test_test_learning_TestLearning_test_update_pB_single_factor_with_actions,
        code:Function____test_test_learning_TestLearning_test_update_pD ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestLearning" .

code:Class____test_test_learning_jax_TestLearningJax a code:Class ;
    code:connectsTo code:Function____test_test_learning_jax_TestLearningJax_test_update_observation_likelihood_factorized,
        code:Function____test_test_learning_jax_TestLearningJax_test_update_observation_likelihood_fullyconnected ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestLearningJax" .

code:Class____test_test_message_passing_jax_TestMessagePassing a code:Class ;
    code:connectsTo code:Function____test_test_message_passing_jax_TestMessagePassing_test_fixed_point_iteration,
        code:Function____test_test_message_passing_jax_TestMessagePassing_test_fixed_point_iteration_factorized_fullyconnected,
        code:Function____test_test_message_passing_jax_TestMessagePassing_test_fixed_point_iteration_factorized_sparsegraph,
        code:Function____test_test_message_passing_jax_TestMessagePassing_test_marginal_message_passing ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestMessagePassing" .

code:Class____test_test_mmp_MMP a code:Class ;
    code:connectsTo code:Function____test_test_mmp_MMP_test_mmp_a,
        code:Function____test_test_mmp_MMP_test_mmp_b,
        code:Function____test_test_mmp_MMP_test_mmp_c,
        code:Function____test_test_mmp_MMP_test_mmp_d ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "MMP" .

code:Class____test_test_utils_TestUtils a code:Class ;
    code:connectsTo code:Function____test_test_utils_TestUtils_test_obj_array_from_list ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestUtils" .

code:Class____test_test_wrappers_TestWrappers a code:Class ;
    code:connectsTo code:Function____test_test_wrappers_TestWrappers_test_get_model_dimensions_from_labels ;
    code:dependsOn code:Class_unittest_TestCase ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:isDocumented false ;
    code:name "TestWrappers" .

code:CodeComponent_A_matrix_demo_py_A_matrix_demo_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "A_matrix_demo.py" .

code:CodeComponent_agent_demo_py_agent_demo_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "agent_demo.py" .

code:CodeComponent_agent_py____pymdp_agent_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "agent.py" .

code:CodeComponent_agent_py____pymdp_jax_agent_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "agent.py" .

code:CodeComponent_algos_py____pymdp_jax_algos_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "algos.py" .

code:CodeComponent_conf_py____docs_conf_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "conf.py" .

code:CodeComponent_control_py____pymdp_control_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "control.py" .

code:CodeComponent_control_py____pymdp_jax_control_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "control.py" .

code:CodeComponent_default_models_py____pymdp_default_models_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "default_models.py" .

code:CodeComponent_env_py____pymdp_envs_env_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "env.py" .

code:CodeComponent_fpi_py____pymdp_algos_fpi_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "fpi.py" .

code:CodeComponent_grid_worlds_py____pymdp_envs_grid_worlds_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "grid_worlds.py" .

code:CodeComponent_inference_py____pymdp_inference_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "inference.py" .

code:CodeComponent_inference_py____pymdp_jax_inference_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "inference.py" .

code:CodeComponent_learning_py____pymdp_jax_learning_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "learning.py" .

code:CodeComponent_learning_py____pymdp_learning_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "learning.py" .

code:CodeComponent_likelihoods_py____pymdp_jax_likelihoods_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "likelihoods.py" .

code:CodeComponent_maths_py____pymdp_jax_maths_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "maths.py" .

code:CodeComponent_maths_py____pymdp_maths_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "maths.py" .

code:CodeComponent_mmp_old_py____pymdp_algos_mmp_old_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "mmp_old.py" .

code:CodeComponent_mmp_py____pymdp_algos_mmp_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "mmp.py" .

code:CodeComponent_setup_py____setup_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "setup.py" .

code:CodeComponent_task_py____pymdp_jax_task_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "task.py" .

code:CodeComponent_test_SPM_validation_py____test_test_SPM_validation_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_SPM_validation.py" .

code:CodeComponent_test_agent_jax_py____test_test_agent_jax_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_agent_jax.py" .

code:CodeComponent_test_agent_py____test_test_agent_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_agent.py" .

code:CodeComponent_test_control_jax_py____test_test_control_jax_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_control_jax.py" .

code:CodeComponent_test_control_py____test_test_control_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_control.py" .

code:CodeComponent_test_demos_py____test_test_demos_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_demos.py" .

code:CodeComponent_test_fpi_py____test_test_fpi_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_fpi.py" .

code:CodeComponent_test_inference_jax_py____test_test_inference_jax_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_inference_jax.py" .

code:CodeComponent_test_inference_py____test_test_inference_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_inference.py" .

code:CodeComponent_test_learning_jax_py____test_test_learning_jax_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_learning_jax.py" .

code:CodeComponent_test_learning_py____test_test_learning_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_learning.py" .

code:CodeComponent_test_message_passing_jax_py____test_test_message_passing_jax_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_message_passing_jax.py" .

code:CodeComponent_test_mmp_py____test_test_mmp_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_mmp.py" .

code:CodeComponent_test_utils_py____test_test_utils_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_utils.py" .

code:CodeComponent_test_wrappers_py____test_test_wrappers_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "test_wrappers.py" .

code:CodeComponent_tmaze_py____pymdp_envs_tmaze_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "tmaze.py" .

code:CodeComponent_utils_py____pymdp_jax_utils_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "utils.py" .

code:CodeComponent_utils_py____pymdp_utils_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "utils.py" .

code:CodeComponent_visual_foraging_py____pymdp_envs_visual_foraging_py a code:CodeComponent ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:name "visual_foraging.py" .

code:Function_add____pymdp_jax_algos_py__add a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.algos.add()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L11" ;
    code:hasInput code:Parameter_x_add,
        code:Parameter_y_add ;
    code:isDocumented false ;
    code:name "add" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_aif_likelihood____pymdp_jax_likelihoods_py__aif_likelihood a code:Function ;
    code:comments "Na -> batch dimension - number of different subjects/agents, Nb -> number of experimental blocks, Nt -> number of trials within each block, TODO: See if some information has to be passed from one block to the next and change init and carry accordingly" ;
    code:complexity "Complexity: 3" ;
    code:dependsOn code:Function_pymdp_jax_likelihoods_evolve_trials\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.likelihoods.aif_likelihood()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/likelihoods.py#L27" ;
    code:hasInput code:Parameter_Na_aif_likelihood,
        code:Parameter_Nb_aif_likelihood,
        code:Parameter_Nt_aif_likelihood,
        code:Parameter_agent_aif_likelihood,
        code:Parameter_data_aif_likelihood ;
    code:isDocumented false ;
    code:name "aif_likelihood" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_all_marginal_log_likelihood____pymdp_jax_algos_py__all_marginal_log_likelihood a code:Function ;
    code:comments "insted of a double loop we could have a list defining m to f mapping, which could be resolved with a single tree_map cast" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.algos.all_marginal_log_likelihood()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L18" ;
    code:hasInput code:Parameter_all_factor_lists_all_marginal_log_likelihood,
        code:Parameter_log_likelihoods_all_marginal_log_likelihood,
        code:Parameter_qs_all_marginal_log_likelihood ;
    code:isDocumented false ;
    code:name "all_marginal_log_likelihood" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_average_states_over_policies____pymdp_inference_py__average_states_over_policies a code:Function ;
    code:comments "get the number of hidden state factors using the shape of the first-policy-conditioned posterior, get the dimensionalities of each hidden state factor" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """This function computes a expected posterior over hidden states with respect to the posterior over policies, 
    also known as the 'Bayesian model average of states with respect to policies'.

    Parameters
    ----------
    qs_pi: ``numpy.ndarray`` of dtype object
        Posterior beliefs over hidden states for each policy. Nesting structure is policies, factors,
        where e.g. ``qs_pi[p][f]`` stores the marginal belief about factor ``f`` under policy ``p``.
    q_pi: ``numpy.ndarray`` of dtype object
        Posterior beliefs about policies where ``len(q_pi) = num_policies``

    Returns
    ---------
    qs_bma: ``numpy.ndarray`` of dtype object
        Marginal posterior over hidden states for the current timepoint, 
        averaged across policies according to their posterior probability given by ``q_pi``""" ;
    code:function_exe_cmd "pymdp.inference.average_states_over_policies()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/inference.py#L247" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_q_pi_average_states_over_policies,
        code:Parameter_qs_pi_average_states_over_policies ;
    code:isDocumented true ;
    code:name "average_states_over_policies" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_backwards_induction____pymdp_control_py__backwards_induction a code:Function ;
    code:comments "TODO can this be done with arbitrary B_factor_list?, If there exists an action that allows transitioning, from state to next_state, with probability larger than threshold, set b[state, next_state] to 1, TODO stop when all 1s?" ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Runs backwards induction of reaching a goal state H given a transition model B.

    Parameters
    ----------    
    H: ``numpy.ndarray`` of dtype object
       Prior over states
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    B_factor_list: ``list`` of ``list`` of ``int``
        List of lists of hidden state factors each hidden state factor depends on. Each element ``B_factor_list[i]`` is a list of the factor indices that factor i's dynamics depend on.
    threshold: ``float``
        The threshold for pruning transitions that are below a certain probability
    depth: ``int``
        The temporal depth of the backward induction

    Returns
    ----------
    I: ``numpy.ndarray`` of dtype object
        For each state factor, contains a 2D ``numpy.ndarray`` whose element i,j yields the probability 
        of reaching the goal state backwards from state j after i steps.""" ;
    code:function_exe_cmd "pymdp.control.backwards_induction()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L1259" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_B_backwards_induction,
        code:Parameter_B_factor_list_backwards_induction,
        code:Parameter_H_backwards_induction,
        code:Parameter_depth_backwards_induction,
        code:Parameter_threshold_backwards_induction ;
    code:isDocumented true ;
    code:name "backwards_induction" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_build_xn_vn_array____pymdp_utils_py__build_xn_vn_array a code:Function ;
    code:complexity "Complexity: 8" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """This function constructs array-ified (not nested) versions
    of the posterior xn (beliefs) or vn (prediction error) arrays, that are separated 
    by iteration, hidden state factor, timepoint, and policy""" ;
    code:function_exe_cmd "pymdp.utils.build_xn_vn_array()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L519" ;
    code:hasInput code:Parameter_xn_build_xn_vn_array ;
    code:isDocumented true ;
    code:name "build_xn_vn_array" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_ambiguity_factorized____pymdp_control_py__calc_ambiguity_factorized a code:Function ;
    code:comments "TODO check if we do this correctly!, TODO why does spm_dot return an array here?, joint_x = maths.spm_cross(qs_pi[t][factor_idx]), ambiguity += (H_m * joint_x).sum()" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Computes the Ambiguity term.

    Parameters
    ----------
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    A_factor_list: ``list`` of ``list`` of ``int``
        List of lists, where ``A_factor_list[m]`` is a list of the hidden state factor indices that observation modality with the index ``m`` depends on

    Returns
    -------
    ambiguity: float""" ;
    code:function_exe_cmd "pymdp.control.calc_ambiguity_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L1316" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_calc_ambiguity_factorized,
        code:Parameter_A_factor_list_calc_ambiguity_factorized,
        code:Parameter_qs_pi_calc_ambiguity_factorized ;
    code:isDocumented true ;
    code:name "calc_ambiguity_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_expected_utility____pymdp_control_py__calc_expected_utility a code:Function ;
    code:comments "initialise expected utility, loop over time points and modalities, reformat C to be tiled across timesteps, if it's not already, make a deepcopy of C where it has been tiled across timesteps, convert relative log probabilities into proper probability distribution" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Computes the expected utility of a policy, using the observation distribution expected under that policy and a prior preference vector.

    Parameters
    ----------
    qo_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over observations expected under the policy, where ``qo_pi[t]`` stores the beliefs about
        observations expected under the policy at time ``t``
    C: ``numpy.ndarray`` of dtype object
       Prior over observations or 'prior preferences', storing the "value" of each outcome in terms of relative log probabilities. 
       This is softmaxed to form a proper probability distribution before being used to compute the expected utility.

    Returns
    -------
    expected_util: float
        Utility (reward) expected under the policy in question""" ;
    code:function_exe_cmd "pymdp.control.calc_expected_utility()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L619" ;
    code:hasImport code:Function_import_copy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_C_calc_expected_utility,
        code:Parameter_qo_pi_calc_expected_utility ;
    code:isDocumented true ;
    code:name "calc_expected_utility" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_free_energy____pymdp_maths_py__calc_free_energy a code:Function ;
    code:comments "Neg-entropy of posterior marginal H(q[f]), Cross entropy of posterior marginal with prior marginal H(q[f],p[f])" ;
    code:complexity "Complexity: 3" ;
    code:dependsOn code:Function_pymdp_maths_compute_accuracy\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Calculate variational free energy
    @TODO Primarily used in FPI algorithm, needs to be made general""" ;
    code:function_exe_cmd "pymdp.maths.calc_free_energy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L396" ;
    code:hasInput code:Parameter_likelihood_calc_free_energy,
        code:Parameter_n_factors_calc_free_energy,
        code:Parameter_prior_calc_free_energy,
        code:Parameter_qs_calc_free_energy ;
    code:isDocumented true ;
    code:name "calc_free_energy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_inductive_cost____pymdp_control_py__calc_inductive_cost a code:Function ;
    code:comments "initialise inductive cost, loop over time points and modalities, we also assume precise beliefs here?!, m = arg max_n p_n < sup p, i.e. find first I idx equals 1 and m is the index before, we might find no path to goal (i.e. when no goal specified)" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Computes the inductive cost of a state.

    Parameters
    ----------
    qs: ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at a given timepoint.
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        states expected under the policy at time ``t``
    I: ``numpy.ndarray`` of dtype object
        For each state factor, contains a 2D ``numpy.ndarray`` whose element i,j yields the probability 
        of reaching the goal state backwards from state j after i steps.

    Returns
    -------
    inductive_cost: float
        Cost of visited this state using backwards induction under the policy in question""" ;
    code:function_exe_cmd "pymdp.control.calc_inductive_cost()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L910" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_I_calc_inductive_cost,
        code:Parameter_epsilon_calc_inductive_cost,
        code:Parameter_qs_calc_inductive_cost,
        code:Parameter_qs_pi_calc_inductive_cost ;
    code:isDocumented true ;
    code:name "calc_inductive_cost" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_inductive_value_t____pymdp_jax_control_py__calc_inductive_value_t a code:Function ;
    code:comments "initialise inductive value, we also assume precise beliefs here?!, m = arg max_n p_n < sup p, i.e. find first entry at which I_idx equals 1, and then m is the index before that, if there are any 1's at all in that column of I, then this == 1, otherwise 0, scaling by path_available will nullify the addition of inductive value in the case we find no path to goal (i.e. when no goal specified)" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Computes the inductive value of a state at a particular time (translation of @tverbele's `numpy` implementation of inductive planning, formerly
    called `calc_inductive_cost`).

    Parameters
    ----------
    qs: ``list`` of ``jax.numpy.ndarray`` 
        Marginal posterior beliefs over hidden states at a given timepoint.
    qs_next: ```list`` of ``jax.numpy.ndarray`` 
        Predictive posterior beliefs over hidden states expected under the policy.
    I: ``numpy.ndarray`` of dtype object
        For each state factor, contains a 2D ``numpy.ndarray`` whose element i,j yields the probability 
        of reaching the goal state backwards from state j after i steps.
    epsilon: ``float``
        Value that tunes the strength of the inductive value (how much it contributes to the expected free energy of policies)

    Returns
    -------
    inductive_val: float
        Value (negative inductive cost) of visiting this state using backwards induction under the policy in question""" ;
    code:function_exe_cmd "pymdp.jax.control.calc_inductive_value_t()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L419" ;
    code:hasImport code:Function_from_jax_import_jax_jit,
        code:Function_from_jax_import_jax_lax,
        code:Function_from_jax_import_jax_nn,
        code:Function_from_jax_import_jax_random_as_jr,
        code:Function_from_jax_import_jax_vmap,
        code:Function_from_jax_scipy_special_import_jax_scipy_special_xlogy,
        code:Function_from_jaxtyping_import_jaxtyping_Array,
        <https://github.com/infer-actively/pymdpFunction_from_pymdp_jax_maths_import_pymdp_jax_maths_*>,
        code:Function_import_jax_numpy_as_jnp,
        code:Function_import_jax_tree_util_as_jtu ;
    code:hasInput code:Parameter_I_calc_inductive_value_t,
        code:Parameter_epsilon_calc_inductive_value_t,
        code:Parameter_qs_calc_inductive_value_t,
        code:Parameter_qs_next_calc_inductive_value_t ;
    code:isDocumented true ;
    code:name "calc_inductive_value_t" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_pA_info_gain____pymdp_control_py__calc_pA_info_gain a code:Function ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute expected Dirichlet information gain about parameters ``pA`` under a policy

    Parameters
    ----------
    pA: ``numpy.ndarray`` of dtype object
        Dirichlet parameters over observation model (same shape as ``A``)
    qo_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over observations expected under the policy, where ``qo_pi[t]`` stores the beliefs about
        observations expected under the policy at time ``t``
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``

    Returns
    -------
    infogain_pA: float
        Surprise (about Dirichlet parameters) expected under the policy in question""" ;
    code:function_exe_cmd "pymdp.control.calc_pA_info_gain()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L727" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_pA_calc_pA_info_gain,
        code:Parameter_qo_pi_calc_pA_info_gain,
        code:Parameter_qs_pi_calc_pA_info_gain ;
    code:isDocumented true ;
    code:name "calc_pA_info_gain" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_pA_info_gain____pymdp_jax_control_py__calc_pA_info_gain a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute expected Dirichlet information gain about parameters ``pA`` for a given posterior predictive distribution over observations ``qo`` and states ``qs``.

    Parameters
    ----------
    pA: ``numpy.ndarray`` of dtype object
        Dirichlet parameters over observation model (same shape as ``A``)
    qo: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over observations; stores the beliefs about
        observations expected under the policy at some arbitrary time ``t``
    qs: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states, stores the beliefs about
        hidden states expected under the policy at some arbitrary time ``t``

    Returns
    -------
    infogain_pA: float
        Surprise (about Dirichlet parameters) expected for the pair of posterior predictive distributions ``qo`` and ``qs``""" ;
    code:function_exe_cmd "pymdp.jax.control.calc_pA_info_gain()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L229" ;
    code:hasInput code:Parameter_A_dependencies_calc_pA_info_gain,
        code:Parameter_pA_calc_pA_info_gain,
        code:Parameter_qo_calc_pA_info_gain,
        code:Parameter_qs_calc_pA_info_gain ;
    code:isDocumented true ;
    code:name "calc_pA_info_gain" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_pA_info_gain_factorized____pymdp_control_py__calc_pA_info_gain_factorized a code:Function ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute expected Dirichlet information gain about parameters ``pA`` under a policy.
    In this version of the function, we assume that the observation model is factorized, i.e. that each observation modality depends on a subset of the hidden state factors.

    Parameters
    ----------
    pA: ``numpy.ndarray`` of dtype object
        Dirichlet parameters over observation model (same shape as ``A``)
    qo_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over observations expected under the policy, where ``qo_pi[t]`` stores the beliefs about
        observations expected under the policy at time ``t``
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``
    A_factor_list: ``list`` of ``list`` of ``int``
        List of lists, where ``A_factor_list[m]`` is a list of the hidden state factor indices that observation modality with the index ``m`` depends on

    Returns
    -------
    infogain_pA: float
        Surprise (about Dirichlet parameters) expected under the policy in question""" ;
    code:function_exe_cmd "pymdp.control.calc_pA_info_gain_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L764" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_factor_list_calc_pA_info_gain_factorized,
        code:Parameter_pA_calc_pA_info_gain_factorized,
        code:Parameter_qo_pi_calc_pA_info_gain_factorized,
        code:Parameter_qs_pi_calc_pA_info_gain_factorized ;
    code:isDocumented true ;
    code:name "calc_pA_info_gain_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_pB_info_gain____pymdp_control_py__calc_pB_info_gain a code:Function ;
    code:comments "the 'past posterior' used for the information gain about pB here is the posterior, over expected states at the timestep previous to the one under consideration, if we're on the first timestep, we just use the latest posterior in the, entire action-perception cycle as the previous posterior, otherwise, we use the expected states for the timestep previous to the timestep under consideration, get the list of action-indices for the current timestep" ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute expected Dirichlet information gain about parameters ``pB`` under a given policy

    Parameters
    ----------
    pB: ``numpy.ndarray`` of dtype object
        Dirichlet parameters over transition model (same shape as ``B``)
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``
    qs_prev: ``numpy.ndarray`` of dtype object
        Posterior over hidden states at beginning of trajectory (before receiving observations)
    policy: 2D ``numpy.ndarray``
        Array that stores actions entailed by a policy over time. Shape is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.

    Returns
    -------
    infogain_pB: float
        Surprise (about dirichlet parameters) expected under the policy in question""" ;
    code:function_exe_cmd "pymdp.control.calc_pB_info_gain()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L805" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_pB_calc_pB_info_gain,
        code:Parameter_policy_calc_pB_info_gain,
        code:Parameter_qs_pi_calc_pB_info_gain,
        code:Parameter_qs_prev_calc_pB_info_gain ;
    code:isDocumented true ;
    code:name "calc_pB_info_gain" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_pB_info_gain____pymdp_jax_control_py__calc_pB_info_gain a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute expected Dirichlet information gain about parameters ``pB`` under a given policy

    Parameters
    ----------
    pB: ``Array`` of dtype object
        Dirichlet parameters over transition model (same shape as ``B``)
    qs_t: ``list`` of ``Array`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy at time ``t``
    qs_t_minus_1: ``list`` of ``Array`` of dtype object
        Posterior over hidden states at time ``t-1`` (before receiving observations)
    u_t_minus_1: "Array"
        Actions in time step t-1 for each factor

    Returns
    -------
    infogain_pB: float
        Surprise (about Dirichlet parameters) expected under the policy in question""" ;
    code:function_exe_cmd "pymdp.jax.control.calc_pB_info_gain()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L262" ;
    code:hasInput code:Parameter_B_dependencies_calc_pB_info_gain,
        code:Parameter_pB_calc_pB_info_gain,
        code:Parameter_qs_t_calc_pB_info_gain,
        code:Parameter_qs_t_minus_1_calc_pB_info_gain,
        code:Parameter_u_t_minus_1_calc_pB_info_gain ;
    code:isDocumented true ;
    code:name "calc_pB_info_gain" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_pB_info_gain_interactions____pymdp_control_py__calc_pB_info_gain_interactions a code:Function ;
    code:comments "the 'past posterior' used for the information gain about pB here is the posterior, over expected states at the timestep previous to the one under consideration, if we're on the first timestep, we just use the latest posterior in the, entire action-perception cycle as the previous posterior, otherwise, we use the expected states for the timestep previous to the timestep under consideration, get the list of action-indices for the current timestep" ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute expected Dirichlet information gain about parameters ``pB`` under a given policy

    Parameters
    ----------
    pB: ``numpy.ndarray`` of dtype object
        Dirichlet parameters over transition model (same shape as ``B``)
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``
    qs_prev: ``numpy.ndarray`` of dtype object
        Posterior over hidden states at beginning of trajectory (before receiving observations)
    B_factor_list: ``list`` of ``list`` of ``int``
        List of lists, where ``B_factor_list[f]`` is a list of the hidden state factor indices that hidden state factor with the index ``f`` depends on
    policy: 2D ``numpy.ndarray``
        Array that stores actions entailed by a policy over time. Shape is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.

    Returns
    -------
    infogain_pB: float
        Surprise (about dirichlet parameters) expected under the policy in question""" ;
    code:function_exe_cmd "pymdp.control.calc_pB_info_gain_interactions()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L856" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_B_factor_list_calc_pB_info_gain_interactions,
        code:Parameter_pB_calc_pB_info_gain_interactions,
        code:Parameter_policy_calc_pB_info_gain_interactions,
        code:Parameter_qs_pi_calc_pB_info_gain_interactions,
        code:Parameter_qs_prev_calc_pB_info_gain_interactions ;
    code:isDocumented true ;
    code:name "calc_pB_info_gain_interactions" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_states_info_gain____pymdp_control_py__calc_states_info_gain a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Computes the Bayesian surprise or information gain about states of a policy, 
    using the observation model and the hidden state distribution expected under that policy.

    Parameters
    ----------
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``

    Returns
    -------
    states_surprise: float
        Bayesian surprise (about states) or salience expected under the policy in question""" ;
    code:function_exe_cmd "pymdp.control.calc_states_info_gain()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L664" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_calc_states_info_gain,
        code:Parameter_qs_pi_calc_states_info_gain ;
    code:isDocumented true ;
    code:name "calc_states_info_gain" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_calc_states_info_gain_factorized____pymdp_control_py__calc_states_info_gain_factorized a code:Function ;
    code:comments "list of the hidden state factor indices that observation modality with the index `m` depends on" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Computes the Bayesian surprise or information gain about states of a policy, 
    using the observation model and the hidden state distribution expected under that policy.

    Parameters
    ----------
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``
    A_factor_list: ``list`` of ``list`` of ``int``
        List of lists, where ``A_factor_list[m]`` is a list of the hidden state factor indices that observation modality with the index ``m`` depends on

    Returns
    -------
    states_surprise: float
        Bayesian surprise (about states) or salience expected under the policy in question""" ;
    code:function_exe_cmd "pymdp.control.calc_states_info_gain_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L693" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_calc_states_info_gain_factorized,
        code:Parameter_A_factor_list_calc_states_info_gain_factorized,
        code:Parameter_qs_pi_calc_states_info_gain_factorized ;
    code:isDocumented true ;
    code:name "calc_states_info_gain_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_cat_sample____pymdp_jax_task_py__cat_sample a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.task.cat_sample()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/task.py#L16" ;
    code:hasInput code:Parameter_key_cat_sample,
        code:Parameter_p_cat_sample ;
    code:isDocumented false ;
    code:name "cat_sample" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_G_policy____pymdp_jax_control_py__compute_G_policy a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_control_calc_pA_info_gain\(\),
        code:Function_pymdp_jax_control_calc_pB_info_gain\(\),
        code:Function_pymdp_jax_control_compute_expected_obs\(\),
        code:Function_pymdp_jax_control_compute_expected_state\(\),
        code:Function_pymdp_jax_control_compute_expected_utility\(\),
        code:Function_pymdp_jax_control_compute_info_gain\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Write a version of compute_G_policy that does the same computations as `compute_G_policy` but using `lax.scan` instead of a for loop." ;
    code:function_exe_cmd "pymdp.jax.control.compute_G_policy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L290" ;
    code:hasInput code:Parameter_A_compute_G_policy,
        code:Parameter_A_dependencies_compute_G_policy,
        code:Parameter_B_compute_G_policy,
        code:Parameter_B_dependencies_compute_G_policy,
        code:Parameter_C_compute_G_policy,
        code:Parameter_pA_compute_G_policy,
        code:Parameter_pB_compute_G_policy,
        code:Parameter_policy_i_compute_G_policy,
        code:Parameter_qs_init_compute_G_policy,
        code:Parameter_use_param_info_gain_compute_G_policy,
        code:Parameter_use_states_info_gain_compute_G_policy,
        code:Parameter_use_utility_compute_G_policy ;
    code:isDocumented true ;
    code:name "compute_G_policy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_G_policy_inductive____pymdp_jax_control_py__compute_G_policy_inductive a code:Function ;
    code:complexity "Complexity: 3" ;
    code:dependsOn code:Function_pymdp_jax_control_calc_pA_info_gain\(\),
        code:Function_pymdp_jax_control_calc_pB_info_gain\(\),
        code:Function_pymdp_jax_control_compute_expected_obs\(\),
        code:Function_pymdp_jax_control_compute_expected_state\(\),
        code:Function_pymdp_jax_control_compute_expected_utility\(\),
        code:Function_pymdp_jax_control_compute_info_gain\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Write a version of compute_G_policy that does the same computations as `compute_G_policy` but using `lax.scan` instead of a for loop.
    This one further adds computations used for inductive planning.""" ;
    code:function_exe_cmd "pymdp.jax.control.compute_G_policy_inductive()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L318" ;
    code:hasInput code:Parameter_A_compute_G_policy_inductive,
        code:Parameter_A_dependencies_compute_G_policy_inductive,
        code:Parameter_B_compute_G_policy_inductive,
        code:Parameter_B_dependencies_compute_G_policy_inductive,
        code:Parameter_C_compute_G_policy_inductive,
        code:Parameter_I_compute_G_policy_inductive,
        code:Parameter_inductive_epsilon_compute_G_policy_inductive,
        code:Parameter_pA_compute_G_policy_inductive,
        code:Parameter_pB_compute_G_policy_inductive,
        code:Parameter_policy_i_compute_G_policy_inductive,
        code:Parameter_qs_init_compute_G_policy_inductive,
        code:Parameter_use_inductive_compute_G_policy_inductive,
        code:Parameter_use_param_info_gain_compute_G_policy_inductive,
        code:Parameter_use_states_info_gain_compute_G_policy_inductive,
        code:Parameter_use_utility_compute_G_policy_inductive ;
    code:isDocumented true ;
    code:name "compute_G_policy_inductive" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_accuracy____pymdp_jax_maths_py__compute_accuracy a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_jax_maths_compute_log_likelihood\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Compute the accuracy portion of the variational free energy (expected log likelihood under the variational posterior)" ;
    code:function_exe_cmd "pymdp.jax.maths.compute_accuracy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L91" ;
    code:hasInput code:Parameter_A_compute_accuracy,
        code:Parameter_obs_compute_accuracy,
        code:Parameter_qs_compute_accuracy ;
    code:isDocumented true ;
    code:name "compute_accuracy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_accuracy____pymdp_maths_py__compute_accuracy a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Function that computes the accuracy term of the variational free energy. This is essentially a stripped down version of `spm_dot` above,
    with fewer conditions / dimension handling in the beginning.""" ;
    code:function_exe_cmd "pymdp.maths.compute_accuracy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L382" ;
    code:hasInput code:Parameter_log_likelihood_compute_accuracy,
        code:Parameter_qs_compute_accuracy ;
    code:isDocumented true ;
    code:name "compute_accuracy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_expected_obs____pymdp_jax_control_py__compute_expected_obs a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """New version of expected observation (computation of Q(o|pi)) that takes into account sparse dependencies between observation
    modalities and hidden state factors""" ;
    code:function_exe_cmd "pymdp.jax.control.compute_expected_obs()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L188" ;
    code:hasInput code:Parameter_A_compute_expected_obs,
        code:Parameter_A_dependencies_compute_expected_obs,
        code:Parameter_qs_compute_expected_obs ;
    code:isDocumented true ;
    code:name "compute_expected_obs" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_expected_state____pymdp_jax_control_py__compute_expected_state a code:Function ;
    code:comments "Note: this algorithm is only correct if each factor depends only on itself. For any interactions,, we will have empirical priors with codependent factors., P(s'|s, u) = \\sum_{s, u} P(s'|s) P(s|u) P(u|pi)P(pi) because u </-> pi" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Compute posterior over next state, given belief about previous state, transition model and action..." ;
    code:function_exe_cmd "pymdp.jax.control.compute_expected_state()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L159" ;
    code:hasInput code:Parameter_B_compute_expected_state,
        code:Parameter_B_dependencies_compute_expected_state,
        code:Parameter_qs_prior_compute_expected_state,
        code:Parameter_u_t_compute_expected_state ;
    code:isDocumented true ;
    code:name "compute_expected_state" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_expected_state_and_Bs____pymdp_jax_control_py__compute_expected_state_and_Bs a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Compute posterior over next state, given belief about previous state, transition model and action..." ;
    code:function_exe_cmd "pymdp.jax.control.compute_expected_state_and_Bs()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L175" ;
    code:hasInput code:Parameter_B_compute_expected_state_and_Bs,
        code:Parameter_qs_prior_compute_expected_state_and_Bs,
        code:Parameter_u_t_compute_expected_state_and_Bs ;
    code:isDocumented true ;
    code:name "compute_expected_state_and_Bs" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_expected_utility____pymdp_jax_control_py__compute_expected_utility a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.control.compute_expected_utility()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L218" ;
    code:hasInput code:Parameter_C_compute_expected_utility,
        code:Parameter_qo_compute_expected_utility,
        code:Parameter_t_compute_expected_utility ;
    code:isDocumented false ;
    code:name "compute_expected_utility" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_free_energy____pymdp_jax_maths_py__compute_free_energy a code:Function ;
    code:comments "initialize variational free energy" ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_jax_maths_compute_accuracy\(\),
        code:Function_pymdp_jax_maths_stable_cross_entropy\(\),
        code:Function_pymdp_jax_maths_stable_entropy\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Calculate variational free energy by breaking its computation down into three steps:
    1. computation of the negative entropy of the posterior -H[Q(s)]
    2. computation of the cross entropy of the posterior with the prior H_{Q(s)}[P(s)]
    3. computation of the accuracy E_{Q(s)}[lnP(o|s)] 

    Then add them all together -- except subtract the accuracy""" ;
    code:function_exe_cmd "pymdp.jax.maths.compute_free_energy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L103" ;
    code:hasInput code:Parameter_A_compute_free_energy,
        code:Parameter_obs_compute_free_energy,
        code:Parameter_prior_compute_free_energy,
        code:Parameter_qs_compute_free_energy ;
    code:isDocumented true ;
    code:name "compute_free_energy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_info_gain____pymdp_jax_control_py__compute_info_gain a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "New version of expected information gain that takes into account sparse dependencies between observation modalities and hidden state factors." ;
    code:function_exe_cmd "pymdp.jax.control.compute_info_gain()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L201" ;
    code:hasInput code:Parameter_A_compute_info_gain,
        code:Parameter_A_dependencies_compute_info_gain,
        code:Parameter_qo_compute_info_gain,
        code:Parameter_qs_compute_info_gain ;
    code:isDocumented true ;
    code:name "compute_info_gain" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_log_likelihood____pymdp_jax_maths_py__compute_log_likelihood a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_maths_compute_log_likelihood_single_modality\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Compute likelihood over hidden states across observations from different modalities" ;
    code:function_exe_cmd "pymdp.jax.maths.compute_log_likelihood()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L78" ;
    code:hasInput code:Parameter_A_compute_log_likelihood,
        code:Parameter_distr_obs_compute_log_likelihood,
        code:Parameter_obs_compute_log_likelihood ;
    code:isDocumented true ;
    code:name "compute_log_likelihood" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_log_likelihood_per_modality____pymdp_jax_maths_py__compute_log_likelihood_per_modality a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_maths_compute_log_likelihood_single_modality\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Compute likelihood over hidden states across observations from different modalities, and return them per modality" ;
    code:function_exe_cmd "pymdp.jax.maths.compute_log_likelihood_per_modality()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L85" ;
    code:hasInput code:Parameter_A_compute_log_likelihood_per_modality,
        code:Parameter_distr_obs_compute_log_likelihood_per_modality,
        code:Parameter_obs_compute_log_likelihood_per_modality ;
    code:isDocumented true ;
    code:name "compute_log_likelihood_per_modality" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_compute_log_likelihood_single_modality____pymdp_jax_maths_py__compute_log_likelihood_single_modality a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_maths_get_likelihood_single_modality\(\),
        code:Function_pymdp_jax_maths_log_stable\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Compute observation log-likelihood for a single modality" ;
    code:function_exe_cmd "pymdp.jax.maths.compute_log_likelihood_single_modality()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L74" ;
    code:hasInput code:Parameter_A_m_compute_log_likelihood_single_modality,
        code:Parameter_distr_obs_compute_log_likelihood_single_modality,
        code:Parameter_o_m_compute_log_likelihood_single_modality ;
    code:isDocumented true ;
    code:name "compute_log_likelihood_single_modality" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_construct_controllable_B____pymdp_utils_py__construct_controllable_B a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Generates a fully controllable transition likelihood array, where each 
    action (control state) corresponds to a move to the n-th state from any 
    other state, for each control factor""" ;
    code:function_exe_cmd "pymdp.utils.construct_controllable_B()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L165" ;
    code:hasInput code:Parameter_num_controls_construct_controllable_B,
        code:Parameter_num_states_construct_controllable_B ;
    code:isDocumented true ;
    code:name "construct_controllable_B" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_construct_full_a____pymdp_utils_py__construct_full_a a code:Function ;
    code:comments "dimensionality of the support of the likelihood distribution (i.e. the number of observation levels), full dimensionality of the output (`A`), these are the indices of the dimensions we need to fill for this modality, dimensionalities of the relevant factors, these are the slices that are filled out by the provided `A_reduced`, here we insert the correct values for the fill indices for this slice" ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_insert_multiple\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Utility function for reconstruction a full A matrix from a reduced A matrix, using known factor indices
    to tile out the reduced A matrix along the 'non-informative' dimensions
    Parameters:
    ==========
    - `A_reduced` [np.ndarray]:
        The reduced A matrix or likelihood array that encodes probabilistic relationship
        of the generative model between hidden state factors (lagging dimensions, columns, slices, etc...)
        and observations (leading dimension, rows). 
    - `original_factor_idx` [list]:
        List of hidden state indices in terms of the full hidden state factor list, that comprise
        the lagging dimensions of `A_reduced`
    - `num_states` [list]:
        The list of all the dimensionalities of hidden state factors in the full generative model.
        `A_reduced.shape[1:]` should be equal to `num_states[original_factor_idx]`
    Returns:
    =========
    - `A` [np.ndarray]:
        The full A matrix, containing all the lagging dimensions that correspond to hidden state factors, including
        those that are statistically independent of observations

    @ NOTE: This is the "inverse" of the reduce_a_matrix function, 
    i.e. `reduce_a_matrix(construct_full_a(A_reduced, original_factor_idx, num_states)) == A_reduced, original_factor_idx`""" ;
    code:function_exe_cmd "pymdp.utils.construct_full_a()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L447" ;
    code:hasImport code:Function_import_itertools ;
    code:hasInput code:Parameter_A_reduced_construct_full_a,
        code:Parameter_num_states_construct_full_a,
        code:Parameter_original_factor_idx_construct_full_a ;
    code:isDocumented true ;
    code:name "construct_full_a" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_construct_policies____pymdp_control_py__construct_policies a code:Function ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Generate a ``list`` of policies. The returned array ``policies`` is a ``list`` that stores one policy per entry.
    A particular policy (``policies[i]``) has shape ``(num_timesteps, num_factors)`` 
    where ``num_timesteps`` is the temporal depth of the policy and ``num_factors`` is the number of control factors.

    Parameters
    ----------
    num_states: ``list`` of ``int``
        ``list`` of the dimensionalities of each hidden state factor
    num_controls: ``list`` of ``int``, default ``None``
        ``list`` of the dimensionalities of each control state factor. If ``None``, then is automatically computed as the dimensionality of each hidden state factor that is controllable
    policy_len: ``int``, default 1
        temporal depth ("planning horizon") of policies
    control_fac_idx: ``list`` of ``int``
        ``list`` of indices of the hidden state factors that are controllable (i.e. those state factors ``i`` where ``num_controls[i] > 1``)

    Returns
    ----------
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy as a 2D array in ``policies[p_idx]``. Shape of ``policies[p_idx]`` 
        is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.""" ;
    code:function_exe_cmd "pymdp.control.construct_policies()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L953" ;
    code:hasImport code:Function_import_itertools,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_control_fac_idx_construct_policies,
        code:Parameter_num_controls_construct_policies,
        code:Parameter_num_states_construct_policies,
        code:Parameter_policy_len_construct_policies ;
    code:isDocumented true ;
    code:name "construct_policies" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_construct_policies____pymdp_jax_control_py__construct_policies a code:Function ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Generate a ``list`` of policies. The returned array ``policies`` is a ``list`` that stores one policy per entry.
    A particular policy (``policies[i]``) has shape ``(num_timesteps, num_factors)`` 
    where ``num_timesteps`` is the temporal depth of the policy and ``num_factors`` is the number of control factors.

    Parameters
    ----------
    num_states: ``list`` of ``int``
        ``list`` of the dimensionalities of each hidden state factor
    num_controls: ``list`` of ``int``, default ``None``
        ``list`` of the dimensionalities of each control state factor. If ``None``, then is automatically computed as the dimensionality of each hidden state factor that is controllable
    policy_len: ``int``, default 1
        temporal depth ("planning horizon") of policies
    control_fac_idx: ``list`` of ``int``
        ``list`` of indices of the hidden state factors that are controllable (i.e. those state factors ``i`` where ``num_controls[i] > 1``)

    Returns
    ----------
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy as a 2D array in ``policies[p_idx]``. Shape of ``policies[p_idx]`` 
        is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.""" ;
    code:function_exe_cmd "pymdp.jax.control.construct_policies()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L99" ;
    code:hasImport code:Function_from_itertools_import_itertools_chain,
        code:Function_import_itertools ;
    code:hasInput code:Parameter_control_fac_idx_construct_policies,
        code:Parameter_num_controls_construct_policies,
        code:Parameter_num_states_construct_policies,
        code:Parameter_policy_len_construct_policies ;
    code:isDocumented true ;
    code:name "construct_policies" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_convert_observation_array____pymdp_utils_py__convert_observation_array a code:Function ;
    code:comments "Initialise the output, Case of one modality, Subtract obs[g,t] by 1 to account for MATLAB vs. Python indexing, (MATLAB is 1-indexed)" ;
    code:complexity "Complexity: 5" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\),
        code:Function_pymdp_utils_onehot\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Converts from SPM-style observation array to infer-actively one-hot object arrays.

    Parameters
    ----------
    - 'obs' [numpy 2-D nd.array]:
        SPM-style observation arrays are of shape (num_modalities, T), where each row 
        contains observation indices for a different modality, and columns indicate 
        different timepoints. Entries store the indices of the discrete observations 
        within each modality. 

    - 'num_obs' [list]:
        List of the dimensionalities of the observation modalities. `num_modalities` 
        is calculated as `len(num_obs)` in the function to determine whether we're 
        dealing with a single- or multi-modality 
        case.

    Returns
    ----------
    - `obs_t`[list]: 
        A list with length equal to T, where each entry of the list is either a) an object 
        array (in the case of multiple modalities) where each sub-array is a one-hot vector 
        with the observation for the correspond modality, or b) a 1D numpy array (in the case
        of one modality) that is a single one-hot vector encoding the observation for the 
        single modality.""" ;
    code:function_exe_cmd "pymdp.utils.convert_observation_array()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L349" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_num_obs_convert_observation_array,
        code:Parameter_obs_convert_observation_array ;
    code:isDocumented true ;
    code:name "convert_observation_array" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_dirichlet_expected_value____pymdp_jax_maths_py__dirichlet_expected_value a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Returns Expectation of Dirichlet parameters over a set of 
    Categorical distributions, stored in the columns of A.""" ;
    code:function_exe_cmd "pymdp.jax.maths.dirichlet_expected_value()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L142" ;
    code:hasInput code:Parameter_dir_arr_dirichlet_expected_value ;
    code:isDocumented true ;
    code:name "dirichlet_expected_value" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_dirichlet_like____pymdp_utils_py__dirichlet_like a code:Function ;
    code:complexity "Complexity: 3" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Helper function to construct a Dirichlet distribution based on an existing Categorical distribution" ;
    code:function_exe_cmd "pymdp.utils.dirichlet_like()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L182" ;
    code:hasImport code:Function_import_warnings ;
    code:hasInput code:Parameter_scale_dirichlet_like,
        code:Parameter_template_categorical_dirichlet_like ;
    code:isDocumented true ;
    code:name "dirichlet_like" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_dirichlet_log_evidence____pymdp_maths_py__dirichlet_log_evidence a code:Function ;
    code:comments "change in free energy or log model evidence" ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_maths_spm_betaln\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Bayesian model reduction and log evidence calculations for Dirichlet hyperparameters
    This is a NumPY translation of the MATLAB function `spm_MDP_log_evidence.m` from the
    DEM package of spm. 

    Description (adapted from MATLAB docstring)
    This function computes the negative log evidence of a reduced model of a
    Categorical distribution parameterised in terms of Dirichlet hyperparameters 
    (i.e., concentration parameters encoding probabilities). It uses Bayesian model reduction 
    to evaluate the evidence for models with and without a particular parameter.
    Arguments:
    ===========
    `q_dir` [1D np.ndarray]: sufficient statistics of posterior of full model
    `p_dir` [1D np.ndarray]: sufficient statistics of prior of full model
    `r_dir` [1D np.ndarray]: sufficient statistics of prior of reduced model
    Returns:
    ==========
    `F` [float]: free energy or (negative) log evidence of reduced model
    `s_dir` [1D np.ndarray]: sufficient statistics of reduced posterior""" ;
    code:function_exe_cmd "pymdp.maths.dirichlet_log_evidence()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L335" ;
    code:hasInput code:Parameter_p_dir_dirichlet_log_evidence,
        code:Parameter_q_dir_dirichlet_log_evidence,
        code:Parameter_r_dir_dirichlet_log_evidence ;
    code:isDocumented true ;
    code:name "dirichlet_log_evidence" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_dot_likelihood____pymdp_maths_py__dot_likelihood a code:Function ;
    code:comments "check to see if `LL` is a scalar" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.maths.dot_likelihood()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L239" ;
    code:hasInput code:Parameter_A_dot_likelihood,
        code:Parameter_obs_dot_likelihood ;
    code:isDocumented false ;
    code:name "dot_likelihood" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_entropy____pymdp_maths_py__entropy a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute the entropy term H of the likelihood matrix,
    i.e. one entropy value per column""" ;
    code:function_exe_cmd "pymdp.maths.entropy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L592" ;
    code:hasInput code:Parameter_A_entropy ;
    code:isDocumented true ;
    code:name "entropy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_evolve_trials____pymdp_jax_likelihoods_py__evolve_trials a code:Function ;
    code:comments "TODO: if outcomes and actions are None, generate samples" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.likelihoods.evolve_trials()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/likelihoods.py#L7" ;
    code:hasInput code:Parameter_agent_evolve_trials,
        code:Parameter_data_evolve_trials ;
    code:isDocumented false ;
    code:name "evolve_trials" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_factor_dot____pymdp_jax_maths_py__factor_dot a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Dot product of a multidimensional array with `x`.

    Parameters
    ----------
    - `qs` [list of 1D numpy.ndarray] - list of jnp.ndarrays

    Returns 
    -------
    - `Y` [1D numpy.ndarray] - the result of the dot product""" ;
    code:function_exe_cmd "pymdp.jax.maths.factor_dot()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L23" ;
    code:hasInput code:Parameter_M_factor_dot,
        code:Parameter_keep_dims_factor_dot,
        code:Parameter_xs_factor_dot ;
    code:isDocumented true ;
    code:name "factor_dot" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_factor_dot_flex____pymdp_jax_maths_py__factor_dot_flex a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Dot product of a multidimensional array with `x`.

    Parameters
    ----------
    - `M` [numpy.ndarray] - tensor
    - 'xs' [list of numpyr.ndarray] - list of tensors
    - 'dims' [list of tuples] - list of dimensions of xs tensors in tensor M
    - 'keep_dims' [tuple] - tuple of integers denoting dimesions to keep
    Returns 
    -------
    - `Y` [1D numpy.ndarray] - the result of the dot product""" ;
    code:function_exe_cmd "pymdp.jax.maths.factor_dot_flex()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L41" ;
    code:hasImport code:Function_from_jax_import_jax_jit,
        code:Function_from_jax_import_jax_lax,
        code:Function_from_jax_import_jax_nn,
        code:Function_from_jax_import_jax_tree_util,
        code:Function_from_jax_import_jax_vmap,
        code:Function_from_jax_scipy_special_import_jax_scipy_special_xlogy,
        code:Function_import_jax_numpy_as_jnp ;
    code:hasInput code:Parameter_M_factor_dot_flex,
        code:Parameter_dims_factor_dot_flex,
        code:Parameter_keep_dims_factor_dot_flex,
        code:Parameter_xs_factor_dot_flex ;
    code:isDocumented true ;
    code:name "factor_dot_flex" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_factor_dot_flex____pymdp_maths_py__factor_dot_flex a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Dot product of a multidimensional array with `x`.

    Parameters
    ----------
    - `M` [numpy.ndarray] - tensor
    - 'xs' [list of numpyr.ndarray] - list of tensors
    - 'dims' [list of tuples] - list of dimensions of xs tensors in tensor M
    - 'keep_dims' [tuple] - tuple of integers denoting dimesions to keep
    Returns 
    -------
    - `Y` [1D numpy.ndarray] - the result of the dot product""" ;
    code:function_exe_cmd "pymdp.maths.factor_dot_flex()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L109" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_M_factor_dot_flex,
        code:Parameter_dims_factor_dot_flex,
        code:Parameter_keep_dims_factor_dot_flex,
        code:Parameter_xs_factor_dot_flex ;
    code:isDocumented true ;
    code:name "factor_dot_flex" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_generate_I_matrix____pymdp_jax_control_py__generate_I_matrix a code:Function ;
    code:comments "If there exists an action that allows transitioning, from state to next_state, with probability larger than threshold, set b_reachable[current_state, previous_state] to 1, clamp I_next to 1.0 if it's above 0.1, 0 otherwise" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Generates the `I` matrices used in inductive planning. These matrices stores the probability of reaching the goal state backwards from state j (columns) after i (rows) steps.
    Parameters
    ----------    
    H: ``list`` of ``jax.numpy.ndarray``
        Constraints over desired states (1 if you want to reach that state, 0 otherwise)
    B: ``list`` of ``jax.numpy.ndarray``
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    threshold: ``float``
        The threshold for pruning transitions that are below a certain probability
    depth: ``int``
        The temporal depth of the backward induction

    Returns
    ----------
    I: ``numpy.ndarray`` of dtype object
        For each state factor, contains a 2D ``numpy.ndarray`` whose element i,j yields the probability 
        of reaching the goal state backwards from state j after i steps.""" ;
    code:function_exe_cmd "pymdp.jax.control.generate_I_matrix()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L370" ;
    code:hasImport code:Function_from_jax_import_jax_jit,
        code:Function_from_jax_import_jax_lax,
        code:Function_from_jax_import_jax_nn,
        code:Function_from_jax_import_jax_random_as_jr,
        code:Function_from_jax_import_jax_vmap,
        code:Function_from_jax_scipy_special_import_jax_scipy_special_xlogy,
        code:Function_from_jaxtyping_import_jaxtyping_Array,
        <https://github.com/infer-actively/pymdpFunction_from_pymdp_jax_maths_import_pymdp_jax_maths_*>,
        code:Function_import_jax_numpy_as_jnp,
        code:Function_import_jax_tree_util_as_jtu ;
    code:hasInput code:Parameter_B_generate_I_matrix,
        code:Parameter_H_generate_I_matrix,
        code:Parameter_depth_generate_I_matrix,
        code:Parameter_threshold_generate_I_matrix ;
    code:isDocumented true ;
    code:name "generate_I_matrix" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_expected_obs____pymdp_control_py__get_expected_obs a code:Function ;
    code:comments "each element of the list is the PPD at a different timestep, initialise expected observations, compute expected observations over time" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute the expected observations under a policy, also known as the posterior predictive density over observations

    Parameters
    ----------
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``

    Returns
    -------
    qo_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over observations expected under the policy, where ``qo_pi[t]`` stores the beliefs about
        observations expected under the policy at time ``t``""" ;
    code:function_exe_cmd "pymdp.control.get_expected_obs()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L543" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_get_expected_obs,
        code:Parameter_qs_pi_get_expected_obs ;
    code:isDocumented true ;
    code:name "get_expected_obs" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_expected_obs_factorized____pymdp_control_py__get_expected_obs_factorized a code:Function ;
    code:comments "each element of the list is the PPD at a different timestep, initialise expected observations, compute expected observations over time, list of the hidden state factor indices that observation modality with the index `modality` depends on" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute the expected observations under a policy, also known as the posterior predictive density over observations

    Parameters
    ----------
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    A_factor_list: ``list`` of ``list`` of ``int``
        List of lists of hidden state factor indices that each observation modality depends on. Each element ``A_factor_list[i]`` is a list of the factor indices that modality i's observation model depends on.
    Returns
    -------
    qo_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over observations expected under the policy, where ``qo_pi[t]`` stores the beliefs about
        observations expected under the policy at time ``t``""" ;
    code:function_exe_cmd "pymdp.control.get_expected_obs_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L580" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_factor_list_get_expected_obs_factorized,
        code:Parameter_A_get_expected_obs_factorized,
        code:Parameter_qs_pi_get_expected_obs_factorized ;
    code:isDocumented true ;
    code:name "get_expected_obs_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_expected_states____pymdp_control_py__get_expected_states a code:Function ;
    code:comments "initialise posterior predictive density as a list of beliefs over time, including current posterior beliefs about hidden states as the first element, get expected states over time" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute the expected states under a policy, also known as the posterior predictive density over states

    Parameters
    ----------
    qs: ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at a given timepoint.
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    policy: 2D ``numpy.ndarray``
        Array that stores actions entailed by a policy over time. Shape is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.

    Returns
    -------
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``""" ;
    code:function_exe_cmd "pymdp.control.get_expected_states()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L470" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_B_get_expected_states,
        code:Parameter_policy_get_expected_states,
        code:Parameter_qs_get_expected_states ;
    code:isDocumented true ;
    code:name "get_expected_states" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_expected_states_interactions____pymdp_control_py__get_expected_states_interactions a code:Function ;
    code:comments "initialise posterior predictive density as a list of beliefs over time, including current posterior beliefs about hidden states as the first element, get expected states over time, list of the hidden state factor indices that the dynamics of `qs[control_factor]` depend on" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute the expected states under a policy, also known as the posterior predictive density over states

    Parameters
    ----------
    qs: ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at a given timepoint.
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    B_factor_list: ``list`` of ``list`` of ``int``
        List of lists of hidden state factors each hidden state factor depends on. Each element ``B_factor_list[i]`` is a list of the factor indices that factor i's dynamics depend on.
    policy: 2D ``numpy.ndarray``
        Array that stores actions entailed by a policy over time. Shape is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.

    Returns
    -------
    qs_pi: ``list`` of ``numpy.ndarray`` of dtype object
        Predictive posterior beliefs over hidden states expected under the policy, where ``qs_pi[t]`` stores the beliefs about
        hidden states expected under the policy at time ``t``""" ;
    code:function_exe_cmd "pymdp.control.get_expected_states_interactions()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L505" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_B_factor_list_get_expected_states_interactions,
        code:Parameter_B_get_expected_states_interactions,
        code:Parameter_policy_get_expected_states_interactions,
        code:Parameter_qs_get_expected_states_interactions ;
    code:isDocumented true ;
    code:name "get_expected_states_interactions" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_future_qs____pymdp_agent_py__get_future_qs a code:Function ;
    code:comments "this grabs only the last `policy_len`+1 beliefs about hidden states, under each policy" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Returns the last ``self.policy_len`` timesteps of each policy-conditioned belief
        over hidden states. This is a step of pre-processing that needs to be done before computing
        the expected free energy of policies. We do this to avoid computing the expected free energy of 
        policies using beliefs about hidden states in the past (so-called "post-dictive" beliefs).

        Returns
        ---------
        future_qs_seq: ``numpy.ndarray`` of dtype object
            Posterior beliefs over hidden states under a policy, in the future. This is a nested ``numpy.ndarray`` object array, with one
            sub-array ``future_qs_seq[p_idx]`` for each policy. The indexing structure is policy->timepoint-->factor, so that 
            ``future_qs_seq[p_idx][t_idx][f_idx]`` refers to beliefs about marginal factor ``f_idx`` expected under policy ``p_idx`` 
            at future timepoint ``t_idx``, relative to the current timestep.""" ;
    code:function_exe_cmd "pymdp.agent.Agent.get_future_qs()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L455" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_self_get_future_qs ;
    code:isDocumented true ;
    code:name "get_future_qs" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_joint_likelihood____pymdp_maths_py__get_joint_likelihood a code:Function ;
    code:comments "deal with single modality case" ;
    code:complexity "Complexity: 3" ;
    code:dependsOn code:Function_pymdp_maths_dot_likelihood\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.maths.get_joint_likelihood()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L255" ;
    code:hasInput code:Parameter_A_get_joint_likelihood,
        code:Parameter_num_states_get_joint_likelihood,
        code:Parameter_obs_get_joint_likelihood ;
    code:isDocumented false ;
    code:name "get_joint_likelihood" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_joint_likelihood_seq____pymdp_maths_py__get_joint_likelihood_seq a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_maths_get_joint_likelihood\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.maths.get_joint_likelihood_seq()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L267" ;
    code:hasInput code:Parameter_A_get_joint_likelihood_seq,
        code:Parameter_num_states_get_joint_likelihood_seq,
        code:Parameter_obs_get_joint_likelihood_seq ;
    code:isDocumented false ;
    code:name "get_joint_likelihood_seq" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_joint_likelihood_seq_by_modality____pymdp_maths_py__get_joint_likelihood_seq_by_modality a code:Function ;
    code:complexity "Complexity: 3" ;
    code:dependsOn code:Function_pymdp_maths_dot_likelihood\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Returns joint likelihoods for each modality separately" ;
    code:function_exe_cmd "pymdp.maths.get_joint_likelihood_seq_by_modality()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L273" ;
    code:hasInput code:Parameter_A_get_joint_likelihood_seq_by_modality,
        code:Parameter_num_states_get_joint_likelihood_seq_by_modality,
        code:Parameter_obs_get_joint_likelihood_seq_by_modality ;
    code:isDocumented true ;
    code:name "get_joint_likelihood_seq_by_modality" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_likelihood_dist____pymdp_envs_env_py__get_likelihood_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.env.Env.get_likelihood_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/env.py#L61" ;
    code:hasInput code:Parameter_self_get_likelihood_dist ;
    code:isDocumented false ;
    code:name "get_likelihood_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_likelihood_dist____pymdp_envs_tmaze_py__get_likelihood_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnvNullOutcome.get_likelihood_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L252" ;
    code:hasInput code:Parameter_self_get_likelihood_dist ;
    code:isDocumented false ;
    code:name "get_likelihood_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_likelihood_single_modality____pymdp_jax_maths_py__get_likelihood_single_modality a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Return observation likelihood for a single observation modality m" ;
    code:function_exe_cmd "pymdp.jax.maths.get_likelihood_single_modality()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L64" ;
    code:hasInput code:Parameter_A_m_get_likelihood_single_modality,
        code:Parameter_distr_obs_get_likelihood_single_modality,
        code:Parameter_o_m_get_likelihood_single_modality ;
    code:isDocumented true ;
    code:name "get_likelihood_single_modality" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_marginals____pymdp_jax_control_py__get_marginals a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Computes the marginal posterior(s) over actions by integrating their posterior probability under the policies that they appear within.

    Parameters
    ----------
    q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy as a 2D array in ``policies[p_idx]``. Shape of ``policies[p_idx]`` 
        is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    num_controls: ``list`` of ``int``
        ``list`` of the dimensionalities of each control state factor.

    Returns
    ----------
    action_marginals: ``list`` of ``jax.numpy.ndarrays``
       List of arrays corresponding to marginal probability of each action possible action""" ;
    code:function_exe_cmd "pymdp.jax.control.get_marginals()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L20" ;
    code:hasImport code:Function_from_jax_import_jax_jit,
        code:Function_from_jax_import_jax_lax,
        code:Function_from_jax_import_jax_nn,
        code:Function_from_jax_import_jax_random_as_jr,
        code:Function_from_jax_import_jax_vmap,
        code:Function_from_jax_scipy_special_import_jax_scipy_special_xlogy,
        code:Function_from_jaxtyping_import_jaxtyping_Array,
        <https://github.com/infer-actively/pymdpFunction_from_pymdp_jax_maths_import_pymdp_jax_maths_*>,
        code:Function_import_jax_numpy_as_jnp,
        code:Function_import_jax_tree_util_as_jtu ;
    code:hasInput code:Parameter_num_controls_get_marginals,
        code:Parameter_policies_get_marginals,
        code:Parameter_q_pi_get_marginals ;
    code:isDocumented true ;
    code:name "get_marginals" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_mmp_messages____pymdp_jax_algos_py__get_mmp_messages a code:Function ;
    code:comments "append log_prior as a first message, mutliply with 1/2 all but the last msg" ;
    code:complexity "Complexity: 7" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.algos.get_mmp_messages()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L275" ;
    code:hasInput code:Parameter_B_deps_get_mmp_messages,
        code:Parameter_B_get_mmp_messages,
        code:Parameter_ln_B_get_mmp_messages,
        code:Parameter_ln_prior_get_mmp_messages,
        code:Parameter_qs_get_mmp_messages ;
    code:isDocumented false ;
    code:name "get_mmp_messages" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_model_dimensions____pymdp_utils_py__get_model_dimensions a code:Function ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.get_model_dimensions()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L203" ;
    code:hasInput code:Parameter_A_get_model_dimensions,
        code:Parameter_B_get_model_dimensions,
        code:Parameter_factorized_get_model_dimensions ;
    code:isDocumented false ;
    code:name "get_model_dimensions" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_model_dimensions_from_labels____pymdp_utils_py__get_model_dimensions_from_labels a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.get_model_dimensions_from_labels()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L233" ;
    code:hasInput code:Parameter_model_labels_get_model_dimensions_from_labels ;
    code:isDocumented false ;
    code:name "get_model_dimensions_from_labels" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_num_controls_from_policies____pymdp_control_py__get_num_controls_from_policies a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Calculates the ``list`` of dimensionalities of control factors (``num_controls``)
    from the ``list`` or array of policies. This assumes a policy space such that for each control factor, there is at least
    one policy that entails taking the action with the maximum index along that control factor.

    Parameters
    ----------
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy as a 2D array in ``policies[p_idx]``. Shape of ``policies[p_idx]`` 
        is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.

    Returns
    ----------
    num_controls: ``list`` of ``int``
        ``list`` of the dimensionalities of each control state factor, computed here automatically from a ``list`` of policies.""" ;
    code:function_exe_cmd "pymdp.control.get_num_controls_from_policies()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L995" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_policies_get_num_controls_from_policies ;
    code:isDocumented true ;
    code:name "get_num_controls_from_policies" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_rand_likelihood_dist____pymdp_envs_env_py__get_rand_likelihood_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.env.Env.get_rand_likelihood_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/env.py#L76" ;
    code:hasInput code:Parameter_self_get_rand_likelihood_dist ;
    code:isDocumented false ;
    code:name "get_rand_likelihood_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_rand_likelihood_dist____pymdp_envs_tmaze_py__get_rand_likelihood_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnv.get_rand_likelihood_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L92" ;
    code:hasInput code:Parameter_self_get_rand_likelihood_dist ;
    code:isDocumented false ;
    code:name "get_rand_likelihood_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_rand_transition_dist____pymdp_envs_env_py__get_rand_transition_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.env.Env.get_rand_transition_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/env.py#L81" ;
    code:hasInput code:Parameter_self_get_rand_transition_dist ;
    code:isDocumented false ;
    code:name "get_rand_transition_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_rand_transition_dist____pymdp_envs_tmaze_py__get_rand_transition_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnv.get_rand_transition_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L95" ;
    code:hasInput code:Parameter_self_get_rand_transition_dist ;
    code:isDocumented false ;
    code:name "get_rand_transition_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_transition_dist____pymdp_envs_env_py__get_transition_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.env.Env.get_transition_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/env.py#L66" ;
    code:hasInput code:Parameter_self_get_transition_dist ;
    code:isDocumented false ;
    code:name "get_transition_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_transition_dist____pymdp_envs_tmaze_py__get_transition_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnvNullOutcome.get_transition_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L255" ;
    code:hasInput code:Parameter_self_get_transition_dist ;
    code:isDocumented false ;
    code:name "get_transition_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_uniform_posterior____pymdp_envs_env_py__get_uniform_posterior a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.env.Env.get_uniform_posterior()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/env.py#L71" ;
    code:hasInput code:Parameter_self_get_uniform_posterior ;
    code:isDocumented false ;
    code:name "get_uniform_posterior" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_get_vmp_messages____pymdp_jax_algos_py__get_vmp_messages a code:Function ;
    code:comments "function that effectively \"slices\" a list with a set of indices `f_idx`, make a list of lists, where each list contains all dependencies of a factor except itself, make list of integers, where each integer is the position of the self-factor in its dependencies list, this is a list of matrices, where each matrix is the marginal transition tensor for factor f, shape = (T, states_f_{t+1}, states_f_{t}), ln_b has shape (num_states, num_states) qs[:-1] has shape (T-1, num_states), q_i B_ij" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.algos.get_vmp_messages()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L212" ;
    code:hasInput code:Parameter_B_dependencies_get_vmp_messages,
        code:Parameter_B_get_vmp_messages,
        code:Parameter_ln_B_get_vmp_messages,
        code:Parameter_ln_prior_get_vmp_messages,
        code:Parameter_qs_get_vmp_messages ;
    code:isDocumented false ;
    code:name "get_vmp_messages" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_infer_parameters____pymdp_jax_agent_py__infer_parameters a code:Function ;
    code:comments "if you have updated your beliefs about transitions, you need to re-compute the I matrix used for inductive inferenece" ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.agent.Agent.infer_parameters()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/agent.py#L258" ;
    code:hasInput code:Parameter_actions_infer_parameters,
        code:Parameter_beliefs_A_infer_parameters,
        code:Parameter_beliefs_B_infer_parameters,
        code:Parameter_lr_pA_infer_parameters,
        code:Parameter_lr_pB_infer_parameters,
        code:Parameter_outcomes_infer_parameters,
        code:Parameter_self_infer_parameters ;
    code:isDocumented false ;
    code:name "infer_parameters" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_infer_policies____pymdp_agent_py__infer_policies a code:Function ;
    code:complexity "Complexity: 6" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Perform policy inference by optimizing a posterior (categorical) distribution over policies.
        This distribution is computed as the softmax of ``G * gamma + lnE`` where ``G`` is the negative expected
        free energy of policies, ``gamma`` is a policy precision and ``lnE`` is the (log) prior probability of policies.
        This function returns the posterior over policies as well as the negative expected free energy of each policy.
        In this version of the function, the expected free energy of policies is computed using known factorized structure 
        in the model, which speeds up computation (particular the state information gain calculations).

        Returns
        ----------
        q_pi: 1D ``numpy.ndarray``
            Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
        G: 1D ``numpy.ndarray``
            Negative expected free energies of each policy, i.e. a vector containing one negative expected free energy per policy.""" ;
    code:function_exe_cmd "pymdp.agent.Agent.infer_policies()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L608" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_self_infer_policies ;
    code:isDocumented true ;
    code:name "infer_policies" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_infer_policies____pymdp_jax_agent_py__infer_policies a code:Function ;
    code:comments "only get the posterior belief held at the current timepoint" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Perform policy inference by optimizing a posterior (categorical) distribution over policies.
        This distribution is computed as the softmax of ``G * gamma + lnE`` where ``G`` is the negative expected
        free energy of policies, ``gamma`` is a policy precision and ``lnE`` is the (log) prior probability of policies.
        This function returns the posterior over policies as well as the negative expected free energy of each policy.

        Returns
        ----------
        q_pi: 1D ``numpy.ndarray``
            Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
        G: 1D ``numpy.ndarray``
            Negative expected free energies of each policy, i.e. a vector containing one negative expected free energy per policy.""" ;
    code:function_exe_cmd "pymdp.jax.agent.Agent.infer_policies()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/agent.py#L383" ;
    code:hasInput code:Parameter_qs_infer_policies,
        code:Parameter_self_infer_policies ;
    code:isDocumented true ;
    code:name "infer_policies" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_infer_states____pymdp_agent_py__infer_states a code:Function ;
    code:comments "variational free energy of each policy" ;
    code:complexity "Complexity: 7" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update approximate posterior over hidden states by solving variational inference problem, given an observation.

        Parameters
        ----------
        observation: ``list`` or ``tuple`` of ints
            The observation input. Each entry ``observation[m]`` stores the index of the discrete
            observation for modality ``m``.
        distr_obs: ``bool``
            Whether the observation is a distribution over possible observations, rather than a single observation.

        Returns
        ---------
        qs: ``numpy.ndarray`` of dtype object
            Posterior beliefs over hidden states. Depending on the inference algorithm chosen, the resulting ``qs`` variable will have additional sub-structure to reflect whether
            beliefs are additionally conditioned on timepoint and policy.
            For example, in case the ``self.inference_algo == 'MMP' `` indexing structure is policy->timepoint-->factor, so that 
            ``qs[p_idx][t_idx][f_idx]`` refers to beliefs about marginal factor ``f_idx`` expected under policy ``p_idx`` 
            at timepoint ``t_idx``.""" ;
    code:function_exe_cmd "pymdp.agent.Agent.infer_states()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L478" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_distr_obs_infer_states,
        code:Parameter_observation_infer_states,
        code:Parameter_self_infer_states ;
    code:isDocumented true ;
    code:name "infer_states" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_infer_states____pymdp_jax_agent_py__infer_states a code:Function ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update approximate posterior over hidden states by solving variational inference problem, given an observation.

        Parameters
        ----------
        observations: ``list`` or ``tuple`` of ints
            The observation input. Each entry ``observation[m]`` stores one-hot vectors representing the observations for modality ``m``.
        past_actions: ``list`` or ``tuple`` of ints
            The action input. Each entry ``past_actions[f]`` stores indices (or one-hots?) representing the actions for control factor ``f``.
        empirical_prior: ``list`` or ``tuple`` of ``jax.numpy.ndarray`` of dtype object
            Empirical prior beliefs over hidden states. Depending on the inference algorithm chosen, the resulting ``empirical_prior`` variable may be a matrix (or list of matrices) 
            of additional dimensions to encode extra conditioning variables like timepoint and policy.
        Returns
        ---------
        qs: ``numpy.ndarray`` of dtype object
            Posterior beliefs over hidden states. Depending on the inference algorithm chosen, the resulting ``qs`` variable will have additional sub-structure to reflect whether
            beliefs are additionally conditioned on timepoint and policy.
            For example, in case the ``self.inference_algo == 'MMP' `` indexing structure is policy->timepoint-->factor, so that 
            ``qs[p_idx][t_idx][f_idx]`` refers to beliefs about marginal factor ``f_idx`` expected under policy ``p_idx`` 
            at timepoint ``t_idx``.""" ;
    code:function_exe_cmd "pymdp.jax.agent.Agent.infer_states()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/agent.py#L317" ;
    code:hasImport code:Function_from_jax_import_jax_nn,
        code:Function_from_jax_import_jax_random,
        code:Function_from_jax_import_jax_vmap,
        code:Function_from_jaxtyping_import_jaxtyping_Array,
        code:Function_from_pymdp_jax_agent_import_control,
        code:Function_from_pymdp_jax_agent_import_inference,
        code:Function_from_pymdp_jax_agent_import_learning,
        code:Function_from_pymdp_jax_agent_import_maths,
        code:Function_from_pymdp_jax_agent_import_utils,
        code:Function_import_jax_numpy_as_jnp,
        code:Function_import_jax_tree_util_as_jtu ;
    code:hasInput code:Parameter_empirical_prior_infer_states,
        code:Parameter_observations_infer_states,
        code:Parameter_self_infer_states ;
    code:isDocumented true ;
    code:name "infer_states" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_initialize_empty_A____pymdp_utils_py__initialize_empty_A a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_utils_obj_array_zeros\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Initializes an empty observation likelihood array or `A` array using a list of observation-modality dimensions (`num_obs`)
    and hidden state factor dimensions (`num_states`)""" ;
    code:function_exe_cmd "pymdp.utils.initialize_empty_A()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L70" ;
    code:hasInput code:Parameter_num_obs_initialize_empty_A,
        code:Parameter_num_states_initialize_empty_A ;
    code:isDocumented true ;
    code:name "initialize_empty_A" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_initialize_empty_B____pymdp_utils_py__initialize_empty_B a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_utils_obj_array_zeros\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Initializes an empty (controllable) transition likelihood array or `B` array using a list of hidden state factor dimensions (`num_states`)
    and control factor dimensions (`num_controls)""" ;
    code:function_exe_cmd "pymdp.utils.initialize_empty_B()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L79" ;
    code:hasInput code:Parameter_num_controls_initialize_empty_B,
        code:Parameter_num_states_initialize_empty_B ;
    code:isDocumented true ;
    code:name "initialize_empty_B" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_insert_multiple____pymdp_utils_py__insert_multiple a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.insert_multiple()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L397" ;
    code:hasInput code:Parameter_indices_insert_multiple,
        code:Parameter_items_insert_multiple,
        code:Parameter_s_insert_multiple ;
    code:isDocumented false ;
    code:name "insert_multiple" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_is_normalized____pymdp_utils_py__is_normalized a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Utility function for checking whether a single distribution or set of conditional categorical distributions is normalized.
    Returns True if all distributions integrate to 1.0""" ;
    code:function_exe_cmd "pymdp.utils.is_normalized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L267" ;
    code:hasInput code:Parameter_dist_is_normalized ;
    code:isDocumented true ;
    code:name "is_normalized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_is_obj_array____pymdp_utils_py__is_obj_array a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.is_obj_array()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L285" ;
    code:hasInput code:Parameter_arr_is_obj_array ;
    code:isDocumented false ;
    code:name "is_obj_array" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_joint_dist_factor____pymdp_jax_inference_py__joint_dist_factor a code:Function ;
    code:comments "returns q(s_t), (q(s_t), q(s_t, s_t+1)), seq_qs will contain a sequence of smoothed marginals and joints, we add the last filtered belief to smoothed beliefs" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.inference.joint_dist_factor()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/inference.py#L64" ;
    code:hasInput code:Parameter_actions_joint_dist_factor,
        code:Parameter_b_joint_dist_factor,
        code:Parameter_filtered_qs_joint_dist_factor ;
    code:isDocumented false ;
    code:name "joint_dist_factor" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_kl_div____pymdp_maths_py__kl_div a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Parameters
    ----------
    P : Categorical probability distribution
    Q : Categorical probability distribution

    Returns
    -------
    The KL-divergence of P and Q""" ;
    code:function_exe_cmd "pymdp.maths.kl_div()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L575" ;
    code:hasInput code:Parameter_P_kl_div,
        code:Parameter_Q_kl_div ;
    code:isDocumented true ;
    code:name "kl_div" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_list_array_scaled____pymdp_jax_utils_py__list_array_scaled a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Creates a list of 1-D jax arrays filled with scale, with shapes given by shape_list[i]" ;
    code:function_exe_cmd "pymdp.jax.utils.list_array_scaled()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/utils.py#L42" ;
    code:hasImport code:Function_import_jax_numpy_as_jnp ;
    code:hasInput code:Parameter_scale_list_array_scaled,
        code:Parameter_shape_list_list_array_scaled ;
    code:hasOutput code:Parameter_output_list_array_scaled ;
    code:isDocumented true ;
    code:name "list_array_scaled" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_list_array_uniform____pymdp_jax_utils_py__list_array_uniform a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_jax_utils_norm_dist\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Creates a list of jax arrays representing uniform Categorical
    distributions with shapes given by shape_list[i]. The shapes (elements of shape_list)
    can either be tuples or lists.""" ;
    code:function_exe_cmd "pymdp.jax.utils.list_array_uniform()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/utils.py#L22" ;
    code:hasImport code:Function_import_jax_numpy_as_jnp ;
    code:hasInput code:Parameter_shape_list_list_array_uniform ;
    code:hasOutput code:Parameter_output_list_array_uniform ;
    code:isDocumented true ;
    code:name "list_array_uniform" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_list_array_zeros____pymdp_jax_utils_py__list_array_zeros a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Creates a list of 1-D jax arrays filled with zeros, with shapes given by shape_list[i]" ;
    code:function_exe_cmd "pymdp.jax.utils.list_array_zeros()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/utils.py#L33" ;
    code:hasImport code:Function_import_jax_numpy_as_jnp ;
    code:hasInput code:Parameter_shape_list_list_array_zeros ;
    code:hasOutput code:Parameter_output_list_array_zeros ;
    code:isDocumented true ;
    code:name "list_array_zeros" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_log_stable____pymdp_jax_maths_py__log_stable a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.maths.log_stable()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L20" ;
    code:hasInput code:Parameter_x_log_stable ;
    code:isDocumented false ;
    code:name "log_stable" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_marginal_log_likelihood____pymdp_jax_algos_py__marginal_log_likelihood a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.algos.marginal_log_likelihood()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L14" ;
    code:hasInput code:Parameter_i_marginal_log_likelihood,
        code:Parameter_log_likelihood_marginal_log_likelihood,
        code:Parameter_qs_marginal_log_likelihood ;
    code:isDocumented false ;
    code:name "marginal_log_likelihood" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_mirror_gradient_descent_step____pymdp_jax_algos_py__mirror_gradient_descent_step a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """u_{k+1} = u_{k} - 
abla_p F_k
    p_k = softmax(u_k)""" ;
    code:function_exe_cmd "pymdp.jax.algos.mirror_gradient_descent_step()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L95" ;
    code:hasInput code:Parameter_lnB_future_mirror_gradient_descent_step,
        code:Parameter_lnB_past_mirror_gradient_descent_step,
        code:Parameter_ln_A_mirror_gradient_descent_step,
        code:Parameter_ln_qs_mirror_gradient_descent_step,
        code:Parameter_tau_mirror_gradient_descent_step ;
    code:isDocumented true ;
    code:name "mirror_gradient_descent_step" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_mll_factors____pymdp_jax_algos_py__mll_factors a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.algos.mll_factors()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L32" ;
    code:hasInput code:Parameter_factor_list_m_mll_factors,
        code:Parameter_ll_m_mll_factors,
        code:Parameter_qs_mll_factors ;
    code:hasOutput code:Parameter_output_mll_factors ;
    code:isDocumented false ;
    code:name "mll_factors" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_multiaction_probabilities____pymdp_jax_agent_py__multiaction_probabilities a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Compute probabilities of unique multi-actions from the posterior over policies.

        Parameters
        ----------
        q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.

        Returns
        ----------
        multi-action: 1D ``jax.numpy.ndarray``
            Vector containing probabilities of possible multi-actions for different factors""" ;
    code:function_exe_cmd "pymdp.jax.agent.Agent.multiaction_probabilities()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/agent.py#L425" ;
    code:hasImport code:Function_from_jax_import_jax_nn,
        code:Function_from_jax_import_jax_random,
        code:Function_from_jax_import_jax_vmap,
        code:Function_from_jaxtyping_import_jaxtyping_Array,
        code:Function_from_pymdp_jax_agent_import_control,
        code:Function_from_pymdp_jax_agent_import_inference,
        code:Function_from_pymdp_jax_agent_import_learning,
        code:Function_from_pymdp_jax_agent_import_maths,
        code:Function_from_pymdp_jax_agent_import_utils,
        code:Function_import_jax_numpy_as_jnp,
        code:Function_import_jax_tree_util_as_jtu ;
    code:hasInput code:Parameter_q_pi_multiaction_probabilities,
        code:Parameter_self_multiaction_probabilities ;
    code:isDocumented true ;
    code:name "multiaction_probabilities" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_multidimensional_outer____pymdp_jax_maths_py__multidimensional_outer a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Compute the outer product of a list of arrays by iteratively expanding the first array and multiplying it with the next array" ;
    code:function_exe_cmd "pymdp.jax.maths.multidimensional_outer()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L123" ;
    code:hasInput code:Parameter_arrs_multidimensional_outer ;
    code:isDocumented true ;
    code:name "multidimensional_outer" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_norm_dist____pymdp_jax_utils_py__norm_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Normalizes a Categorical probability distribution" ;
    code:function_exe_cmd "pymdp.jax.utils.norm_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/utils.py#L18" ;
    code:hasInput code:Parameter_dist_norm_dist ;
    code:hasOutput code:Parameter_output_norm_dist ;
    code:isDocumented true ;
    code:name "norm_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_norm_dist____pymdp_utils_py__norm_dist a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Normalizes a Categorical probability distribution (or set of them) assuming sufficient statistics are stored in leading dimension" ;
    code:function_exe_cmd "pymdp.utils.norm_dist()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L254" ;
    code:hasInput code:Parameter_dist_norm_dist ;
    code:isDocumented true ;
    code:name "norm_dist" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_norm_dist_obj_arr____pymdp_utils_py__norm_dist_obj_arr a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_norm_dist\(\),
        code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Normalizes a multi-factor or -modality collection of Categorical probability distributions, assuming sufficient statistics of each conditional distribution
    are stored in the leading dimension""" ;
    code:function_exe_cmd "pymdp.utils.norm_dist_obj_arr()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L258" ;
    code:hasInput code:Parameter_obj_arr_norm_dist_obj_arr ;
    code:isDocumented true ;
    code:name "norm_dist_obj_arr" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_obj_array____pymdp_utils_py__obj_array a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Creates a generic object array with the desired number of sub-arrays, given by `num_arr`" ;
    code:function_exe_cmd "pymdp.utils.obj_array()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L54" ;
    code:hasInput code:Parameter_num_arr_obj_array ;
    code:isDocumented true ;
    code:name "obj_array" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_obj_array_from_list____pymdp_utils_py__obj_array_from_list a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Takes a list of `numpy.ndarray` and converts them to a `numpy.ndarray` of `dtype = object`" ;
    code:function_exe_cmd "pymdp.utils.obj_array_from_list()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L295" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_list_input_obj_array_from_list ;
    code:isDocumented true ;
    code:name "obj_array_from_list" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_obj_array_ones____pymdp_utils_py__obj_array_ones a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.obj_array_ones()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L99" ;
    code:hasInput code:Parameter_scale_obj_array_ones,
        code:Parameter_shape_list_obj_array_ones ;
    code:isDocumented false ;
    code:name "obj_array_ones" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_obj_array_uniform____pymdp_utils_py__obj_array_uniform a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Creates a numpy object array whose sub-arrays are uniform Categorical
    distributions with shapes given by shape_list[i]. The shapes (elements of shape_list)
    can either be tuples or lists.""" ;
    code:function_exe_cmd "pymdp.utils.obj_array_uniform()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L88" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_shape_list_obj_array_uniform ;
    code:isDocumented true ;
    code:name "obj_array_uniform" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_obj_array_zeros____pymdp_utils_py__obj_array_zeros a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Creates a numpy object array whose sub-arrays are 1-D vectors
    filled with zeros, with shapes given by shape_list[i]""" ;
    code:function_exe_cmd "pymdp.utils.obj_array_zeros()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L60" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_shape_list_obj_array_zeros ;
    code:isDocumented true ;
    code:name "obj_array_zeros" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_onehot____pymdp_utils_py__onehot a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.onehot()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L106" ;
    code:hasInput code:Parameter_num_values_onehot,
        code:Parameter_value_onehot ;
    code:isDocumented false ;
    code:name "onehot" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_plot_beliefs____pymdp_utils_py__plot_beliefs a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Utility function that plots a bar chart of a categorical probability distribution,
    with each bar height corresponding to the probability of one of the elements of the categorical
    probability vector.""" ;
    code:function_exe_cmd "pymdp.utils.plot_beliefs()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L549" ;
    code:hasInput code:Parameter_belief_dist_plot_beliefs,
        code:Parameter_title_plot_beliefs ;
    code:isDocumented true ;
    code:name "plot_beliefs" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_plot_likelihood____pymdp_utils_py__plot_likelihood a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Utility function that shows a heatmap of a 2-D likelihood (hidden causes in the columns, observations in the rows),
    with hotter colors indicating higher probability.""" ;
    code:function_exe_cmd "pymdp.utils.plot_likelihood()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L562" ;
    code:hasInput code:Parameter_A_plot_likelihood,
        code:Parameter_title_plot_likelihood ;
    code:isDocumented true ;
    code:name "plot_likelihood" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_process_observation____pymdp_utils_py__process_observation a code:Function ;
    code:complexity "Complexity: 9" ;
    code:dependsOn code:Function_pymdp_utils_is_obj_array\(\),
        code:Function_pymdp_utils_obj_array\(\),
        code:Function_pymdp_utils_onehot\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Helper function for formatting observations    
    USAGE NOTES:
    - If `obs` is a 1D numpy array, it must be a one-hot vector, where one entry (the entry of the observation) is 1.0 
    and all other entries are 0. This therefore assumes it's a single modality observation. If these conditions are met, then
    this function will return `obs` unchanged. Otherwise, it'll throw an error.
    - If `obs` is an int, it assumes this is a single modality observation, whose observation index is given by the value of `obs`. This function will convert
    it to be a one hot vector.
    - If `obs` is a list, it assumes this is a multiple modality observation, whose len is equal to the number of observation modalities,
    and where each entry `obs[m]` is the index of the observation, for that modality. This function will convert it into an object array
    of one-hot vectors.
    - If `obs` is a tuple, same logic as applies for list (see above).
    - if `obs` is a numpy object array (array of arrays), this function will return `obs` unchanged.""" ;
    code:function_exe_cmd "pymdp.utils.process_observation()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L318" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_num_modalities_process_observation,
        code:Parameter_num_observations_process_observation,
        code:Parameter_obs_process_observation ;
    code:isDocumented true ;
    code:name "process_observation" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_process_observation_seq____pymdp_utils_py__process_observation_seq a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Helper function for formatting observations    

        Observations can either be `int` (converted to one-hot)
        or `tuple` (obs for each modality), or `list` (obs for each modality)
        If list, the entries could be object arrays of one-hots, in which
        case this function returns `obs_seq` as is.""" ;
    code:function_exe_cmd "pymdp.utils.process_observation_seq()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L304" ;
    code:hasInput code:Parameter_n_modalities_process_observation_seq,
        code:Parameter_n_observations_process_observation_seq,
        code:Parameter_obs_seq_process_observation_seq ;
    code:isDocumented true ;
    code:name "process_observation_seq" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_random_A_matrix____pymdp_utils_py__random_A_matrix a code:Function ;
    code:comments "lagging_dimensions = [ns for i, ns in enumerate(num_states) if i in A_factor_list[modality]] # enforces sortedness of A_factor_list" ;
    code:complexity "Complexity: 5" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.random_A_matrix()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L111" ;
    code:hasInput code:Parameter_A_factor_list_random_A_matrix,
        code:Parameter_num_obs_random_A_matrix,
        code:Parameter_num_states_random_A_matrix ;
    code:isDocumented false ;
    code:name "random_A_matrix" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_random_B_matrix____pymdp_utils_py__random_B_matrix a code:Function ;
    code:comments "factor_shape = (num_states[factor], num_states[factor], num_controls[factor])" ;
    code:complexity "Complexity: 5" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.random_B_matrix()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L131" ;
    code:hasInput code:Parameter_B_factor_list_random_B_matrix,
        code:Parameter_num_controls_random_B_matrix,
        code:Parameter_num_states_random_B_matrix ;
    code:isDocumented false ;
    code:name "random_B_matrix" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_random_single_categorical____pymdp_utils_py__random_single_categorical a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Creates a random 1-D categorical distribution (or set of 1-D categoricals, e.g. multiple marginals of different factors) and returns them in an object array" ;
    code:function_exe_cmd "pymdp.utils.random_single_categorical()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L151" ;
    code:hasInput code:Parameter_shape_list_random_single_categorical ;
    code:isDocumented true ;
    code:name "random_single_categorical" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_reduce_a_matrix____pymdp_utils_py__reduce_a_matrix a code:Function ;
    code:comments "the indices of the hidden state factors that are independent of the observation and thus marginalized away, this means they're not independent" ;
    code:complexity "Complexity: 7" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Utility function for throwing away dimensions (lagging dimensions, hidden state factors)
    of a particular A matrix that are independent of the observation. 
    Parameters:
    ==========
    - `A` [np.ndarray]:
        The A matrix or likelihood array that encodes probabilistic relationship
        of the generative model between hidden state factors (lagging dimensions, columns, slices, etc...)
        and observations (leading dimension, rows). 
    Returns:
    =========
    - `A_reduced` [np.ndarray]:
        The reduced A matrix, missing the lagging dimensions that correspond to hidden state factors
        that are statistically independent of observations
    - `original_factor_idx` [list]:
        List of the indices (in terms of the original dimensionality) of the hidden state factors
        that are maintained in the A matrix (and thus have an informative / non-degenerate relationship to observations""" ;
    code:function_exe_cmd "pymdp.utils.reduce_a_matrix()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L402" ;
    code:hasInput code:Parameter_A_reduce_a_matrix ;
    code:isDocumented true ;
    code:name "reduce_a_matrix" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_render____pymdp_envs_env_py__render a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Rendering function, that typically creates a visual representation of the state of the environment at the current timestep." ;
    code:function_exe_cmd "pymdp.envs.env.Env.render()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/env.py#L52" ;
    code:hasInput code:Parameter_self_render ;
    code:isDocumented true ;
    code:name "render" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_render____pymdp_envs_tmaze_py__render a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnv.render()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L79" ;
    code:hasInput code:Parameter_self_render ;
    code:isDocumented false ;
    code:name "render" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_reset____pymdp_agent_py__reset a code:Function ;
    code:comments "in the case you're doing MMP (i.e. you have an inference_horizon > 1), we have to account for policy- and timestep-conditioned posterior beliefs, + 1 to include belief about current timestep" ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Resets the posterior beliefs about hidden states of the agent to a uniform distribution, and resets time to first timestep of the simulation's temporal horizon.
        Returns the posterior beliefs about hidden states.

        Returns
        ---------
        qs: ``numpy.ndarray`` of dtype object
           Initialized posterior over hidden states. Depending on the inference algorithm chosen and other parameters (such as the parameters stored within ``edge_handling_paramss),
           the resulting ``qs`` variable will have additional sub-structure to reflect whether beliefs are additionally conditioned on timepoint and policy.
            For example, in case the ``self.inference_algo == 'MMP' `, the indexing structure of ``qs`` is policy->timepoint-->factor, so that 
            ``qs[p_idx][t_idx][f_idx]`` refers to beliefs about marginal factor ``f_idx`` expected under policy ``p_idx`` 
            at timepoint ``t_idx``. In this case, the returned ``qs`` will only have entries filled out for the first timestep, i.e. for ``q[p_idx][0]``, for all 
            policy-indices ``p_idx``. Subsequent entries ``q[:][1, 2, ...]`` will be initialized to empty ``numpy.ndarray`` objects.""" ;
    code:function_exe_cmd "pymdp.agent.Agent.reset()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L349" ;
    code:hasImport code:Function_import_copy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_init_qs_reset,
        code:Parameter_self_reset ;
    code:isDocumented true ;
    code:name "reset" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_reset____pymdp_envs_env_py__reset a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Resets the initial state of the environment. Depending on case, it may be common to return an initial observation as well." ;
    code:function_exe_cmd "pymdp.envs.env.Env.reset()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/env.py#L30" ;
    code:hasInput code:Parameter_self_reset,
        code:Parameter_state_reset ;
    code:isDocumented true ;
    code:name "reset" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_reset____pymdp_envs_tmaze_py__reset a code:Function ;
    code:comments "randomly select a reward condition" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnvNullOutcome.reset()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L225" ;
    code:hasInput code:Parameter_self_reset,
        code:Parameter_state_reset ;
    code:isDocumented false ;
    code:name "reset" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_reset____pymdp_jax_task_py__reset a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.task.PyMDPEnv.reset()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/task.py#L41" ;
    code:hasInput code:Parameter_key_reset,
        code:Parameter_self_reset ;
    code:isDocumented false ;
    code:name "reset" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_reward_condition____pymdp_envs_tmaze_py__reward_condition a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnvNullOutcome.reward_condition()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L344" ;
    code:hasInput code:Parameter_self_reward_condition ;
    code:isDocumented false ;
    code:name "reward_condition" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_run_factorized_fpi____pymdp_jax_algos_py__run_factorized_fpi a code:Function ;
    code:comments "Step 1: Compute log likelihoods for each factor, Step 2: Map prior to log space and create initial log-posterior, Step 3: Iterate until convergence, Step 4: Map result to factorised posterior" ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_algos_all_marginal_log_likelihood\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Run the fixed point iteration algorithm with sparse dependencies between factors and outcomes (stored in `A_dependencies`)" ;
    code:function_exe_cmd "pymdp.jax.algos.run_factorized_fpi()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L68" ;
    code:hasInput code:Parameter_A_dependencies_run_factorized_fpi,
        code:Parameter_A_run_factorized_fpi,
        code:Parameter_num_iter_run_factorized_fpi,
        code:Parameter_obs_run_factorized_fpi,
        code:Parameter_prior_run_factorized_fpi ;
    code:isDocumented true ;
    code:name "run_factorized_fpi" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_run_mmp____pymdp_algos_mmp_py__run_mmp a code:Function ;
    code:comments "window, dimensions, beliefs, last message, prior, transposed transition, reset variational free energy (accumulated over time and factors, but reset per iteration), likelihood, past message, future message, inference, save this as a separate variable so that it can be used in VFE computation, for numerical stability, before passing into the softmax, @NOTE: not sure why Karl does this in SPM_MDP_VB_X, we should look into this" ;
    code:complexity "Complexity: 18" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Marginal message passing scheme for updating marginal posterior beliefs about hidden states over time, 
    conditioned on a particular policy.

    Parameters
    ----------
    lh_seq: ``numpy.ndarray`` of dtype object
        Log likelihoods of hidden states under a sequence of observations over time. This is assumed to already be log-transformed. Each ``lh_seq[t]`` contains
        the log likelihood of hidden states for a particular observation at time ``t``
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    policy: 2D ``numpy.ndarray``
        Matrix of shape ``(policy_len, num_control_factors)`` that indicates the indices of each action (control state index) upon timestep ``t`` and control_factor ``f` in the element ``policy[t,f]`` for a given policy.
    prev_actions: ``numpy.ndarray``, default None
        If provided, should be a matrix of previous actions of shape ``(infer_len, num_control_factors)`` that indicates the indices of each action (control state index) taken in the past (up until the current timestep).
    prior: ``numpy.ndarray`` of dtype object, default None
        If provided, the prior beliefs about initial states (at t = 0, relative to ``infer_len``). If ``None``, this defaults
        to a flat (uninformative) prior over hidden states.
    numiter: int, default 10
        Number of variational iterations.
    grad_descent: Bool, default True
        Flag for whether to use gradient descent (free energy gradient updates) instead of fixed point solution to the posterior beliefs
    tau: float, default 0.25
        Decay constant for use in ``grad_descent`` version. Tunes the size of the gradient descent updates to the posterior.
    last_timestep: Bool, default False
        Flag for whether we are at the last timestep of belief updating

    Returns
    ---------
    qs_seq: ``numpy.ndarray`` of dtype object
        Posterior beliefs over hidden states under the policy. Nesting structure is timepoints, factors,
        where e.g. ``qs_seq[t][f]`` stores the marginal belief about factor ``f`` at timepoint ``t`` under the policy in question.
    F: float
        Variational free energy of the policy.""" ;
    code:function_exe_cmd "pymdp.algos.mmp.run_mmp()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/algos/mmp.py#L10" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_B_run_mmp,
        code:Parameter_grad_descent_run_mmp,
        code:Parameter_last_timestep_run_mmp,
        code:Parameter_lh_seq_run_mmp,
        code:Parameter_num_iter_run_mmp,
        code:Parameter_policy_run_mmp,
        code:Parameter_prev_actions_run_mmp,
        code:Parameter_prior_run_mmp,
        code:Parameter_tau_run_mmp ;
    code:isDocumented true ;
    code:name "run_mmp" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_run_mmp____pymdp_jax_algos_py__run_mmp a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_algos_update_marginals\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.algos.run_mmp()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L331" ;
    code:hasInput code:Parameter_A_dependencies_run_mmp,
        code:Parameter_A_run_mmp,
        code:Parameter_B_dependencies_run_mmp,
        code:Parameter_B_run_mmp,
        code:Parameter_num_iter_run_mmp,
        code:Parameter_obs_run_mmp,
        code:Parameter_prior_run_mmp,
        code:Parameter_tau_run_mmp ;
    code:isDocumented false ;
    code:name "run_mmp" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_run_mmp_factorized____pymdp_algos_mmp_py__run_mmp_factorized a code:Function ;
    code:comments "window, dimensions, beliefs, last message, prior, transposed transition, add up all the log-likelihoods after reshaping them to the global common dimensions of all hidden state factors, compute inverse B dependencies, which is a list that for each hidden state factor, lists the indices of the other hidden state factors that it 'drives' or is a parent of in the HMM graphical model, reset variational free energy (accumulated over time and factors, but reset per iteration), likelihood, past message, future message, list of future_msgs, one for each of the factors that factor f is driving, list of the marginalized B matrices, that correspond to mapping between the factor of interest `f` and each of its children factors `i`, loop over all the hidden state factors that are driven by f, loop over the list of factors that drive each child `i` of factor-of-interest `f` (i.e. the co-parents of `f`, with respect to child `i`), marginalize out all parents of `i` besides `f`, inference, save this as a separate variable so that it can be used in VFE computation, @NOTE: not sure why Karl does this in SPM_MDP_VB_X, we should look into this" ;
    code:complexity "Complexity: 26" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Marginal message passing scheme for updating marginal posterior beliefs about hidden states over time, 
    conditioned on a particular policy.

    Parameters
    ----------
    lh_seq: ``numpy.ndarray`` of dtype object
        Log likelihoods of hidden states under a sequence of observations over time. This is assumed to already be log-transformed. Each ``lh_seq[t]`` contains
        the log likelihood of hidden states for a particular observation at time ``t``
    mb_dict: ``Dict``
        Dictionary with two keys (``A_factor_list`` and ``A_modality_list``), that stores the factor indices that influence each modality (``A_factor_list``)
        and the modality indices influenced by each factor (``A_modality_list``).
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    B_factor_list: ``list`` of ``list`` of ``int``
        List of lists of hidden state factors each hidden state factor depends on. Each element ``B_factor_list[i]`` is a list of the factor indices that factor i's dynamics depend on.
    policy: 2D ``numpy.ndarray``
        Matrix of shape ``(policy_len, num_control_factors)`` that indicates the indices of each action (control state index) upon timestep ``t`` and control_factor ``f` in the element ``policy[t,f]`` for a given policy.
    prev_actions: ``numpy.ndarray``, default None
        If provided, should be a matrix of previous actions of shape ``(infer_len, num_control_factors)`` that indicates the indices of each action (control state index) taken in the past (up until the current timestep).
    prior: ``numpy.ndarray`` of dtype object, default None
        If provided, the prior beliefs about initial states (at t = 0, relative to ``infer_len``). If ``None``, this defaults
        to a flat (uninformative) prior over hidden states.
    numiter: int, default 10
        Number of variational iterations.
    grad_descent: Bool, default True
        Flag for whether to use gradient descent (free energy gradient updates) instead of fixed point solution to the posterior beliefs
    tau: float, default 0.25
        Decay constant for use in ``grad_descent`` version. Tunes the size of the gradient descent updates to the posterior.
    last_timestep: Bool, default False
        Flag for whether we are at the last timestep of belief updating

    Returns
    ---------
    qs_seq: ``numpy.ndarray`` of dtype object
        Posterior beliefs over hidden states under the policy. Nesting structure is timepoints, factors,
        where e.g. ``qs_seq[t][f]`` stores the marginal belief about factor ``f`` at timepoint ``t`` under the policy in question.
    F: float
        Variational free energy of the policy.""" ;
    code:function_exe_cmd "pymdp.algos.mmp.run_mmp_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/algos/mmp.py#L134" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_B_factor_list_run_mmp_factorized,
        code:Parameter_B_run_mmp_factorized,
        code:Parameter_grad_descent_run_mmp_factorized,
        code:Parameter_last_timestep_run_mmp_factorized,
        code:Parameter_lh_seq_run_mmp_factorized,
        code:Parameter_mb_dict_run_mmp_factorized,
        code:Parameter_num_iter_run_mmp_factorized,
        code:Parameter_policy_run_mmp_factorized,
        code:Parameter_prev_actions_run_mmp_factorized,
        code:Parameter_prior_run_mmp_factorized,
        code:Parameter_tau_run_mmp_factorized ;
    code:isDocumented true ;
    code:name "run_mmp_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_run_online_filtering____pymdp_jax_algos_py__run_online_filtering a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_algos_update_marginals\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Runs online filtering (HAVE TO REPLACE WITH OVF CODE)" ;
    code:function_exe_cmd "pymdp.jax.algos.run_online_filtering()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L345" ;
    code:hasInput code:Parameter_A_dependencies_run_online_filtering,
        code:Parameter_A_run_online_filtering,
        code:Parameter_B_run_online_filtering,
        code:Parameter_num_iter_run_online_filtering,
        code:Parameter_obs_run_online_filtering,
        code:Parameter_prior_run_online_filtering,
        code:Parameter_tau_run_online_filtering ;
    code:isDocumented true ;
    code:name "run_online_filtering" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_run_vanilla_fpi____pymdp_algos_fpi_py__run_vanilla_fpi a code:Function ;
    code:comments "get model dimensions, log the prior, change stop condition for fixed point iterations based on whether we are computing the variational free energy or not, Initialise variational free energy, arg_list = [likelihood, list(range(n_factors))], arg_list = arg_list + list(chain(*([qs_i,[i]] for i, qs_i in enumerate(qs)))) + [list(range(n_factors))], LL_tensor = np.einsum(*arg_list), qL = np.einsum(LL_tensor, list(range(n_factors)), 1.0/qs_i, [factor], [factor]), print(f'Posteriors at iteration {curr_iter}:\\n'), print(qs[0]), print(qs[1]), List of orders in which marginal posteriors are sequentially multiplied into the joint likelihood:, First order loops over factors starting at index = 0, second order goes in reverse, factor_orders = [range(n_factors), range((n_factors - 1), -1, -1)], iteratively marginalize out each posterior marginal from the joint log-likelihood, except for the one associated with a given factor, for factor_order in factor_orders:, for factor in factor_order:, qL = spm_dot(likelihood, qs, [factor]), qs[factor] = softmax(qL + prior[factor]), calculate new free energy, print(f'VFE at iteration {curr_iter}: {vfe}\\n'), stopping condition - time derivative of free energy" ;
    code:complexity "Complexity: 10" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update marginal posterior beliefs over hidden states using mean-field variational inference, via
    fixed point iteration. 

    Parameters
    ----------
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``np.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    obs: numpy 1D array or numpy ndarray of dtype object
        The observation (generated by the environment). If single modality, this should be a 1D ``np.ndarray``
        (one-hot vector representation). If multi-modality, this should be ``np.ndarray`` of dtype object whose entries are 1D one-hot vectors.
    num_obs: list of ints
        List of dimensionalities of each observation modality
    num_states: list of ints
        List of dimensionalities of each hidden state factor
    prior: numpy ndarray of dtype object, default None
        Prior over hidden states. If absent, prior is set to be the log uniform distribution over hidden states (identical to the 
        initialisation of the posterior)
    num_iter: int, default 10
        Number of variational fixed-point iterations to run until convergence.
    dF: float, default 1.0
        Initial free energy gradient (dF/dt) before updating in the course of gradient descent.
    dF_tol: float, default 0.001
        Threshold value of the time derivative of the variational free energy (dF/dt), to be checked at 
        each iteration. If dF <= dF_tol, the iterations are halted pre-emptively and the final 
        marginal posterior belief(s) is(are) returned
    compute_vfe: bool, default True
        Whether to compute the variational free energy at each iteration. If False, the function runs through 
        all variational iterations.

    Returns
    ----------
    qs: numpy 1D array, numpy ndarray of dtype object, optional
        Marginal posterior beliefs over hidden states at current timepoint""" ;
    code:function_exe_cmd "pymdp.algos.fpi.run_vanilla_fpi()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/algos/fpi.py#L11" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_run_vanilla_fpi,
        code:Parameter_compute_vfe_run_vanilla_fpi,
        code:Parameter_dF_run_vanilla_fpi,
        code:Parameter_dF_tol_run_vanilla_fpi,
        code:Parameter_num_iter_run_vanilla_fpi,
        code:Parameter_num_obs_run_vanilla_fpi,
        code:Parameter_num_states_run_vanilla_fpi,
        code:Parameter_obs_run_vanilla_fpi,
        code:Parameter_prior_run_vanilla_fpi ;
    code:isDocumented true ;
    code:name "run_vanilla_fpi" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_run_vanilla_fpi____pymdp_jax_algos_py__run_vanilla_fpi a code:Function ;
    code:comments "Step 1: Compute log likelihoods for each factor, log_likelihoods = [ll] * nf, Step 2: Map prior to log space and create initial log-posterior, Step 3: Iterate until convergence, Step 4: Map result to factorised posterior" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Vanilla fixed point iteration (jaxified)" ;
    code:function_exe_cmd "pymdp.jax.algos.run_vanilla_fpi()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L39" ;
    code:hasImport code:Function_from_jax_import_jax_grad,
        code:Function_from_jax_import_jax_jit,
        code:Function_from_jax_import_jax_lax,
        code:Function_from_jax_import_jax_nn,
        code:Function_from_jax_import_jax_vmap,
        code:Function_import_jax_numpy_as_jnp,
        code:Function_import_jax_tree_util_as_jtu ;
    code:hasInput code:Parameter_A_run_vanilla_fpi,
        code:Parameter_distr_obs_run_vanilla_fpi,
        code:Parameter_num_iter_run_vanilla_fpi,
        code:Parameter_obs_run_vanilla_fpi,
        code:Parameter_prior_run_vanilla_fpi ;
    code:isDocumented true ;
    code:name "run_vanilla_fpi" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_run_vanilla_fpi_factorized____pymdp_algos_fpi_py__run_vanilla_fpi_factorized a code:Function ;
    code:comments "get model dimensions, log the prior, add up all the log-likelihoods, since we know they will all have the same dimension in the case of a single hidden state factor, add up all the log-likelihoods after reshaping them to the global common dimensions of all hidden state factors, change stop condition for fixed point iterations based on whether we are computing the variational free energy or not, vfe = 0, vfe -= qL.sum() # accuracy part of vfe, sum of factor-level expected energies E_q(s_i/f)[ln P(o=obs|s)], print(f'Posteriors at iteration {curr_iter}:\\n'), print(qs[0]), print(qs[1]), calculate new free energy, leaving out the accuracy term, vfe += calc_free_energy(qs, prior, n_factors), print(f'VFE at iteration {curr_iter}: {vfe}\\n'), stopping condition - time derivative of free energy" ;
    code:complexity "Complexity: 14" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update marginal posterior beliefs over hidden states using mean-field variational inference, via
    fixed point iteration. 

    Parameters
    ----------
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``np.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    obs: numpy 1D array or numpy ndarray of dtype object
        The observation (generated by the environment). If single modality, this should be a 1D ``np.ndarray``
        (one-hot vector representation). If multi-modality, this should be ``np.ndarray`` of dtype object whose entries are 1D one-hot vectors.
    num_obs: ``list`` of ints
        List of dimensionalities of each observation modality
    num_states: ``list`` of ints
        List of dimensionalities of each hidden state factor
    mb_dict: ``Dict``
        Dictionary with two keys (``A_factor_list`` and ``A_modality_list``), that stores the factor indices that influence each modality (``A_factor_list``)
        and the modality indices influenced by each factor (``A_modality_list``).
    prior: numpy ndarray of dtype object, default None
        Prior over hidden states. If absent, prior is set to be the log uniform distribution over hidden states (identical to the 
        initialisation of the posterior)
    num_iter: int, default 10
        Number of variational fixed-point iterations to run until convergence.
    dF: float, default 1.0
        Initial free energy gradient (dF/dt) before updating in the course of gradient descent.
    dF_tol: float, default 0.001
        Threshold value of the time derivative of the variational free energy (dF/dt), to be checked at 
        each iteration. If dF <= dF_tol, the iterations are halted pre-emptively and the final 
        marginal posterior belief(s) is(are) returned
    compute_vfe: bool, default True
        Whether to compute the variational free energy at each iteration. If False, the function runs through 
        all variational iterations.

    Returns
    ----------
    qs: numpy 1D array, numpy ndarray of dtype object, optional
        Marginal posterior beliefs over hidden states at current timepoint""" ;
    code:function_exe_cmd "pymdp.algos.fpi.run_vanilla_fpi_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/algos/fpi.py#L160" ;
    code:hasImport code:Function_from_copy_import_copy_deepcopy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_run_vanilla_fpi_factorized,
        code:Parameter_compute_vfe_run_vanilla_fpi_factorized,
        code:Parameter_dF_run_vanilla_fpi_factorized,
        code:Parameter_dF_tol_run_vanilla_fpi_factorized,
        code:Parameter_mb_dict_run_vanilla_fpi_factorized,
        code:Parameter_num_iter_run_vanilla_fpi_factorized,
        code:Parameter_num_obs_run_vanilla_fpi_factorized,
        code:Parameter_num_states_run_vanilla_fpi_factorized,
        code:Parameter_obs_run_vanilla_fpi_factorized,
        code:Parameter_prior_run_vanilla_fpi_factorized ;
    code:isDocumented true ;
    code:name "run_vanilla_fpi_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_run_vmp____pymdp_jax_algos_py__run_vmp a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_algos_update_marginals\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Run variational message passing (VMP) on a sequence of observations" ;
    code:function_exe_cmd "pymdp.jax.algos.run_vmp()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L257" ;
    code:hasInput code:Parameter_A_dependencies_run_vmp,
        code:Parameter_A_run_vmp,
        code:Parameter_B_dependencies_run_vmp,
        code:Parameter_B_run_vmp,
        code:Parameter_num_iter_run_vmp,
        code:Parameter_obs_run_vmp,
        code:Parameter_prior_run_vmp,
        code:Parameter_tau_run_vmp ;
    code:isDocumented true ;
    code:name "run_vmp" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample____pymdp_utils_py__sample a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.sample()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L40" ;
    code:hasInput code:Parameter_probabilities_sample ;
    code:isDocumented false ;
    code:name "sample" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample_action____pymdp_agent_py__sample_action a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Sample or select a discrete action from the posterior over control states.
        This function both sets or cachés the action as an internal variable with the agent and returns it.
        This function also updates time variable (and thus manages consequences of updating the moving reference frame of beliefs)
        using ``self.step_time()``.


        Returns
        ----------
        action: 1D ``numpy.ndarray``
            Vector containing the indices of the actions for each control factor""" ;
    code:function_exe_cmd "pymdp.agent.Agent.sample_action()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L695" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_self_sample_action ;
    code:isDocumented true ;
    code:name "sample_action" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample_action____pymdp_control_py__sample_action a code:Function ;
    code:comments "weight each action according to its integrated posterior probability under all policies at the current timestep, Either you do this:" ;
    code:complexity "Complexity: 6" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Computes the marginal posterior over actions and then samples an action from it, one action per control factor.

    Parameters
    ----------
    q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy as a 2D array in ``policies[p_idx]``. Shape of ``policies[p_idx]`` 
        is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    num_controls: ``list`` of ``int``
        ``list`` of the dimensionalities of each control state factor.
    action_selection: ``str``, default "deterministic"
        String indicating whether whether the selected action is chosen as the maximum of the posterior over actions,
        or whether it's sampled from the posterior marginal over actions
    alpha: ``float``, default 16.0
        Action selection precision -- the inverse temperature of the softmax that is used to scale the 
        action marginals before sampling. This is only used if ``action_selection`` argument is "stochastic"

    Returns
    ----------
    selected_policy: 1D ``numpy.ndarray``
        Vector containing the indices of the actions for each control factor""" ;
    code:function_exe_cmd "pymdp.control.sample_action()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L1017" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_action_selection_sample_action,
        code:Parameter_alpha_sample_action,
        code:Parameter_num_controls_sample_action,
        code:Parameter_policies_sample_action,
        code:Parameter_q_pi_sample_action ;
    code:isDocumented true ;
    code:name "sample_action" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample_action____pymdp_envs_env_py__sample_action a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.env.Env.sample_action()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/env.py#L58" ;
    code:hasInput code:Parameter_self_sample_action ;
    code:isDocumented false ;
    code:name "sample_action" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample_action____pymdp_envs_tmaze_py__sample_action a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnvNullOutcome.sample_action()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L249" ;
    code:hasInput code:Parameter_self_sample_action ;
    code:isDocumented false ;
    code:name "sample_action" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample_action____pymdp_jax_agent_py__sample_action a code:Function ;
    code:complexity "Complexity: 6" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Sample or select a discrete action from the posterior over control states.

        Returns
        ----------
        action: 1D ``jax.numpy.ndarray``
            Vector containing the indices of the actions for each control factor
        action_probs: 2D ``jax.numpy.ndarray``
            Array of action probabilities""" ;
    code:function_exe_cmd "pymdp.jax.agent.Agent.sample_action()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/agent.py#L456" ;
    code:hasImport code:Function_from_jax_import_jax_nn,
        code:Function_from_jax_import_jax_random,
        code:Function_from_jax_import_jax_vmap,
        code:Function_from_jaxtyping_import_jaxtyping_Array,
        code:Function_from_pymdp_jax_agent_import_control,
        code:Function_from_pymdp_jax_agent_import_inference,
        code:Function_from_pymdp_jax_agent_import_learning,
        code:Function_from_pymdp_jax_agent_import_maths,
        code:Function_from_pymdp_jax_agent_import_utils,
        code:Function_import_jax_numpy_as_jnp,
        code:Function_import_jax_tree_util_as_jtu ;
    code:hasInput code:Parameter_q_pi_sample_action,
        code:Parameter_rng_key_sample_action,
        code:Parameter_self_sample_action ;
    code:isDocumented true ;
    code:name "sample_action" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample_action____pymdp_jax_control_py__sample_action a code:Function ;
    code:complexity "Complexity: 3" ;
    code:dependsOn code:Function_pymdp_jax_control_get_marginals\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Samples an action from posterior marginals, one action per control factor.

    Parameters
    ----------
    q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy as a 2D array in ``policies[p_idx]``. Shape of ``policies[p_idx]`` 
        is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    num_controls: ``list`` of ``int``
        ``list`` of the dimensionalities of each control state factor.
    action_selection: string, default "deterministic"
        String indicating whether whether the selected action is chosen as the maximum of the posterior over actions,
        or whether it's sampled from the posterior marginal over actions
    alpha: float, default 16.0
        Action selection precision -- the inverse temperature of the softmax that is used to scale the 
        action marginals before sampling. This is only used if ``action_selection`` argument is "stochastic"

    Returns
    ----------
    selected_policy: 1D ``numpy.ndarray``
        Vector containing the indices of the actions for each control factor""" ;
    code:function_exe_cmd "pymdp.jax.control.sample_action()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L49" ;
    code:hasInput code:Parameter_action_selection_sample_action,
        code:Parameter_alpha_sample_action,
        code:Parameter_num_controls_sample_action,
        code:Parameter_policies_sample_action,
        code:Parameter_q_pi_sample_action,
        code:Parameter_rng_key_sample_action ;
    code:isDocumented true ;
    code:name "sample_action" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample_obj_array____pymdp_utils_py__sample_obj_array a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_utils_sample\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Sample from set of Categorical distributions, stored in the sub-arrays of an object array" ;
    code:function_exe_cmd "pymdp.utils.sample_obj_array()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L45" ;
    code:hasInput code:Parameter_arr_sample_obj_array ;
    code:isDocumented true ;
    code:name "sample_obj_array" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample_policy____pymdp_control_py__sample_policy a code:Function ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Samples a policy from the posterior over policies, taking the action (per control factor) entailed by the first timestep of the selected policy.

    Parameters
    ----------
    q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy as a 2D array in ``policies[p_idx]``. Shape of ``policies[p_idx]`` 
        is ``(num_timesteps, num_factors)`` where ``num_timesteps`` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    num_controls: ``list`` of ``int``
        ``list`` of the dimensionalities of each control state factor.
    action_selection: string, default "deterministic"
        String indicating whether whether the selected policy is chosen as the maximum of the posterior over policies,
        or whether it's sampled from the posterior over policies.
    alpha: float, default 16.0
        Action selection precision -- the inverse temperature of the softmax that is used to scale the 
        policy posterior before sampling. This is only used if ``action_selection`` argument is "stochastic"

    Returns
    ----------
    selected_policy: 1D ``numpy.ndarray``
        Vector containing the indices of the actions for each control factor""" ;
    code:function_exe_cmd "pymdp.control.sample_policy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L1126" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_action_selection_sample_policy,
        code:Parameter_alpha_sample_policy,
        code:Parameter_num_controls_sample_policy,
        code:Parameter_policies_sample_policy,
        code:Parameter_q_pi_sample_policy ;
    code:isDocumented true ;
    code:name "sample_policy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sample_policy____pymdp_jax_control_py__sample_policy a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.control.sample_policy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L88" ;
    code:hasInput code:Parameter_action_selection_sample_policy,
        code:Parameter_alpha_sample_policy,
        code:Parameter_policies_sample_policy,
        code:Parameter_q_pi_sample_policy,
        code:Parameter_rng_key_sample_policy ;
    code:isDocumented false ;
    code:name "sample_policy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_select_highest____pymdp_control_py__select_highest a code:Function ;
    code:comments "If some of the most likely actions have nearly equal probability, sample from this subset of actions, instead of using argmax" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Selects the highest value among the provided ones. If the higher value is more than once and they're closer than 1e-5, a random choice is made.
    Parameters
    ----------
    options_array: ``numpy.ndarray``
        The array to examine

    Returns
    -------
    The highest value in the given list""" ;
    code:function_exe_cmd "pymdp.control.select_highest()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L1215" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_options_array_select_highest ;
    code:isDocumented true ;
    code:name "select_highest" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_select_probs____pymdp_jax_task_py__select_probs a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.task.select_probs()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/task.py#L10" ;
    code:hasInput code:Parameter_actions_select_probs,
        code:Parameter_dependency_list_select_probs,
        code:Parameter_matrix_select_probs,
        code:Parameter_positions_select_probs ;
    code:isDocumented false ;
    code:name "select_probs" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_set_latest_beliefs____pymdp_agent_py__set_latest_beliefs a code:Function ;
    code:comments "average the earliest marginals together using contemporaneous posterior over policies (`self.q_pi_hist[0]`), average the earliest marginals together using posterior over policies (`self.q_pi`)" ;
    code:complexity "Complexity: 7" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Both sets and returns the penultimate belief before the first timestep of the backwards inference horizon. 
        In the case that the inference horizon includes the first timestep of the simulation, then the ``latest_belief`` is
        simply the first belief of the whole simulation, or the prior (``self.D``). The particular structure of the ``latest_belief``
        depends on the value of ``self.edge_handling_params['use_BMA']``.

        Returns
        ---------
        latest_belief: ``numpy.ndarray`` of dtype object
            Penultimate posterior beliefs over hidden states at the timestep just before the first timestep of the inference horizon. 
            Depending on the value of ``self.edge_handling_params['use_BMA']``, the shape of this output array will differ.
            If ``self.edge_handling_params['use_BMA'] == True``, then ``latest_belief`` will be a Bayesian model average 
            of beliefs about hidden states, where the average is taken with respect to posterior beliefs about policies.
            Otherwise, `latest_belief`` will be the full, policy-conditioned belief about hidden states, and will have indexing structure
            policies->factors, such that ``latest_belief[p_idx][f_idx]`` refers to the penultimate belief about marginal factor ``f_idx``
            under policy ``p_idx``.""" ;
    code:function_exe_cmd "pymdp.agent.Agent.set_latest_beliefs()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L420" ;
    code:hasImport code:Function_import_copy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_last_belief_set_latest_beliefs,
        code:Parameter_self_set_latest_beliefs ;
    code:isDocumented true ;
    code:name "set_latest_beliefs" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_smoothing_ovf____pymdp_jax_inference_py__smoothing_ovf a code:Function ;
    code:comments "number of factors" ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_jax_inference_joint_dist_factor\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.inference.smoothing_ovf()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/inference.py#L103" ;
    code:hasInput code:Parameter_B_smoothing_ovf,
        code:Parameter_filtered_post_smoothing_ovf,
        code:Parameter_past_actions_smoothing_ovf ;
    code:isDocumented false ;
    code:name "smoothing_ovf" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_softmax____pymdp_maths_py__softmax a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Computes the softmax function on a set of values" ;
    code:function_exe_cmd "pymdp.maths.softmax()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L363" ;
    code:hasInput code:Parameter_dist_softmax ;
    code:isDocumented true ;
    code:name "softmax" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_softmax_obj_arr____pymdp_maths_py__softmax_obj_arr a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_maths_softmax\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.maths.softmax_obj_arr()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L373" ;
    code:hasInput code:Parameter_arr_softmax_obj_arr ;
    code:isDocumented false ;
    code:name "softmax_obj_arr" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_sophisticated_inference_search____pymdp_control_py__sophisticated_inference_search a code:Function ;
    code:comments "ignore low probability actions in the search tree, TODO shouldnt we have to add extra penalty for branches no longer considered?, or assume these are already low EFE (high NEFE) anyway?, average over outcomes, ignore low probability states in the search tree" ;
    code:complexity "Complexity: 11" ;
    code:dependsOn code:Function_pymdp_control_calc_expected_utility\(\),
        code:Function_pymdp_control_calc_inductive_cost\(\),
        code:Function_pymdp_control_calc_states_info_gain_factorized\(\),
        code:Function_pymdp_control_get_expected_obs_factorized\(\),
        code:Function_pymdp_control_get_expected_states_interactions\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Performs sophisticated inference to find the optimal policy for a given generative model and prior preferences.

    Parameters
    ----------
    qs: ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at a given timepoint.
    policies: ``list`` of 1D ``numpy.ndarray``                    inference_params = {"num_iter": 10, "dF": 1.0, "dF_tol": 0.001, "compute_vfe": False}

        ``list`` that stores each policy as a 1D array in ``policies[p_idx]``. Shape of ``policies[p_idx]`` 
        is ``(num_factors)`` where ``num_factors`` is the number of control factors.        
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    C: ``numpy.ndarray`` of dtype object
       Prior over observations or 'prior preferences', storing the "value" of each outcome in terms of relative log probabilities. 
       This is softmaxed to form a proper probability distribution before being used to compute the expected utility term of the expected free energy.
    A_factor_list: ``list`` of ``list`` of ``int``
        List of lists, where ``A_factor_list[m]`` is a list of the hidden state factor indices that observation modality with the index ``m`` depends on
    B_factor_list: ``list`` of ``list`` of ``int``
        List of lists of hidden state factors each hidden state factor depends on. Each element ``B_factor_list[i]`` is a list of the factor indices that factor i's dynamics depend on.
    I: ``numpy.ndarray`` of dtype object
        For each state factor, contains a 2D ``numpy.ndarray`` whose element i,j yields the probability 
        of reaching the goal state backwards from state j after i steps.
    horizon: ``int``
        The temporal depth of the policy
    policy_prune_threshold: ``float``
        The threshold for pruning policies that are below a certain probability
    state_prune_threshold: ``float``
        The threshold for pruning states in the expectation that are below a certain probability
    prune_penalty: ``float``
        Penalty to add to the EFE when a policy is pruned
    gamma: ``float``, default 16.0
        Prior precision over policies, scales the contribution of the expected free energy to the posterior over policies
    n: ``int``
        timestep in the future we are calculating

    Returns
    ----------
    q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.

    G: 1D ``numpy.ndarray``
        Negative expected free energies of each policy, i.e. a vector containing one negative expected free energy per policy.""" ;
    code:function_exe_cmd "pymdp.control.sophisticated_inference_search()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L1353" ;
    code:hasImport code:Function_import_itertools,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_factor_list_sophisticated_inference_search,
        code:Parameter_A_sophisticated_inference_search,
        code:Parameter_B_factor_list_sophisticated_inference_search,
        code:Parameter_B_sophisticated_inference_search,
        code:Parameter_C_sophisticated_inference_search,
        code:Parameter_I_sophisticated_inference_search,
        code:Parameter_gamma_sophisticated_inference_search,
        code:Parameter_horizon_sophisticated_inference_search,
        code:Parameter_inference_params_sophisticated_inference_search,
        code:Parameter_n_sophisticated_inference_search,
        code:Parameter_policies_sophisticated_inference_search,
        code:Parameter_policy_prune_threshold_sophisticated_inference_search,
        code:Parameter_prune_penalty_sophisticated_inference_search,
        code:Parameter_qs_sophisticated_inference_search,
        code:Parameter_state_prune_threshold_sophisticated_inference_search ;
    code:isDocumented true ;
    code:name "sophisticated_inference_search" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_MDP_G____pymdp_maths_py__spm_MDP_G a code:Function ;
    code:comments "Probability distribution over the hidden causes: i.e., Q(x), Accumulate expectation of entropy: i.e., E_{Q(o, x)}[lnP(o|x)] = E_{P(o|x)Q(x)}[lnP(o|x)] = E_{Q(x)}[P(o|x)lnP(o|x)] = E_{Q(x)}[H[P(o|x)]], Probability over outcomes for this combination of causes, Subtract negative entropy of expectations: i.e., E_{Q(o)}[lnQ(o)], type: ignore" ;
    code:complexity "Complexity: 5" ;
    code:dependsOn code:Function_pymdp_maths_spm_cross\(\),
        code:Function_pymdp_maths_spm_log_single\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Calculates the Bayesian surprise in the same way as spm_MDP_G.m does in 
    the original matlab code.

    Parameters
    ----------
    A (numpy ndarray or array-object):
        array assigning likelihoods of observations/outcomes under the various 
        hidden state configurations

    x (numpy ndarray or array-object):
        Categorical distribution presenting probabilities of hidden states 
        (this can also be interpreted as the predictive density over hidden 
        states/causes if you're calculating the expected Bayesian surprise)

    Returns
    -------
    G (float):
        the (expected or not) Bayesian surprise under the density specified by x --
        namely, this scores how much an expected observation would update beliefs 
        about hidden states x, were it to be observed.""" ;
    code:function_exe_cmd "pymdp.maths.spm_MDP_G()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L517" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_spm_MDP_G,
        code:Parameter_x_spm_MDP_G ;
    code:isDocumented true ;
    code:name "spm_MDP_G" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_betaln____pymdp_maths_py__spm_betaln a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Log of the multivariate beta function of a vector.
     @NOTE this function computes across columns if `z` is a matrix""" ;
    code:function_exe_cmd "pymdp.maths.spm_betaln()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L329" ;
    code:hasInput code:Parameter_z_spm_betaln ;
    code:isDocumented true ;
    code:name "spm_betaln" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_calc_neg_ambig____pymdp_maths_py__spm_calc_neg_ambig a code:Function ;
    code:comments "Probability distribution over the hidden causes: i.e., Q(x), Accumulate expectation of entropy: i.e., E_{Q(o, x)}[lnP(o|x)] = E_{P(o|x)Q(x)}[lnP(o|x)] = E_{Q(x)}[P(o|x)lnP(o|x)] = E_{Q(x)}[H[P(o|x)]], Probability over outcomes for this combination of causes" ;
    code:complexity "Complexity: 5" ;
    code:dependsOn code:Function_pymdp_maths_spm_cross\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Function that just calculates the negativity ambiguity part of the state information gain, using the same method used in 
    spm_MDP_G.m in the original matlab code.

    Parameters
    ----------
    A (numpy ndarray or array-object):
        array assigning likelihoods of observations/outcomes under the various 
        hidden state configurations

    x (numpy ndarray or array-object):
        Categorical distribution presenting probabilities of hidden states 
        (this can also be interpreted as the predictive density over hidden 
        states/causes if you're calculating the expected Bayesian surprise)

    Returns
    -------
    G (float):
        the negative ambiguity (negative entropy of the likelihood of observations given hidden states, expected under current posterior over hidden states)""" ;
    code:function_exe_cmd "pymdp.maths.spm_calc_neg_ambig()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L464" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_spm_calc_neg_ambig,
        code:Parameter_x_spm_calc_neg_ambig ;
    code:isDocumented true ;
    code:name "spm_calc_neg_ambig" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_calc_qo_entropy____pymdp_maths_py__spm_calc_qo_entropy a code:Function ;
    code:comments "Probability distribution over the hidden causes: i.e., Q(x), Accumulate expectation of entropy: i.e., E_{Q(o, x)}[lnP(o|x)] = E_{P(o|x)Q(x)}[lnP(o|x)] = E_{Q(x)}[P(o|x)lnP(o|x)] = E_{Q(x)}[H[P(o|x)]], Probability over outcomes for this combination of causes, Compute entropy of expectations: i.e., -E_{Q(o)}[lnQ(o)]" ;
    code:complexity "Complexity: 5" ;
    code:dependsOn code:Function_pymdp_maths_spm_cross\(\),
        code:Function_pymdp_maths_spm_log_single\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Function that just calculates the entropy part of the state information gain, using the same method used in 
    spm_MDP_G.m in the original matlab code.

    Parameters
    ----------
    A (numpy ndarray or array-object):
        array assigning likelihoods of observations/outcomes under the various 
        hidden state configurations

    x (numpy ndarray or array-object):
        Categorical distribution presenting probabilities of hidden states 
        (this can also be interpreted as the predictive density over hidden 
        states/causes if you're calculating the expected Bayesian surprise)

    Returns
    -------
    H (float):
        the entropy of the marginal distribution over observations/outcomes""" ;
    code:function_exe_cmd "pymdp.maths.spm_calc_qo_entropy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L412" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_spm_calc_qo_entropy,
        code:Parameter_x_spm_calc_qo_entropy ;
    code:isDocumented true ;
    code:name "spm_calc_qo_entropy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_cross____pymdp_maths_py__spm_cross a code:Function ;
    code:complexity "Complexity: 11" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Multi-dimensional outer product

    Parameters
    ----------
    - `x` [np.ndarray] || [Categorical] (optional)
        The values to perfrom the outer-product with. If empty, then the outer-product 
        is taken between x and itself. If y is not empty, then outer product is taken 
        between x and the various dimensions of y.
    - `args` [np.ndarray] || [Categorical] (optional)
        Remaining arrays to perform outer-product with. These extra arrays are recursively 
        multiplied with the 'initial' outer product (that between X and x).

    Returns
    -------
    - `z` [np.ndarray] || [Categorical]
          The result of the outer-product""" ;
    code:function_exe_cmd "pymdp.maths.spm_cross()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L197" ;
    code:hasInput code:Parameter_x_spm_cross,
        code:Parameter_y_spm_cross ;
    code:isDocumented true ;
    code:name "spm_cross" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_dot____pymdp_maths_py__spm_dot a code:Function ;
    code:comments "Construct dims to perform dot product on, dims = list((np.arange(0, len(x)) + X.ndim - len(x)).astype(int)), dims = list(range(X.ndim)), check to see if `Y` is a scalar" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Dot product of a multidimensional array with `x`. The dimensions in `dims_to_omit` 
    will not be summed across during the dot product

    Parameters
    ----------
    - `x` [1D numpy.ndarray] - either vector or array of arrays
        The alternative array to perform the dot product with
    - `dims_to_omit` [list :: int] (optional)
        Which dimensions to omit

    Returns 
    -------
    - `Y` [1D numpy.ndarray] - the result of the dot product""" ;
    code:function_exe_cmd "pymdp.maths.spm_dot()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L19" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_X_spm_dot,
        code:Parameter_dims_to_omit_spm_dot,
        code:Parameter_x_spm_dot ;
    code:isDocumented true ;
    code:name "spm_dot" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_dot_classic____pymdp_maths_py__spm_dot_classic a code:Function ;
    code:comments "Construct dims to perform dot product on, delete ignored dims, compute dot product, X = np.sum(X, axis=dims[d], keepdims=True), Y = np.squeeze(X), check to see if `Y` is a scalar" ;
    code:complexity "Complexity: 7" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Dot product of a multidimensional array with `x`. The dimensions in `dims_to_omit` 
    will not be summed across during the dot product

    Parameters
    ----------
    - `x` [1D numpy.ndarray] - either vector or array of arrays
        The alternative array to perform the dot product with
    - `dims_to_omit` [list :: int] (optional)
        Which dimensions to omit

    Returns 
    -------
    - `Y` [1D numpy.ndarray] - the result of the dot product""" ;
    code:function_exe_cmd "pymdp.maths.spm_dot_classic()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L59" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_X_spm_dot_classic,
        code:Parameter_dims_to_omit_spm_dot_classic,
        code:Parameter_x_spm_dot_classic ;
    code:isDocumented true ;
    code:name "spm_dot_classic" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_dot_old____pymdp_maths_py__spm_dot_old a code:Function ;
    code:comments "TODO: we should look for an alternative to obs_mode, Construct dims to perform dot product on, delete ignored dims, compute dot product, X = np.sum(X, axis=dims[d], keepdims=True), Y = np.squeeze(X), check to see if `Y` is a scalar" ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Dot product of a multidimensional array with `x`. The dimensions in `dims_to_omit` 
    will not be summed across during the dot product

    #TODO: we should look for an alternative to obs_mode

    Parameters
    ----------
    - `x` [1D numpy.ndarray] - either vector or array of arrays
        The alternative array to perform the dot product with
    - `dims_to_omit` [list :: int] (optional)
        Which dimensions to omit

    Returns 
    -------
    - `Y` [1D numpy.ndarray] - the result of the dot product""" ;
    code:function_exe_cmd "pymdp.maths.spm_dot_old()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L131" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_X_spm_dot_old,
        code:Parameter_dims_to_omit_spm_dot_old,
        code:Parameter_obs_mode_spm_dot_old,
        code:Parameter_x_spm_dot_old ;
    code:isDocumented true ;
    code:name "spm_dot_old" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_log_obj_array____pymdp_maths_py__spm_log_obj_array a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_maths_spm_log_single\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Applies `spm_log_single` to multiple elements of a numpy object array" ;
    code:function_exe_cmd "pymdp.maths.spm_log_obj_array()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L306" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_obj_arr_spm_log_obj_array ;
    code:isDocumented true ;
    code:name "spm_log_obj_array" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_log_single____pymdp_maths_py__spm_log_single a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Adds small epsilon value to an array before natural logging it" ;
    code:function_exe_cmd "pymdp.maths.spm_log_single()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L300" ;
    code:hasInput code:Parameter_arr_spm_log_single ;
    code:isDocumented true ;
    code:name "spm_log_single" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_norm____pymdp_maths_py__spm_norm a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Returns normalization of Categorical distribution, 
    stored in the columns of A.""" ;
    code:function_exe_cmd "pymdp.maths.spm_norm()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L291" ;
    code:hasInput code:Parameter_A_spm_norm ;
    code:isDocumented true ;
    code:name "spm_norm" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_wnorm____pymdp_jax_maths_py__spm_wnorm a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Returns Expectation of logarithm of Dirichlet parameters over a set of 
    Categorical distributions, stored in the columns of A.""" ;
    code:function_exe_cmd "pymdp.jax.maths.spm_wnorm()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L132" ;
    code:hasInput code:Parameter_A_spm_wnorm ;
    code:isDocumented true ;
    code:name "spm_wnorm" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_spm_wnorm____pymdp_maths_py__spm_wnorm a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Returns Expectation of logarithm of Dirichlet parameters over a set of 
    Categorical distributions, stored in the columns of A.""" ;
    code:function_exe_cmd "pymdp.maths.spm_wnorm()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/maths.py#L317" ;
    code:hasInput code:Parameter_A_spm_wnorm ;
    code:isDocumented true ;
    code:name "spm_wnorm" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_stable_cross_entropy____pymdp_jax_maths_py__stable_cross_entropy a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.maths.stable_cross_entropy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L17" ;
    code:hasInput code:Parameter_x_stable_cross_entropy,
        code:Parameter_y_stable_cross_entropy ;
    code:isDocumented false ;
    code:name "stable_cross_entropy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_stable_entropy____pymdp_jax_maths_py__stable_entropy a code:Function ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_maths_stable_xlogx\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.maths.stable_entropy()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L14" ;
    code:hasInput code:Parameter_x_stable_entropy ;
    code:isDocumented false ;
    code:name "stable_entropy" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_stable_xlogx____pymdp_jax_maths_py__stable_xlogx a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.maths.stable_xlogx()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/maths.py#L11" ;
    code:hasInput code:Parameter_x_stable_xlogx ;
    code:isDocumented false ;
    code:name "stable_xlogx" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_state____pymdp_envs_tmaze_py__state a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnvNullOutcome.state()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L340" ;
    code:hasInput code:Parameter_self_state ;
    code:isDocumented false ;
    code:name "state" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_step____pymdp_envs_env_py__step a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Steps the environment forward using an action.

        Parameters
        ----------
        action
            The action, the type/format of which depends on the implementation.

        Returns
        ---------
        observation
            Sensory observations for an agent, the type/format of which depends on the implementation of ``step`` and the observation space of the agent.""" ;
    code:function_exe_cmd "pymdp.envs.env.Env.step()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/env.py#L36" ;
    code:hasInput code:Parameter_action_step,
        code:Parameter_self_step ;
    code:isDocumented true ;
    code:name "step" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_step____pymdp_envs_tmaze_py__step a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.envs.tmaze.TMazeEnvNullOutcome.step()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/envs/tmaze.py#L240" ;
    code:hasInput code:Parameter_actions_step,
        code:Parameter_self_step ;
    code:isDocumented false ;
    code:name "step" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_step____pymdp_jax_task_py__step a code:Function ;
    code:comments "return a list of random observations and states" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.task.PyMDPEnv.step()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/task.py#L51" ;
    code:hasInput code:Parameter_actions_step,
        code:Parameter_key_step,
        code:Parameter_self_step ;
    code:isDocumented false ;
    code:name "step" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_step_time____pymdp_agent_py__step_time a code:Function ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Advances time by one step. This involves updating the ``self.prev_actions``, and in the case of a moving
        inference horizon, this also shifts the history of post-dictive beliefs forward in time (using ``self.set_latest_beliefs()``),
        so that the penultimate belief before the beginning of the horizon is correctly indexed.

        Returns
        ---------
        curr_timestep: ``int``
            The index in absolute simulation time of the current timestep.""" ;
    code:function_exe_cmd "pymdp.agent.Agent.step_time()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L396" ;
    code:hasInput code:Parameter_self_step_time ;
    code:isDocumented true ;
    code:name "step_time" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_to_obj_array____pymdp_utils_py__to_obj_array a code:Function ;
    code:complexity "Complexity: 2" ;
    code:dependsOn code:Function_pymdp_utils_is_obj_array\(\),
        code:Function_pymdp_utils_obj_array\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.utils.to_obj_array()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/utils.py#L288" ;
    code:hasInput code:Parameter_arr_to_obj_array ;
    code:isDocumented false ;
    code:name "to_obj_array" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_unique_multiactions____pymdp_jax_agent_py__unique_multiactions a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.agent.Agent.unique_multiactions()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/agent.py#L253" ;
    code:hasImport code:Function_from_pymdp_jax_agent_import_maths,
        code:Function_import_math_as_pymath ;
    code:hasInput code:Parameter_self_unique_multiactions ;
    code:isDocumented false ;
    code:name "unique_multiactions" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_A____pymdp_agent_py__update_A a code:Function ;
    code:comments "set new prior to posterior, take expected value of posterior Dirichlet parameters to calculate posterior over A array" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update approximate posterior beliefs about Dirichlet parameters that parameterise the observation likelihood or ``A`` array.

        Parameters
        ----------
        observation: ``list`` or ``tuple`` of ints
            The observation input. Each entry ``observation[m]`` stores the index of the discrete
            observation for modality ``m``.

        Returns
        -----------
        qA: ``numpy.ndarray`` of dtype object
            Posterior Dirichlet parameters over observation model (same shape as ``A``), after having updated it with observations.""" ;
    code:function_exe_cmd "pymdp.agent.Agent.update_A()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L749" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_obs_update_A,
        code:Parameter_self_update_A ;
    code:isDocumented true ;
    code:name "update_A" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_B____pymdp_agent_py__update_B a code:Function ;
    code:comments "set new prior to posterior, take expected value of posterior Dirichlet parameters to calculate posterior over B array" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update posterior beliefs about Dirichlet parameters that parameterise the transition likelihood 

        Parameters
        -----------
        qs_prev: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object
            Marginal posterior beliefs over hidden states at previous timepoint.

        Returns
        -----------
        qB: ``numpy.ndarray`` of dtype object
            Posterior Dirichlet parameters over transition model (same shape as ``B``), after having updated it with state beliefs and actions.""" ;
    code:function_exe_cmd "pymdp.agent.Agent.update_B()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L810" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_qs_prev_update_B,
        code:Parameter_self_update_B ;
    code:isDocumented true ;
    code:name "update_B" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_D____pymdp_agent_py__update_D a code:Function ;
    code:comments "get beliefs about policies at the time at the beginning of the inference horizon, beliefs about hidden states at the first timestep of the inference horizon, set new prior to posterior, take expected value of posterior Dirichlet parameters to calculate posterior over D array" ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update Dirichlet parameters of the initial hidden state distribution 
        (prior beliefs about hidden states at the beginning of the inference window).

        Parameters
        -----------
        qs_t0: 1D ``numpy.ndarray``, ``numpy.ndarray`` of dtype object, or ``None``
            Marginal posterior beliefs over hidden states at current timepoint. If ``None``, the 
            value of ``qs_t0`` is set to ``self.qs_hist[0]`` (i.e. the initial hidden state beliefs at the first timepoint).
            If ``self.inference_algo == "MMP"``, then ``qs_t0`` is set to be the Bayesian model average of beliefs about hidden states
            at the first timestep of the backwards inference horizon, where the average is taken with respect to posterior beliefs about policies.

        Returns
        -----------
        qD: ``numpy.ndarray`` of dtype object
            Posterior Dirichlet parameters over initial hidden state prior (same shape as ``qs_t0``), after having updated it with state beliefs.""" ;
    code:function_exe_cmd "pymdp.agent.Agent.update_D()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/agent.py#L871" ;
    code:hasImport code:Function_import_copy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_qs_t0_update_D,
        code:Parameter_self_update_D ;
    code:isDocumented true ;
    code:name "update_D" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_empirical_prior____pymdp_jax_agent_py__update_empirical_prior a code:Function ;
    code:comments "return empirical_prior, and the history of posterior beliefs (filtering distributions) held about hidden states at times 1, 2 ... t, this computation of the predictive prior is correct only for fully factorised Bs., in the case of the 'mmp' or 'vmp' we have to use D as prior parameter for infer states" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.agent.Agent.update_empirical_prior()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/agent.py#L369" ;
    code:hasInput code:Parameter_action_update_empirical_prior,
        code:Parameter_qs_update_empirical_prior,
        code:Parameter_self_update_empirical_prior ;
    code:isDocumented false ;
    code:name "update_empirical_prior" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_marginals____pymdp_jax_algos_py__update_marginals a code:Function ;
    code:comments "log likelihoods -> $\\ln(A)$ for all time steps, for $k > t$ we have $\\ln(A) = 0$, # mapping over batch dimension, return vmap(compute_log_likelihood_per_modality)(obs_t, A), mapping over time dimension of obs array, this gives a sequence of log-likelihoods (one for each `t`), log marginals -> $\\ln(q(s_t))$ for all time steps and factors, log prior -> $\\ln(p(s_t))$ for all factors, messages from future $m_+(s_t)$ and past $m_-(s_t)$ for all time steps and factors. For t = T we have that $m_+(s_T) = 0$" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "\" Version of marginal update that uses a sparse dependency matrix for A" ;
    code:function_exe_cmd "pymdp.jax.algos.update_marginals()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L106" ;
    code:hasInput code:Parameter_A_dependencies_update_marginals,
        code:Parameter_A_update_marginals,
        code:Parameter_B_dependencies_update_marginals,
        code:Parameter_B_update_marginals,
        code:Parameter_get_messages_update_marginals,
        code:Parameter_num_iter_update_marginals,
        code:Parameter_obs_update_marginals,
        code:Parameter_prior_update_marginals,
        code:Parameter_tau_update_marginals ;
    code:isDocumented true ;
    code:name "update_marginals" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_obs_likelihood_dirichlet____pymdp_jax_learning_py__update_obs_likelihood_dirichlet a code:Function ;
    code:complexity "Complexity: 3" ;
    code:dependsOn code:Function_pymdp_jax_learning_update_obs_likelihood_dirichlet_m\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "JAX version of ``pymdp.learning.update_obs_likelihood_dirichlet``" ;
    code:function_exe_cmd "pymdp.jax.learning.update_obs_likelihood_dirichlet()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/learning.py#L33" ;
    code:hasInput code:Parameter_A_update_obs_likelihood_dirichlet,
        code:Parameter_obs_update_obs_likelihood_dirichlet,
        code:Parameter_pA_update_obs_likelihood_dirichlet,
        code:Parameter_qs_update_obs_likelihood_dirichlet ;
    code:isDocumented true ;
    code:name "update_obs_likelihood_dirichlet" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_obs_likelihood_dirichlet____pymdp_learning_py__update_obs_likelihood_dirichlet a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update Dirichlet parameters of the observation likelihood distribution.

    Parameters
    -----------
    pA: ``numpy.ndarray`` of dtype object
        Prior Dirichlet parameters over observation model (same shape as ``A``)
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    obs: 1D ``numpy.ndarray``, ``numpy.ndarray`` of dtype object, ``int`` or ``tuple``
        The observation (generated by the environment). If single modality, this can be a 1D ``numpy.ndarray``
        (one-hot vector representation) or an ``int`` (observation index)
        If multi-modality, this can be ``numpy.ndarray`` of dtype object whose entries are 1D one-hot vectors,
        or a ``tuple`` (of ``int``)
    qs: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object, default None
        Marginal posterior beliefs over hidden states at current timepoint.
    lr: float, default 1.0
        Learning rate, scale of the Dirichlet pseudo-count update.
    modalities: ``list``, default "all"
        Indices (ranging from 0 to ``n_modalities - 1``) of the observation modalities to include 
        in learning. Defaults to "all", meaning that modality-specific sub-arrays of ``pA``
        are all updated using the corresponding observations.

    Returns
    -----------
    qA: ``numpy.ndarray`` of dtype object
        Posterior Dirichlet parameters over observation model (same shape as ``A``), after having updated it with observations.""" ;
    code:function_exe_cmd "pymdp.learning.update_obs_likelihood_dirichlet()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/learning.py#L9" ;
    code:hasImport code:Function_import_copy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_update_obs_likelihood_dirichlet,
        code:Parameter_lr_update_obs_likelihood_dirichlet,
        code:Parameter_modalities_update_obs_likelihood_dirichlet,
        code:Parameter_obs_update_obs_likelihood_dirichlet,
        code:Parameter_pA_update_obs_likelihood_dirichlet,
        code:Parameter_qs_update_obs_likelihood_dirichlet ;
    code:isDocumented true ;
    code:name "update_obs_likelihood_dirichlet" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_obs_likelihood_dirichlet_factorized____pymdp_learning_py__update_obs_likelihood_dirichlet_factorized a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update Dirichlet parameters of the observation likelihood distribution, in a case where the observation model is reduced (factorized) and only represents
    the conditional dependencies between the observation modalities and particular hidden state factors (whose indices are specified in each modality-specific entry of ``A_factor_list``)

    Parameters
    -----------
    pA: ``numpy.ndarray`` of dtype object
        Prior Dirichlet parameters over observation model (same shape as ``A``)
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    obs: 1D ``numpy.ndarray``, ``numpy.ndarray`` of dtype object, ``int`` or ``tuple``
        The observation (generated by the environment). If single modality, this can be a 1D ``numpy.ndarray``
        (one-hot vector representation) or an ``int`` (observation index)
        If multi-modality, this can be ``numpy.ndarray`` of dtype object whose entries are 1D one-hot vectors,
        or a ``tuple`` (of ``int``)
    qs: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object, default None
        Marginal posterior beliefs over hidden states at current timepoint.
    A_factor_list: ``list`` of ``list`` of ``int``
        List of lists, where each list with index `m` contains the indices of the hidden states that observation modality `m` depends on.
    lr: float, default 1.0
        Learning rate, scale of the Dirichlet pseudo-count update.
    modalities: ``list``, default "all"
        Indices (ranging from 0 to ``n_modalities - 1``) of the observation modalities to include 
        in learning. Defaults to "all", meaning that modality-specific sub-arrays of ``pA``
        are all updated using the corresponding observations.

    Returns
    -----------
    qA: ``numpy.ndarray`` of dtype object
        Posterior Dirichlet parameters over observation model (same shape as ``A``), after having updated it with observations.""" ;
    code:function_exe_cmd "pymdp.learning.update_obs_likelihood_dirichlet_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/learning.py#L60" ;
    code:hasImport code:Function_import_copy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_factor_list_update_obs_likelihood_dirichlet_factorized,
        code:Parameter_A_update_obs_likelihood_dirichlet_factorized,
        code:Parameter_lr_update_obs_likelihood_dirichlet_factorized,
        code:Parameter_modalities_update_obs_likelihood_dirichlet_factorized,
        code:Parameter_obs_update_obs_likelihood_dirichlet_factorized,
        code:Parameter_pA_update_obs_likelihood_dirichlet_factorized,
        code:Parameter_qs_update_obs_likelihood_dirichlet_factorized ;
    code:isDocumented true ;
    code:name "update_obs_likelihood_dirichlet_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_obs_likelihood_dirichlet_m____pymdp_jax_learning_py__update_obs_likelihood_dirichlet_m a code:Function ;
    code:comments "pA_m - parameters of the dirichlet from the prior, pA_m.shape = (no_m x num_states[k] x num_states[j] x ... x num_states[n]) where (k, j, n) are indices of the hidden state factors that are parents of modality m, \\alpha^{*} = \\alpha_{0} + \\kappa * \\sum_{t=t_begin}^{t=T} o_{m,t} \\otimes \\mathbf{s}_{f \\in parents(m), t}, \\alpha^{*} is the VFE-minimizing solution for the parameters of q(A), \\alpha_{0} are the Dirichlet parameters of p(A), o_{m,t} = observation (one-hot vector) of modality m at time t, \\mathbf{s}_{f \\in parents(m), t} = categorical parameters of marginal posteriors over hidden state factors that are parents of modality m, at time t, \\otimes is a multidimensional outer product, not just a outer product of two vectors, \\kappa is an optional learning rate" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "JAX version of ``pymdp.learning.update_obs_likelihood_dirichlet_m``" ;
    code:function_exe_cmd "pymdp.jax.learning.update_obs_likelihood_dirichlet_m()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/learning.py#L10" ;
    code:hasInput code:Parameter_dependencies_m_update_obs_likelihood_dirichlet_m,
        code:Parameter_lr_update_obs_likelihood_dirichlet_m,
        code:Parameter_obs_m_update_obs_likelihood_dirichlet_m,
        code:Parameter_pA_m_update_obs_likelihood_dirichlet_m,
        code:Parameter_qs_update_obs_likelihood_dirichlet_m ;
    code:isDocumented true ;
    code:name "update_obs_likelihood_dirichlet_m" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_policies____pymdp_control_py__update_posterior_policies a code:Function ;
    code:complexity "Complexity: 9" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update posterior beliefs about policies by computing expected free energy of each policy and integrating that
    with the prior over policies ``E``. This is intended to be used in conjunction
    with the ``update_posterior_states`` method of the ``inference`` module, since only the posterior about the hidden states at the current timestep
    ``qs`` is assumed to be provided, unconditional on policies. The predictive posterior over hidden states under all policies Q(s, pi) is computed 
    using the starting posterior about states at the current timestep ``qs`` and the generative model (e.g. ``A``, ``B``, ``C``)

    Parameters
    ----------
    qs: ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at current timepoint (unconditioned on policies)
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    C: ``numpy.ndarray`` of dtype object
       Prior over observations or 'prior preferences', storing the "value" of each outcome in terms of relative log probabilities. 
       This is softmaxed to form a proper probability distribution before being used to compute the expected utility term of the expected free energy.
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy in ``policies[p_idx]``. Shape of ``policies[p_idx]`` is ``(num_timesteps, num_factors)`` where `num_timesteps` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    use_utility: ``Bool``, default ``True``
        Boolean flag that determines whether expected utility should be incorporated into computation of EFE.
    use_states_info_gain: ``Bool``, default ``True``
        Boolean flag that determines whether state epistemic value (info gain about hidden states) should be incorporated into computation of EFE.
    use_param_info_gain: ``Bool``, default ``False`` 
        Boolean flag that determines whether parameter epistemic value (info gain about generative model parameters) should be incorporated into computation of EFE.
    pA: ``numpy.ndarray`` of dtype object, optional
        Dirichlet parameters over observation model (same shape as ``A``)
    pB: ``numpy.ndarray`` of dtype object, optional
        Dirichlet parameters over transition model (same shape as ``B``)
    E: 1D ``numpy.ndarray``, optional
        Vector of prior probabilities of each policy (what's referred to in the active inference literature as "habits")
    I: ``numpy.ndarray`` of dtype object
        For each state factor, contains a 2D ``numpy.ndarray`` whose element i,j yields the probability 
        of reaching the goal state backwards from state j after i steps.
    gamma: float, default 16.0
        Prior precision over policies, scales the contribution of the expected free energy to the posterior over policies

    Returns
    ----------
    q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
    G: 1D ``numpy.ndarray``
        Negative expected free energies of each policy, i.e. a vector containing one negative expected free energy per policy.""" ;
    code:function_exe_cmd "pymdp.control.update_posterior_policies()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L266" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_update_posterior_policies,
        code:Parameter_B_update_posterior_policies,
        code:Parameter_C_update_posterior_policies,
        code:Parameter_E_update_posterior_policies,
        code:Parameter_I_update_posterior_policies,
        code:Parameter_gamma_update_posterior_policies,
        code:Parameter_pA_update_posterior_policies,
        code:Parameter_pB_update_posterior_policies,
        code:Parameter_policies_update_posterior_policies,
        code:Parameter_qs_update_posterior_policies,
        code:Parameter_use_param_info_gain_update_posterior_policies,
        code:Parameter_use_states_info_gain_update_posterior_policies,
        code:Parameter_use_utility_update_posterior_policies ;
    code:isDocumented true ;
    code:name "update_posterior_policies" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_policies____pymdp_jax_control_py__update_posterior_policies a code:Function ;
    code:comments "policy --> n_levels_factor_f x 1, factor --> n_levels_factor_f x n_policies, # vmap across policies, only in the case of policy-dependent qs_inits, in_axes_list = (1,) * n_factors, all_efe_of_policies = vmap(compute_G_policy, in_axes=(in_axes_list, 0))(qs_init_pi, policy_matrix), policies needs to be an NDarray of shape (n_policies, n_timepoints, n_control_factors)" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.control.update_posterior_policies()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L143" ;
    code:hasInput code:Parameter_A_dependencies_update_posterior_policies,
        code:Parameter_A_update_posterior_policies,
        code:Parameter_B_dependencies_update_posterior_policies,
        code:Parameter_B_update_posterior_policies,
        code:Parameter_C_update_posterior_policies,
        code:Parameter_E_update_posterior_policies,
        code:Parameter_gamma_update_posterior_policies,
        code:Parameter_pA_update_posterior_policies,
        code:Parameter_pB_update_posterior_policies,
        code:Parameter_policy_matrix_update_posterior_policies,
        code:Parameter_qs_init_update_posterior_policies,
        code:Parameter_use_param_info_gain_update_posterior_policies,
        code:Parameter_use_states_info_gain_update_posterior_policies,
        code:Parameter_use_utility_update_posterior_policies ;
    code:isDocumented false ;
    code:name "update_posterior_policies" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_policies_factorized____pymdp_control_py__update_posterior_policies_factorized a code:Function ;
    code:complexity "Complexity: 9" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update posterior beliefs about policies by computing expected free energy of each policy and integrating that
    with the prior over policies ``E``. This is intended to be used in conjunction
    with the ``update_posterior_states`` method of the ``inference`` module, since only the posterior about the hidden states at the current timestep
    ``qs`` is assumed to be provided, unconditional on policies. The predictive posterior over hidden states under all policies Q(s, pi) is computed 
    using the starting posterior about states at the current timestep ``qs`` and the generative model (e.g. ``A``, ``B``, ``C``)

    Parameters
    ----------
    qs: ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at current timepoint (unconditioned on policies)
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    C: ``numpy.ndarray`` of dtype object
       Prior over observations or 'prior preferences', storing the "value" of each outcome in terms of relative log probabilities. 
       This is softmaxed to form a proper probability distribution before being used to compute the expected utility term of the expected free energy.
    A_factor_list: ``list`` of ``list``s of ``int``
        ``list`` that stores the indices of the hidden state factor indices that each observation modality depends on. For example, if ``A_factor_list[m] = [0, 1]``, then
        observation modality ``m`` depends on hidden state factors 0 and 1.
    B_factor_list: ``list`` of ``list``s of ``int``
        ``list`` that stores the indices of the hidden state factor indices that each hidden state factor depends on. For example, if ``B_factor_list[f] = [0, 1]``, then
        the transitions in hidden state factor ``f`` depend on hidden state factors 0 and 1.
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy in ``policies[p_idx]``. Shape of ``policies[p_idx]`` is ``(num_timesteps, num_factors)`` where `num_timesteps` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    use_utility: ``Bool``, default ``True``
        Boolean flag that determines whether expected utility should be incorporated into computation of EFE.
    use_states_info_gain: ``Bool``, default ``True``
        Boolean flag that determines whether state epistemic value (info gain about hidden states) should be incorporated into computation of EFE.
    use_param_info_gain: ``Bool``, default ``False`` 
        Boolean flag that determines whether parameter epistemic value (info gain about generative model parameters) should be incorporated into computation of EFE.
    pA: ``numpy.ndarray`` of dtype object, optional
        Dirichlet parameters over observation model (same shape as ``A``)
    pB: ``numpy.ndarray`` of dtype object, optional
        Dirichlet parameters over transition model (same shape as ``B``)
    E: 1D ``numpy.ndarray``, optional
        Vector of prior probabilities of each policy (what's referred to in the active inference literature as "habits")
    I: ``numpy.ndarray`` of dtype object
        For each state factor, contains a 2D ``numpy.ndarray`` whose element i,j yields the probability 
        of reaching the goal state backwards from state j after i steps.
    gamma: float, default 16.0
        Prior precision over policies, scales the contribution of the expected free energy to the posterior over policies

    Returns
    ----------
    q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
    G: 1D ``numpy.ndarray``
        Negative expected free energies of each policy, i.e. a vector containing one negative expected free energy per policy.""" ;
    code:function_exe_cmd "pymdp.control.update_posterior_policies_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L364" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_factor_list_update_posterior_policies_factorized,
        code:Parameter_A_update_posterior_policies_factorized,
        code:Parameter_B_factor_list_update_posterior_policies_factorized,
        code:Parameter_B_update_posterior_policies_factorized,
        code:Parameter_C_update_posterior_policies_factorized,
        code:Parameter_E_update_posterior_policies_factorized,
        code:Parameter_I_update_posterior_policies_factorized,
        code:Parameter_gamma_update_posterior_policies_factorized,
        code:Parameter_pA_update_posterior_policies_factorized,
        code:Parameter_pB_update_posterior_policies_factorized,
        code:Parameter_policies_update_posterior_policies_factorized,
        code:Parameter_qs_update_posterior_policies_factorized,
        code:Parameter_use_param_info_gain_update_posterior_policies_factorized,
        code:Parameter_use_states_info_gain_update_posterior_policies_factorized,
        code:Parameter_use_utility_update_posterior_policies_factorized ;
    code:isDocumented true ;
    code:name "update_posterior_policies_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_policies_full____pymdp_control_py__update_posterior_policies_full a code:Function ;
    code:comments "initialise expected observations, initialize (negative) expected free energies for all policies" ;
    code:complexity "Complexity: 12" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update posterior beliefs about policies by computing expected free energy of each policy and integrating that
    with the variational free energy of policies ``F`` and prior over policies ``E``. This is intended to be used in conjunction
    with the ``update_posterior_states_full`` method of ``inference.py``, since the full posterior over future timesteps, under all policies, is
    assumed to be provided in the input array ``qs_seq_pi``.

    Parameters
    ----------
    qs_seq_pi: ``numpy.ndarray`` of dtype object
        Posterior beliefs over hidden states for each policy. Nesting structure is policies, timepoints, factors,
        where e.g. ``qs_seq_pi[p][t][f]`` stores the marginal belief about factor ``f`` at timepoint ``t`` under policy ``p``.
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    C: ``numpy.ndarray`` of dtype object
       Prior over observations or 'prior preferences', storing the "value" of each outcome in terms of relative log probabilities. 
       This is softmaxed to form a proper probability distribution before being used to compute the expected utility term of the expected free energy.
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy in ``policies[p_idx]``. Shape of ``policies[p_idx]`` is ``(num_timesteps, num_factors)`` where `num_timesteps` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    use_utility: ``Bool``, default ``True``
        Boolean flag that determines whether expected utility should be incorporated into computation of EFE.
    use_states_info_gain: ``Bool``, default ``True``
        Boolean flag that determines whether state epistemic value (info gain about hidden states) should be incorporated into computation of EFE.
    use_param_info_gain: ``Bool``, default ``False`` 
        Boolean flag that determines whether parameter epistemic value (info gain about generative model parameters) should be incorporated into computation of EFE. 
    prior: ``numpy.ndarray`` of dtype object, default ``None``
        If provided, this is a ``numpy`` object array with one sub-array per hidden state factor, that stores the prior beliefs about initial states. 
        If ``None``, this defaults to a flat (uninformative) prior over hidden states.
    pA: ``numpy.ndarray`` of dtype object, default ``None``
        Dirichlet parameters over observation model (same shape as ``A``)
    pB: ``numpy.ndarray`` of dtype object, default ``None``
        Dirichlet parameters over transition model (same shape as ``B``)
    F: 1D ``numpy.ndarray``, default ``None``
        Vector of variational free energies for each policy
    E: 1D ``numpy.ndarray``, default ``None``
        Vector of prior probabilities of each policy (what's referred to in the active inference literature as "habits"). If ``None``, this defaults to a flat (uninformative) prior over policies.
    I: ``numpy.ndarray`` of dtype object
        For each state factor, contains a 2D ``numpy.ndarray`` whose element i,j yields the probability 
        of reaching the goal state backwards from state j after i steps.
    gamma: ``float``, default 16.0
        Prior precision over policies, scales the contribution of the expected free energy to the posterior over policies

    Returns
    ----------
    q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
    G: 1D ``numpy.ndarray``
        Negative expected free energies of each policy, i.e. a vector containing one negative expected free energy per policy.""" ;
    code:function_exe_cmd "pymdp.control.update_posterior_policies_full()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L13" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_update_posterior_policies_full,
        code:Parameter_B_update_posterior_policies_full,
        code:Parameter_C_update_posterior_policies_full,
        code:Parameter_E_update_posterior_policies_full,
        code:Parameter_F_update_posterior_policies_full,
        code:Parameter_I_update_posterior_policies_full,
        code:Parameter_gamma_update_posterior_policies_full,
        code:Parameter_pA_update_posterior_policies_full,
        code:Parameter_pB_update_posterior_policies_full,
        code:Parameter_policies_update_posterior_policies_full,
        code:Parameter_prior_update_posterior_policies_full,
        code:Parameter_qs_seq_pi_update_posterior_policies_full,
        code:Parameter_use_param_info_gain_update_posterior_policies_full,
        code:Parameter_use_states_info_gain_update_posterior_policies_full,
        code:Parameter_use_utility_update_posterior_policies_full ;
    code:isDocumented true ;
    code:name "update_posterior_policies_full" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_policies_full_factorized____pymdp_control_py__update_posterior_policies_full_factorized a code:Function ;
    code:comments "initialise expected observations, initialize (negative) expected free energies for all policies" ;
    code:complexity "Complexity: 12" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update posterior beliefs about policies by computing expected free energy of each policy and integrating that
    with the variational free energy of policies ``F`` and prior over policies ``E``. This is intended to be used in conjunction
    with the ``update_posterior_states_full`` method of ``inference.py``, since the full posterior over future timesteps, under all policies, is
    assumed to be provided in the input array ``qs_seq_pi``.

    Parameters
    ----------
    qs_seq_pi: ``numpy.ndarray`` of dtype object
        Posterior beliefs over hidden states for each policy. Nesting structure is policies, timepoints, factors,
        where e.g. ``qs_seq_pi[p][t][f]`` stores the marginal belief about factor ``f`` at timepoint ``t`` under policy ``p``.
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    C: ``numpy.ndarray`` of dtype object
       Prior over observations or 'prior preferences', storing the "value" of each outcome in terms of relative log probabilities. 
       This is softmaxed to form a proper probability distribution before being used to compute the expected utility term of the expected free energy.
    A_factor_list: ``list`` of ``list``s of ``int``
        ``list`` that stores the indices of the hidden state factor indices that each observation modality depends on. For example, if ``A_factor_list[m] = [0, 1]``, then
        observation modality ``m`` depends on hidden state factors 0 and 1.
    B_factor_list: ``list`` of ``list``s of ``int``
        ``list`` that stores the indices of the hidden state factor indices that each hidden state factor depends on. For example, if ``B_factor_list[f] = [0, 1]``, then
        the transitions in hidden state factor ``f`` depend on hidden state factors 0 and 1.
    policies: ``list`` of 2D ``numpy.ndarray``
        ``list`` that stores each policy in ``policies[p_idx]``. Shape of ``policies[p_idx]`` is ``(num_timesteps, num_factors)`` where `num_timesteps` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    use_utility: ``Bool``, default ``True``
        Boolean flag that determines whether expected utility should be incorporated into computation of EFE.
    use_states_info_gain: ``Bool``, default ``True``
        Boolean flag that determines whether state epistemic value (info gain about hidden states) should be incorporated into computation of EFE.
    use_param_info_gain: ``Bool``, default ``False`` 
        Boolean flag that determines whether parameter epistemic value (info gain about generative model parameters) should be incorporated into computation of EFE. 
    prior: ``numpy.ndarray`` of dtype object, default ``None``
        If provided, this is a ``numpy`` object array with one sub-array per hidden state factor, that stores the prior beliefs about initial states. 
        If ``None``, this defaults to a flat (uninformative) prior over hidden states.
    pA: ``numpy.ndarray`` of dtype object, default ``None``
        Dirichlet parameters over observation model (same shape as ``A``)
    pB: ``numpy.ndarray`` of dtype object, default ``None``
        Dirichlet parameters over transition model (same shape as ``B``)
    F: 1D ``numpy.ndarray``, default ``None``
        Vector of variational free energies for each policy
    E: 1D ``numpy.ndarray``, default ``None``
        Vector of prior probabilities of each policy (what's referred to in the active inference literature as "habits"). If ``None``, this defaults to a flat (uninformative) prior over policies.
    I: ``numpy.ndarray`` of dtype object
        For each state factor, contains a 2D ``numpy.ndarray`` whose element i,j yields the probability 
        of reaching the goal state backwards from state j after i steps.
    gamma: ``float``, default 16.0
        Prior precision over policies, scales the contribution of the expected free energy to the posterior over policies

    Returns
    ----------
    q_pi: 1D ``numpy.ndarray``
        Posterior beliefs over policies, i.e. a vector containing one posterior probability per policy.
    G: 1D ``numpy.ndarray``
        Negative expected free energies of each policy, i.e. a vector containing one negative expected free energy per policy.""" ;
    code:function_exe_cmd "pymdp.control.update_posterior_policies_full_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/control.py#L135" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_factor_list_update_posterior_policies_full_factorized,
        code:Parameter_A_update_posterior_policies_full_factorized,
        code:Parameter_B_factor_list_update_posterior_policies_full_factorized,
        code:Parameter_B_update_posterior_policies_full_factorized,
        code:Parameter_C_update_posterior_policies_full_factorized,
        code:Parameter_E_update_posterior_policies_full_factorized,
        code:Parameter_F_update_posterior_policies_full_factorized,
        code:Parameter_I_update_posterior_policies_full_factorized,
        code:Parameter_gamma_update_posterior_policies_full_factorized,
        code:Parameter_pA_update_posterior_policies_full_factorized,
        code:Parameter_pB_update_posterior_policies_full_factorized,
        code:Parameter_policies_update_posterior_policies_full_factorized,
        code:Parameter_prior_update_posterior_policies_full_factorized,
        code:Parameter_qs_seq_pi_update_posterior_policies_full_factorized,
        code:Parameter_use_param_info_gain_update_posterior_policies_full_factorized,
        code:Parameter_use_states_info_gain_update_posterior_policies_full_factorized,
        code:Parameter_use_utility_update_posterior_policies_full_factorized ;
    code:isDocumented true ;
    code:name "update_posterior_policies_full_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_policies_inductive____pymdp_jax_control_py__update_posterior_policies_inductive a code:Function ;
    code:comments "policy --> n_levels_factor_f x 1, factor --> n_levels_factor_f x n_policies, # vmap across policies, only in the case of policy-dependent qs_inits, in_axes_list = (1,) * n_factors, all_efe_of_policies = vmap(compute_G_policy, in_axes=(in_axes_list, 0))(qs_init_pi, policy_matrix), policies needs to be an NDarray of shape (n_policies, n_timepoints, n_control_factors)" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.control.update_posterior_policies_inductive()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/control.py#L354" ;
    code:hasInput code:Parameter_A_dependencies_update_posterior_policies_inductive,
        code:Parameter_A_update_posterior_policies_inductive,
        code:Parameter_B_dependencies_update_posterior_policies_inductive,
        code:Parameter_B_update_posterior_policies_inductive,
        code:Parameter_C_update_posterior_policies_inductive,
        code:Parameter_E_update_posterior_policies_inductive,
        code:Parameter_I_update_posterior_policies_inductive,
        code:Parameter_gamma_update_posterior_policies_inductive,
        code:Parameter_inductive_epsilon_update_posterior_policies_inductive,
        code:Parameter_pA_update_posterior_policies_inductive,
        code:Parameter_pB_update_posterior_policies_inductive,
        code:Parameter_policy_matrix_update_posterior_policies_inductive,
        code:Parameter_qs_init_update_posterior_policies_inductive,
        code:Parameter_use_inductive_update_posterior_policies_inductive,
        code:Parameter_use_param_info_gain_update_posterior_policies_inductive,
        code:Parameter_use_states_info_gain_update_posterior_policies_inductive,
        code:Parameter_use_utility_update_posterior_policies_inductive ;
    code:isDocumented false ;
    code:name "update_posterior_policies_inductive" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_states____pymdp_inference_py__update_posterior_states a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update marginal posterior over hidden states using mean-field fixed point iteration 
    FPI or Fixed point iteration. 

    See the following links for details:
    http://www.cs.cmu.edu/~guestrin/Class/10708/recitations/r9/VI-view.pdf, slides 13- 18, and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.137.221&rep=rep1&type=pdf, slides 24 - 38.

    Parameters
    ----------
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``np.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    obs: 1D ``numpy.ndarray``, ``numpy.ndarray`` of dtype object, int or tuple
        The observation (generated by the environment). If single modality, this can be a 1D ``np.ndarray``
        (one-hot vector representation) or an ``int`` (observation index)
        If multi-modality, this can be ``np.ndarray`` of dtype object whose entries are 1D one-hot vectors,
        or a tuple (of ``int``)
    prior: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object, default None
        Prior beliefs about hidden states, to be integrated with the marginal likelihood to obtain
        a posterior distribution. If not provided, prior is set to be equal to a flat categorical distribution (at the level of
        the individual inference functions).
    **kwargs: keyword arguments 
        List of keyword/parameter arguments corresponding to parameter values for the fixed-point iteration
        algorithm ``algos.fpi.run_vanilla_fpi.py``

    Returns
    ----------
    qs: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at current timepoint""" ;
    code:function_exe_cmd "pymdp.inference.update_posterior_states()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/inference.py#L282" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_update_posterior_states,
        code:Parameter_obs_update_posterior_states,
        code:Parameter_prior_update_posterior_states ;
    code:isDocumented true ;
    code:name "update_posterior_states" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_states____pymdp_jax_inference_py__update_posterior_states a code:Function ;
    code:comments "format obs to select only last observation, format B matrices using action sequences here, TODO: past_actions can be None, move time steps to the leading axis (leftmost), this assumes that a policy is always specified as the rightmost axis of Bs, outputs of both VMP and MMP should be a list of hidden state factors, where each qs[f].shape = (T, batch_dim, num_states_f), TODO: return entire history of beliefs" ;
    code:complexity "Complexity: 14" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.inference.update_posterior_states()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/inference.py#L14" ;
    code:hasInput code:Parameter_A_dependencies_update_posterior_states,
        code:Parameter_A_update_posterior_states,
        code:Parameter_B_dependencies_update_posterior_states,
        code:Parameter_B_update_posterior_states,
        code:Parameter_method_update_posterior_states,
        code:Parameter_num_iter_update_posterior_states,
        code:Parameter_obs_update_posterior_states,
        code:Parameter_past_actions_update_posterior_states,
        code:Parameter_prior_update_posterior_states,
        code:Parameter_qs_hist_update_posterior_states ;
    code:isDocumented false ;
    code:name "update_posterior_states" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_states_factorized____pymdp_inference_py__update_posterior_states_factorized a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update marginal posterior over hidden states using mean-field fixed point iteration 
    FPI or Fixed point iteration. This version identifies the Markov blanket of each factor using `A_factor_list`

    See the following links for details:
    http://www.cs.cmu.edu/~guestrin/Class/10708/recitations/r9/VI-view.pdf, slides 13- 18, and http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.137.221&rep=rep1&type=pdf, slides 24 - 38.

    Parameters
    ----------
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``np.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    obs: 1D ``numpy.ndarray``, ``numpy.ndarray`` of dtype object, int or tuple
        The observation (generated by the environment). If single modality, this can be a 1D ``np.ndarray``
        (one-hot vector representation) or an ``int`` (observation index)
        If multi-modality, this can be ``np.ndarray`` of dtype object whose entries are 1D one-hot vectors,
        or a tuple (of ``int``)
    num_obs: ``list`` of ``int``
        List of dimensionalities of each observation modality
    num_states: ``list`` of ``int``
        List of dimensionalities of each hidden state factor
    mb_dict: ``Dict``
        Dictionary with two keys (``A_factor_list`` and ``A_modality_list``), that stores the factor indices that influence each modality (``A_factor_list``)
        and the modality indices influenced by each factor (``A_modality_list``).
    prior: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object, default None
        Prior beliefs about hidden states, to be integrated with the marginal likelihood to obtain
        a posterior distribution. If not provided, prior is set to be equal to a flat categorical distribution (at the level of
        the individual inference functions).
    **kwargs: keyword arguments 
        List of keyword/parameter arguments corresponding to parameter values for the fixed-point iteration
        algorithm ``algos.fpi.run_vanilla_fpi.py``

    Returns
    ----------
    qs: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at current timepoint""" ;
    code:function_exe_cmd "pymdp.inference.update_posterior_states_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/inference.py#L324" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_update_posterior_states_factorized,
        code:Parameter_mb_dict_update_posterior_states_factorized,
        code:Parameter_num_obs_update_posterior_states_factorized,
        code:Parameter_num_states_update_posterior_states_factorized,
        code:Parameter_obs_update_posterior_states_factorized,
        code:Parameter_prior_update_posterior_states_factorized ;
    code:isDocumented true ;
    code:name "update_posterior_states_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_states_full____pymdp_inference_py__update_posterior_states_full a code:Function ;
    code:comments "variational free energy of policies, get sequence and the free energy for policy" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update posterior over hidden states using marginal message passing

    Parameters
    ----------
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    prev_obs: ``list``
        List of observations over time. Each observation in the list can be an ``int``, a ``list`` of ints, a ``tuple`` of ints, a one-hot vector or an object array of one-hot vectors.
    policies: ``list`` of 2D ``numpy.ndarray``
        List that stores each policy in ``policies[p_idx]``. Shape of ``policies[p_idx]`` is ``(num_timesteps, num_factors)`` where `num_timesteps` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    prior: ``numpy.ndarray`` of dtype object, default ``None``
        If provided, this a ``numpy.ndarray`` of dtype object, with one sub-array per hidden state factor, that stores the prior beliefs about initial states. 
        If ``None``, this defaults to a flat (uninformative) prior over hidden states.
    policy_sep_prior: ``Bool``, default ``True``
        Flag determining whether the prior beliefs from the past are unconditioned on policy, or separated by /conditioned on the policy variable.
    **kwargs: keyword arguments
        Optional keyword arguments for the function ``algos.mmp.run_mmp``

    Returns
    ---------
    qs_seq_pi: ``numpy.ndarray`` of dtype object
        Posterior beliefs over hidden states for each policy. Nesting structure is policies, timepoints, factors,
        where e.g. ``qs_seq_pi[p][t][f]`` stores the marginal belief about factor ``f`` at timepoint ``t`` under policy ``p``.
    F: 1D ``numpy.ndarray``
        Vector of variational free energies for each policy""" ;
    code:function_exe_cmd "pymdp.inference.update_posterior_states_full()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/inference.py#L18" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_update_posterior_states_full,
        code:Parameter_B_update_posterior_states_full,
        code:Parameter_policies_update_posterior_states_full,
        code:Parameter_policy_sep_prior_update_posterior_states_full,
        code:Parameter_prev_actions_update_posterior_states_full,
        code:Parameter_prev_obs_update_posterior_states_full,
        code:Parameter_prior_update_posterior_states_full ;
    code:isDocumented true ;
    code:name "update_posterior_states_full" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_posterior_states_full_factorized____pymdp_inference_py__update_posterior_states_full_factorized a code:Function ;
    code:comments "variational free energy of policies, get sequence and the free energy for policy" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update posterior over hidden states using marginal message passing

    Parameters
    ----------
    A: ``numpy.ndarray`` of dtype object
        Sensory likelihood mapping or 'observation model', mapping from hidden states to observations. Each element ``A[m]`` of
        stores an ``numpy.ndarray`` multidimensional array for observation modality ``m``, whose entries ``A[m][i, j, k, ...]`` store 
        the probability of observation level ``i`` given hidden state levels ``j, k, ...``
    mb_dict: ``Dict``
        Dictionary with two keys (``A_factor_list`` and ``A_modality_list``), that stores the factor indices that influence each modality (``A_factor_list``)
        and the modality indices influenced by each factor (``A_modality_list``).
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    B_factor_list: ``list`` of ``list`` of ``int``
        List of lists of hidden state factors each hidden state factor depends on. Each element ``B_factor_list[i]`` is a list of the factor indices that factor i's dynamics depend on.
    prev_obs: ``list``
        List of observations over time. Each observation in the list can be an ``int``, a ``list`` of ints, a ``tuple`` of ints, a one-hot vector or an object array of one-hot vectors.
    policies: ``list`` of 2D ``numpy.ndarray``
        List that stores each policy in ``policies[p_idx]``. Shape of ``policies[p_idx]`` is ``(num_timesteps, num_factors)`` where `num_timesteps` is the temporal
        depth of the policy and ``num_factors`` is the number of control factors.
    prior: ``numpy.ndarray`` of dtype object, default ``None``
        If provided, this a ``numpy.ndarray`` of dtype object, with one sub-array per hidden state factor, that stores the prior beliefs about initial states. 
        If ``None``, this defaults to a flat (uninformative) prior over hidden states.
    policy_sep_prior: ``Bool``, default ``True``
        Flag determining whether the prior beliefs from the past are unconditioned on policy, or separated by /conditioned on the policy variable.
    **kwargs: keyword arguments
        Optional keyword arguments for the function ``algos.mmp.run_mmp``

    Returns
    ---------
    qs_seq_pi: ``numpy.ndarray`` of dtype object
        Posterior beliefs over hidden states for each policy. Nesting structure is policies, timepoints, factors,
        where e.g. ``qs_seq_pi[p][t][f]`` stores the marginal belief about factor ``f`` at timepoint ``t`` under policy ``p``.
    F: 1D ``numpy.ndarray``
        Vector of variational free energies for each policy""" ;
    code:function_exe_cmd "pymdp.inference.update_posterior_states_full_factorized()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/inference.py#L89" ;
    code:hasImport code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_A_update_posterior_states_full_factorized,
        code:Parameter_B_factor_list_update_posterior_states_full_factorized,
        code:Parameter_B_update_posterior_states_full_factorized,
        code:Parameter_mb_dict_update_posterior_states_full_factorized,
        code:Parameter_policies_update_posterior_states_full_factorized,
        code:Parameter_policy_sep_prior_update_posterior_states_full_factorized,
        code:Parameter_prev_actions_update_posterior_states_full_factorized,
        code:Parameter_prev_obs_update_posterior_states_full_factorized,
        code:Parameter_prior_update_posterior_states_full_factorized ;
    code:isDocumented true ;
    code:name "update_posterior_states_full_factorized" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_state_likelihood_dirichlet____pymdp_learning_py__update_state_likelihood_dirichlet a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update Dirichlet parameters of the transition distribution. 

    Parameters
    -----------
    pB: ``numpy.ndarray`` of dtype object
        Prior Dirichlet parameters over transition model (same shape as ``B``)
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    actions: 1D ``numpy.ndarray``
        A vector with length equal to the number of control factors, where each element contains the index of the action (for that control factor) performed at 
        a given timestep.
    qs: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at current timepoint.
    qs_prev: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at previous timepoint.
    lr: float, default ``1.0``
        Learning rate, scale of the Dirichlet pseudo-count update.
    factors: ``list``, default "all"
        Indices (ranging from 0 to ``n_factors - 1``) of the hidden state factors to include 
        in learning. Defaults to "all", meaning that factor-specific sub-arrays of ``pB``
        are all updated using the corresponding hidden state distributions and actions.

    Returns
    -----------
    qB: ``numpy.ndarray`` of dtype object
        Posterior Dirichlet parameters over transition model (same shape as ``B``), after having updated it with state beliefs and actions.""" ;
    code:function_exe_cmd "pymdp.learning.update_state_likelihood_dirichlet()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/learning.py#L113" ;
    code:hasImport code:Function_import_copy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_B_update_state_likelihood_dirichlet,
        code:Parameter_actions_update_state_likelihood_dirichlet,
        code:Parameter_factors_update_state_likelihood_dirichlet,
        code:Parameter_lr_update_state_likelihood_dirichlet,
        code:Parameter_pB_update_state_likelihood_dirichlet,
        code:Parameter_qs_prev_update_state_likelihood_dirichlet,
        code:Parameter_qs_update_state_likelihood_dirichlet ;
    code:isDocumented true ;
    code:name "update_state_likelihood_dirichlet" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_state_likelihood_dirichlet_interactions____pymdp_learning_py__update_state_likelihood_dirichlet_interactions a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update Dirichlet parameters of the transition distribution, in the case when 'interacting' hidden state factors are present, i.e.
    the dynamics of a given hidden state factor `f` are no longer independent of the dynamics of other hidden state factors.

    Parameters
    -----------
    pB: ``numpy.ndarray`` of dtype object
        Prior Dirichlet parameters over transition model (same shape as ``B``)
    B: ``numpy.ndarray`` of dtype object
        Dynamics likelihood mapping or 'transition model', mapping from hidden states at ``t`` to hidden states at ``t+1``, given some control state ``u``.
        Each element ``B[f]`` of this object array stores a 3-D tensor for hidden state factor ``f``, whose entries ``B[f][s, v, u]`` store the probability
        of hidden state level ``s`` at the current time, given hidden state level ``v`` and action ``u`` at the previous time.
    actions: 1D ``numpy.ndarray``
        A vector with length equal to the number of control factors, where each element contains the index of the action (for that control factor) performed at 
        a given timestep.
    qs: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at current timepoint.
    qs_prev: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at previous timepoint.
    B_factor_list: ``list`` of ``list`` of ``int``
        A list of lists, where each element ``B_factor_list[f]`` is a list of indices of hidden state factors that that are needed to predict the dynamics of hidden state factor ``f``.
    lr: float, default ``1.0``
        Learning rate, scale of the Dirichlet pseudo-count update.
    factors: ``list``, default "all"
        Indices (ranging from 0 to ``n_factors - 1``) of the hidden state factors to include 
        in learning. Defaults to "all", meaning that factor-specific sub-arrays of ``pB``
        are all updated using the corresponding hidden state distributions and actions.

    Returns
    -----------
    qB: ``numpy.ndarray`` of dtype object
        Posterior Dirichlet parameters over transition model (same shape as ``B``), after having updated it with state beliefs and actions.""" ;
    code:function_exe_cmd "pymdp.learning.update_state_likelihood_dirichlet_interactions()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/learning.py#L161" ;
    code:hasImport code:Function_import_copy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_B_factor_list_update_state_likelihood_dirichlet_interactions,
        code:Parameter_B_update_state_likelihood_dirichlet_interactions,
        code:Parameter_actions_update_state_likelihood_dirichlet_interactions,
        code:Parameter_factors_update_state_likelihood_dirichlet_interactions,
        code:Parameter_lr_update_state_likelihood_dirichlet_interactions,
        code:Parameter_pB_update_state_likelihood_dirichlet_interactions,
        code:Parameter_qs_prev_update_state_likelihood_dirichlet_interactions,
        code:Parameter_qs_update_state_likelihood_dirichlet_interactions ;
    code:isDocumented true ;
    code:name "update_state_likelihood_dirichlet_interactions" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_state_prior_dirichlet____pymdp_learning_py__update_state_prior_dirichlet a code:Function ;
    code:comments "only update those state level indices that have some prior probability" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Update Dirichlet parameters of the initial hidden state distribution 
    (prior beliefs about hidden states at the beginning of the inference window).

    Parameters
    -----------
    pD: ``numpy.ndarray`` of dtype object
        Prior Dirichlet parameters over initial hidden state prior (same shape as ``qs``)
    qs: 1D ``numpy.ndarray`` or ``numpy.ndarray`` of dtype object
        Marginal posterior beliefs over hidden states at current timepoint
    lr: float, default ``1.0``
        Learning rate, scale of the Dirichlet pseudo-count update.
    factors: ``list``, default "all"
        Indices (ranging from 0 to ``n_factors - 1``) of the hidden state factors to include 
        in learning. Defaults to "all", meaning that factor-specific sub-vectors of ``pD``
        are all updated using the corresponding hidden state distributions.

    Returns
    -----------
    qD: ``numpy.ndarray`` of dtype object
        Posterior Dirichlet parameters over initial hidden state prior (same shape as ``qs``), after having updated it with state beliefs.""" ;
    code:function_exe_cmd "pymdp.learning.update_state_prior_dirichlet()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/learning.py#L212" ;
    code:hasImport code:Function_import_copy,
        code:Function_import_numpy_as_np ;
    code:hasInput code:Parameter_factors_update_state_prior_dirichlet,
        code:Parameter_lr_update_state_prior_dirichlet,
        code:Parameter_pD_update_state_prior_dirichlet,
        code:Parameter_qs_update_state_prior_dirichlet ;
    code:isDocumented true ;
    code:name "update_state_prior_dirichlet" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_state_transition_dirichlet____pymdp_jax_learning_py__update_state_transition_dirichlet a code:Function ;
    code:complexity "Complexity: 3" ;
    code:dependsOn code:Function_pymdp_jax_learning_update_state_transition_dirichlet_f\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.learning.update_state_transition_dirichlet()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/learning.py#L79" ;
    code:hasInput code:Parameter_B_update_state_transition_dirichlet,
        code:Parameter_actions_update_state_transition_dirichlet,
        code:Parameter_joint_beliefs_update_state_transition_dirichlet,
        code:Parameter_pB_update_state_transition_dirichlet ;
    code:isDocumented false ;
    code:name "update_state_transition_dirichlet" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_state_transition_dirichlet_f____pymdp_jax_learning_py__update_state_transition_dirichlet_f a code:Function ;
    code:comments "pB_f - parameters of the dirichlet from the prior, pB_f.shape = (num_states[f] x num_states[f] x num_actions[f]) where f is the index of the hidden state factor, \\alpha^{*} = \\alpha_{0} + \\kappa * \\sum_{t=t_begin}^{t=T} \\mathbf{s}_{f, t} \\otimes \\mathbf{s}_{f, t-1} \\otimes \\mathbf{a}_{f, t-1}, \\alpha^{*} is the VFE-minimizing solution for the parameters of q(B), \\alpha_{0} are the Dirichlet parameters of p(B), \\mathbf{s}_{f, t} = categorical parameters of marginal posteriors over hidden state factor f, at time t, \\mathbf{a}_{f, t-1} = categorical parameters of marginal posteriors over control factor f, at time t-1, \\otimes is a multidimensional outer product, not just a outer product of two vectors, \\kappa is an optional learning rate" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "JAX version of ``pymdp.learning.update_state_likelihood_dirichlet_f``" ;
    code:function_exe_cmd "pymdp.jax.learning.update_state_transition_dirichlet_f()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/learning.py#L59" ;
    code:hasInput code:Parameter_actions_f_update_state_transition_dirichlet_f,
        code:Parameter_joint_qs_f_update_state_transition_dirichlet_f,
        code:Parameter_lr_update_state_transition_dirichlet_f,
        code:Parameter_pB_f_update_state_transition_dirichlet_f ;
    code:isDocumented true ;
    code:name "update_state_transition_dirichlet_f" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_update_variational_filtering____pymdp_jax_algos_py__update_variational_filtering a code:Function ;
    code:comments "mapping over batch dimension, mapping over time dimension of obs array, this gives a sequence of log-likelihoods (one for each `t`), get q_T(s_t), p_T(s_{t+1}) and the history q_{T}(s_{t}|s_{t+1})q_{T-1}(s_{t-1}|s_{t}) ..." ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_algos_variational_filtering_step\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Online variational filtering belief update that uses a sparse dependency matrix for A" ;
    code:function_exe_cmd "pymdp.jax.algos.update_variational_filtering()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L179" ;
    code:hasInput code:Parameter_A_dependencies_update_variational_filtering,
        code:Parameter_A_update_variational_filtering,
        code:Parameter_B_update_variational_filtering,
        code:Parameter_obs_update_variational_filtering,
        code:Parameter_prior_update_variational_filtering ;
    code:isDocumented true ;
    code:name "update_variational_filtering" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Function_variational_filtering_step____pymdp_jax_algos_py__variational_filtering_step a code:Function ;
    code:comments "TODO: put this inside scan, ###, compute posterior q(z_t) -> n x 1 x d, ###, compute prediction p(z_{t+1}) = \\int p(z_{t+1}|z_t) q(z_t) -> n x d x 1, compute reverse conditional distribution q(z_t|z_{t+1})" ;
    code:complexity "Complexity: 1" ;
    code:dependsOn code:Function_pymdp_jax_algos_all_marginal_log_likelihood\(\) ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "pymdp.jax.algos.variational_filtering_step()" ;
    code:function_url "https://github.com/infer-actively/pymdp/blob/master/pymdp/jax/algos.py#L150" ;
    code:hasInput code:Parameter_A_dependencies_variational_filtering_step,
        code:Parameter_Bs_variational_filtering_step,
        code:Parameter_ln_As_variational_filtering_step,
        code:Parameter_prior_variational_filtering_step ;
    code:isDocumented false ;
    code:name "variational_filtering_step" ;
    code:package "pytest>=6.2.1, jax>=0.3.4, sphinx-rtd-theme>=0.4, jaxlib>=0.3.4, packaging>=20.8, iniconfig>=1.1.1, multimethod>=1.11, matplotlib>=3.1.3, nose>=1.3.7, jupyter-sphinx>=0.3.2, python-dateutil>=2.8.1, pluggy>=0.13.1, seaborn, pyparsing>=2.4.7, autograd>=1.3, optax>=0.1, kiwisolver>=1.3.1, sphinx==4.2.0, sphinx_rtd_theme, numpy>=1.19.5, arviz>=0.13, six>=1.15.0, equinox>=0.9, numpyro>=0.1, myst-nb, openpyxl>=3.0.7, matplotlib, Pillow>=8.2.0, jinja2==3.0.0, xlsxwriter>=1.4.3, attrs>=20.3.0, scipy>=1.6.0, seaborn>=0.11.1, numpy, myst-nb>=0.13.1, toml>=0.10.2, pytz>=2020.5, py>=1.10.0, cycler>=0.10.0, typing-extensions>=3.7.4.3, sphinx-autodoc-typehints==1.11.1" .

code:Tests_generate_model_params____test_test_control_jax_py__generate_model_params a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Generate random model dimensions" ;
    code:function_exe_cmd "test.test_control_jax.generate_model_params()" ;
    code:isDocumented true ;
    code:name "generate_model_params" .

code:Tests_make_A_full____test_test_message_passing_jax_py__make_A_full a code:Function ;
    code:comments "initialize the full likelihood tensor (ALL modalities might depend on ALL factors), indices of all hidden state factors, Step 1. Extract the list of the factors that modality `m` does NOT depend on, Step 2. broadcast or tile the reduced A matrix (`A_reduced`) along the dimensions of corresponding to `non_dependent_factors`, to give it the full shape of `(num_obs[m], *num_states)`" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Given a reduced A matrix, `A_reduced`, and a list of dependencies between hidden state factors and observation modalities, `A_dependencies`,
    return a full A matrix, `A_full`, where `A_full[m]` is the full A matrix for modality `m`. This means all redundant conditional independencies
    between observation modalities `m` and all hidden state factors (i.e. `range(len(num_states))`) are represented as lagging dimensions in `A_full`.""" ;
    code:function_exe_cmd "test.test_message_passing_jax.make_A_full(A_reduced, A_dependencies, num_obs, num_states)" ;
    code:hasInput code:Parameter_A_dependencies_make_A_full,
        code:Parameter_A_reduced_make_A_full,
        code:Parameter_num_obs_make_A_full,
        code:Parameter_num_states_make_A_full ;
    code:hasOutput code:Parameter_output_make_A_full ;
    code:isDocumented true ;
    code:name "make_A_full" .

code:Tests_make_model_configs____test_test_message_passing_jax_py__make_model_configs a code:Function ;
    code:comments "list of total numbers of hidden state factors per model, this is the number of factors that each modality depends on, this is the number of factors that each factor depends on" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "test.test_message_passing_jax.make_model_configs(source_seed, num_models)" ;
    code:hasInput code:Parameter_num_models_make_model_configs,
        code:Parameter_source_seed_make_model_configs ;
    code:hasOutput code:Parameter_output_make_model_configs ;
    code:isDocumented false ;
    code:name "make_model_configs" .

code:Tests_test_BMR_SPM_a____test_test_SPM_validation_py__test_BMR_SPM_a a code:Function ;
    code:comments "create BMR example from MATLAB" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Validate output of pymdp's `dirichlet_log_evidence` function 
        against output of `spm_MDP_log_evidence` from DEM in SPM (MATLAB)
        Test `a` tests the log evidence calculations across for a single
        reduced model, stored in a vector `r_dir`""" ;
    code:function_exe_cmd "test.test_SPM_validation.TestSPM.test_BMR_SPM_a(self)" ;
    code:hasInput code:Parameter_self_test_BMR_SPM_a ;
    code:isDocumented true ;
    code:name "test_BMR_SPM_a" .

code:Tests_test_BMR_SPM_b____test_test_SPM_validation_py__test_BMR_SPM_b a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Validate output of pymdp's `dirichlet_log_evidence` function 
        against output of `spm_MDP_log_evidence` from DEM in SPM (MATLAB). 
        Test `b` vectorizes the log evidence calculations across a _matrix_ of 
        reduced models, with one reduced model prior per column of the argument `r_dir`""" ;
    code:function_exe_cmd "test.test_SPM_validation.TestSPM.test_BMR_SPM_b(self)" ;
    code:hasInput code:Parameter_self_test_BMR_SPM_b ;
    code:isDocumented true ;
    code:name "test_BMR_SPM_b" .

code:Tests_test_actinfloop_factorized____test_test_agent_py__test_actinfloop_factorized a code:Function ;
    code:comments "need to have `save_belief_hist=True` for this to work" ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test that an instance of the `Agent` class can be initialized and run
        with the fully-factorized generative model functions (including policy inference)""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_actinfloop_factorized(self)" ;
    code:hasInput code:Parameter_self_test_actinfloop_factorized ;
    code:isDocumented true ;
    code:name "test_actinfloop_factorized" .

code:Tests_test_active_inference_SPM_1a____test_test_SPM_validation_py__test_active_inference_SPM_1a a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test against output of SPM_MDP_VB_X.m
        1A - one hidden state factor, one observation modality, backwards horizon = 3, policy_len = 1, policy-conditional prior""" ;
    code:function_exe_cmd "test.test_SPM_validation.TestSPM.test_active_inference_SPM_1a(self)" ;
    code:hasInput code:Parameter_self_test_active_inference_SPM_1a ;
    code:isDocumented true ;
    code:name "test_active_inference_SPM_1a" .

code:Tests_test_agent_demo____test_test_demos_py__test_agent_demo a code:Function ;
    code:comments "transition/observation matrices characterising the generative process, initial state, number of timesteps in the simulation, initial observation -- no evidence for which arm is rewarding, neutral reward observation, and see themselves in the starting state, initial (true) state -- the reward condition is highly rewarding, and the true position in the 'start' position, update agent, update environment" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """This unit test runs a more concise version of the
        code in the `agent_demo.ipynb` tutorial Jupyter notebook and the `agent_demo` Python script 
        to make sure the code works whenever we change something.""" ;
    code:function_exe_cmd "test.test_demos.TestDemos.test_agent_demo(self)" ;
    code:hasInput code:Parameter_self_test_agent_demo ;
    code:isDocumented true ;
    code:name "test_agent_demo" .

code:Tests_test_agent_distributional_obs____test_test_agent_py__test_agent_distributional_obs a code:Function ;
    code:comments "use a distributional observation, @NOTE: `utils.obj_array_from_list` will make a nested list of object arrays if you only put in a list with one vector!!! Makes me think we should remove utils.obj_array_from_list potentially, use a distributional observation, use a distributional observation, @NOTE: `utils.obj_array_from_list` will make a nested list of object arrays if you only put in a list with one vector!!! Makes me think we should remove utils.obj_array_from_list potentially, use a distributional observation" ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "VANILLA method (fixed point iteration) with one hidden state factor and one observation modality" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_distributional_obs(self)" ;
    code:hasInput code:Parameter_self_test_agent_distributional_obs ;
    code:isDocumented true ;
    code:name "test_agent_distributional_obs" .

code:Tests_test_agent_infer_states____test_test_agent_py__test_agent_infer_states a code:Function ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Test `infer_states` method of the Agent() class" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_infer_states(self)" ;
    code:hasInput code:Parameter_self_test_agent_infer_states ;
    code:isDocumented true ;
    code:name "test_agent_infer_states" .

code:Tests_test_agent_init_without_control_fac_idx____test_test_agent_py__test_agent_init_without_control_fac_idx a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Initialize instance of the agent class and pass in a custom `control_fac_idx`" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_init_without_control_fac_idx(self)" ;
    code:hasInput code:Parameter_self_test_agent_init_without_control_fac_idx ;
    code:isDocumented true ;
    code:name "test_agent_init_without_control_fac_idx" .

code:Tests_test_agent_with_A_learning_vanilla____test_test_agent_py__test_agent_with_A_learning_vanilla a code:Function ;
    code:comments "3 x 3, 2-dimensional grid world, get some true transition dynamics, instantiate the agent, time horizon, sample the next state given the true transition dynamics and the sampled action, compute the predicted update to the action-conditioned slice of qB, update qA using the agent function, check if the predicted update and the actual update are the same" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Unit test for updating prior Dirichlet parameters over likelihood model (pA) with the ``Agent`` class,
        in the case that you're using "vanilla" inference mode.""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_A_learning_vanilla(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_A_learning_vanilla ;
    code:isDocumented true ;
    code:name "test_agent_with_A_learning_vanilla" .

code:Tests_test_agent_with_A_learning_vanilla_factorized____test_test_agent_py__test_agent_with_A_learning_vanilla_factorized a code:Function ;
    code:comments "instantiate the agent, time horizon, compute the predicted update to the action-conditioned slice of qB, update qA using the agent function, check if the predicted update and the actual update are the same" ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Unit test for updating prior Dirichlet parameters over likelihood model (pA) with the ``Agent`` class,
        in the case that you're using "vanilla" inference mode. In this case, we encode sparse conditional dependencies by specifying
        a non-all-to-all `A_factor_list`, that specifies the subset of hidden state factors that different modalities depend on.""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_A_learning_vanilla_factorized(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_A_learning_vanilla_factorized ;
    code:isDocumented true ;
    code:name "test_agent_with_A_learning_vanilla_factorized" .

code:Tests_test_agent_with_B_learning_vanilla____test_test_agent_py__test_agent_with_B_learning_vanilla a code:Function ;
    code:comments "3 x 3, 2-dimensional grid world, flat transition prior, instantiate the agent, get some true transition dynamics, time horizon, sample the next state given the true transition dynamics and the sampled action, compute the predicted update to the action-conditioned slice of qB, update qB using the agent function, check if the predicted update and the actual update are the same" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Unit test for updating prior Dirichlet parameters over transition model (pB) with the ``Agent`` class,
        in the case that you're using "vanilla" inference mode.""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_B_learning_vanilla(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_B_learning_vanilla ;
    code:isDocumented true ;
    code:name "test_agent_with_B_learning_vanilla" .

code:Tests_test_agent_with_D_learning_MMP____test_test_agent_py__test_agent_with_D_learning_MMP a code:Function ;
    code:comments "1. Using Bayesian model average over hidden states at the edge of the inference horizon, get some random hidden state distribution, 2. Using policy-conditioned prior over hidden states at the edge of the inference horizon, get some random hidden state distribution, get beliefs about policies at the time at the beginning of the inference horizon, beliefs about hidden states at the first timestep of the inference horizon" ;
    code:complexity "Complexity: 6" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test updating prior Dirichlet parameters over initial hidden states (pD) with the agent class,
        in the case that you're using MMP inference and various combinations of Bayesian model averaging at the edge of the inference horizon vs. other possibilities""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_D_learning_MMP(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_D_learning_MMP ;
    code:isDocumented true ;
    code:name "test_agent_with_D_learning_MMP" .

code:Tests_test_agent_with_D_learning_vanilla____test_test_agent_py__test_agent_with_D_learning_vanilla a code:Function ;
    code:comments "HMM mode, 1. Test that the updating works when `save_belief_hist` is True, and you don't need to pass in the beliefs about first hidden states, get some random hidden state distribution, 2. Test that the updating works when `save_belief_hist` is False, and you do have to pass in the beliefs about first hidden states, get some random hidden state distribution, 3. Same as test #1, except with learning on only certain hidden state factors. Also passed in a different learning rate, get some random hidden state distribution" ;
    code:complexity "Complexity: 7" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test updating prior Dirichlet parameters over initial hidden states (pD) with the ``Agent`` class,
        in the case that you're using "vanilla" inference mode.""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_D_learning_vanilla(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_D_learning_vanilla ;
    code:isDocumented true ;
    code:name "test_agent_with_D_learning_vanilla" .

code:Tests_test_agent_with_factorized_inference____test_test_agent_py__test_agent_with_factorized_inference a code:Function ;
    code:comments "list of the factors that modality `m` does not depend on, broadcast or tile the reduced A matrix (`A_reduced`) along the dimensions of corresponding to `other_factors`" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test that an instance of the `Agent` class can be initialized with a provided `A_factor_list` and run the factorized inference algorithm. Validate
        against an equivalent `Agent` whose `A` matrix represents the full set of (redundant) conditional dependence relationships.""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_factorized_inference(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_factorized_inference ;
    code:isDocumented true ;
    code:name "test_agent_with_factorized_inference" .

code:Tests_test_agent_with_input_alpha____test_test_agent_py__test_agent_with_input_alpha a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for passing in `alpha` (action sampling precision parameter) as argument to `agent.Agent()` constructor.
        Test two cases to make sure alpha scaling is working properly, by comparing entropies of action marginals 
        after computing posterior over actions in cases where alpha is passed in as two different values to the Agent constructor.""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_input_alpha(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_input_alpha ;
    code:isDocumented true ;
    code:name "test_agent_with_input_alpha" .

code:Tests_test_agent_with_interactions_in_B____test_test_agent_py__test_agent_with_interactions_in_B a code:Function ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Test that an instance of the `Agent` class can be initialized with a provided `B_factor_list` and run a time loop of active inferece" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_interactions_in_B(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_interactions_in_B ;
    code:isDocumented true ;
    code:name "test_agent_with_interactions_in_B" .

code:Tests_test_agent_with_sampling_mode____test_test_agent_py__test_agent_with_sampling_mode a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for passing in `sampling_mode` argument to `agent.Agent()` constructor, which determines whether you sample
        from posterior marginal over actions ("marginal", default) or posterior over policies ("full")""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_sampling_mode(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_sampling_mode ;
    code:isDocumented true ;
    code:name "test_agent_with_sampling_mode" .

code:Tests_test_agent_with_stochastic_action_unidimensional_control____test_test_agent_py__test_agent_with_stochastic_action_unidimensional_control a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test stochastic action sampling in case that one of the control states is one-dimensional, within the agent
        method `sample_action()`.
        Due to a call to probabilities.squeeze() in an earlier version of utils.sample(), this was throwing an
        error due to the inability to use np.random.multinomial on an array with undefined length (an 'unsized' array)""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_agent_with_stochastic_action_unidimensional_control(self)" ;
    code:hasInput code:Parameter_self_test_agent_with_stochastic_action_unidimensional_control ;
    code:isDocumented true ;
    code:name "test_agent_with_stochastic_action_unidimensional_control" .

code:Tests_test_deterministic_action_sampling_equal_value____test_test_control_py__test_deterministic_action_sampling_equal_value a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test `deterministic` action sampling in the case that multiple actions have the same probability. 
        Desired behavior is that actions are randomly sampled from the subset of total actions that have the highest (but equal) probability.""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_deterministic_action_sampling_equal_value(self)" ;
    code:hasInput code:Parameter_self_test_deterministic_action_sampling_equal_value ;
    code:isDocumented true ;
    code:name "test_deterministic_action_sampling_equal_value" .

code:Tests_test_deterministic_policy_selection_equal_value____test_test_control_py__test_deterministic_policy_selection_equal_value a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test `deterministic` action sampling in the case that multiple actions have the same probability. 
        Desired behavior is that actions are randomly sampled from the subset of total actions that have the highest (but equal) probability.""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_deterministic_policy_selection_equal_value(self)" ;
    code:hasInput code:Parameter_self_test_deterministic_policy_selection_equal_value ;
    code:isDocumented true ;
    code:name "test_deterministic_policy_selection_equal_value" .

code:Tests_test_expected_utility____test_test_control_py__test_expected_utility a code:Function ;
    code:comments "Single timestep, Single observation modality, Create noiseless identity A matrix, Create imbalance in preferences for observations, Compute expected utility of policies, One policy entails going to state 0 two times in a row, and then state 2 at the end, Another policy entails going to state 1 three times in a row, single observation modality, create noiseless identity A matrix, create imbalance in preferences for observations, This test is designed to illustrate the emergence of planning by, using the time-integral of the expected free energy., Even though the first observation (index 0) is the most preferred, the policy, that frequents this observation the most is actually not optimal, because that policy, terminates in a less preferred state by timestep 3." ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for the expected utility function, for a simple single factor generative model 
        where there are imbalances in the preferences for different outcomes. Test for both single
        timestep policy horizons and multiple timestep policy horizons (planning)""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_expected_utility(self)" ;
    code:hasInput code:Parameter_self_test_expected_utility ;
    code:isDocumented true ;
    code:name "test_expected_utility" .

code:Tests_test_factorized_fpi_multi_factor_multi_modality____test_test_fpi_py__test_factorized_fpi_multi_factor_multi_modality a code:Function ;
    code:comments "test it also without computing VFE (i.e. with `compute_vfe=False`)" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the sparsified version of `run_vanilla_fpi`, named `run_vanilla_fpi_factorized`
        with multiple hidden state factors and multiple observation modalities.""" ;
    code:function_exe_cmd "test.test_fpi.TestFPI.test_factorized_fpi_multi_factor_multi_modality(self)" ;
    code:hasInput code:Parameter_self_test_factorized_fpi_multi_factor_multi_modality ;
    code:isDocumented true ;
    code:name "test_factorized_fpi_multi_factor_multi_modality" .

code:Tests_test_factorized_fpi_multi_factor_multi_modality_with_condind____test_test_fpi_py__test_factorized_fpi_multi_factor_multi_modality_with_condind a code:Function ;
    code:comments "list of the factors that modality `m` does not depend on, broadcast or tile the reduced A matrix (`A_reduced`) along the dimensions of corresponding to `other_factors`" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the sparsified version of `run_vanilla_fpi`, named `run_vanilla_fpi_factorized`
        with multiple hidden state factors and multiple observation modalities, where some modalities only depend on some factors.""" ;
    code:function_exe_cmd "test.test_fpi.TestFPI.test_factorized_fpi_multi_factor_multi_modality_with_condind(self)" ;
    code:hasInput code:Parameter_self_test_factorized_fpi_multi_factor_multi_modality_with_condind ;
    code:isDocumented true ;
    code:name "test_factorized_fpi_multi_factor_multi_modality_with_condind" .

code:Tests_test_factorized_fpi_multi_factor_one_modality____test_test_fpi_py__test_factorized_fpi_multi_factor_one_modality a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the sparsified version of `run_vanilla_fpi`, named `run_vanilla_fpi_factorized`
        with multiple hidden state factors and one observation modality.""" ;
    code:function_exe_cmd "test.test_fpi.TestFPI.test_factorized_fpi_multi_factor_one_modality(self)" ;
    code:hasInput code:Parameter_self_test_factorized_fpi_multi_factor_one_modality ;
    code:isDocumented true ;
    code:name "test_factorized_fpi_multi_factor_one_modality" .

code:Tests_test_factorized_fpi_multi_factor_single_modality_with_condind____test_test_fpi_py__test_factorized_fpi_multi_factor_single_modality_with_condind a code:Function ;
    code:comments "list of the factors that modality `m` does not depend on, broadcast or tile the reduced A matrix (`A_reduced`) along the dimensions of corresponding to `other_factors`" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the sparsified version of `run_vanilla_fpi`, named `run_vanilla_fpi_factorized`
        with multiple hidden state factors and one observation modality, where the modality only depend on some factors.""" ;
    code:function_exe_cmd "test.test_fpi.TestFPI.test_factorized_fpi_multi_factor_single_modality_with_condind(self)" ;
    code:hasInput code:Parameter_self_test_factorized_fpi_multi_factor_single_modality_with_condind ;
    code:isDocumented true ;
    code:name "test_factorized_fpi_multi_factor_single_modality_with_condind" .

code:Tests_test_factorized_fpi_one_factor_multi_modality____test_test_fpi_py__test_factorized_fpi_one_factor_multi_modality a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the sparsified version of `run_vanilla_fpi`, named `run_vanilla_fpi_factorized`
        with single hidden state factor and multiple observation modalities.""" ;
    code:function_exe_cmd "test.test_fpi.TestFPI.test_factorized_fpi_one_factor_multi_modality(self)" ;
    code:hasInput code:Parameter_self_test_factorized_fpi_one_factor_multi_modality ;
    code:isDocumented true ;
    code:name "test_factorized_fpi_one_factor_multi_modality" .

code:Tests_test_factorized_fpi_one_factor_one_modality____test_test_fpi_py__test_factorized_fpi_one_factor_one_modality a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the sparsified version of `run_vanilla_fpi`, named `run_vanilla_fpi_factorized`
        with single hidden state factor and single observation modality.""" ;
    code:function_exe_cmd "test.test_fpi.TestFPI.test_factorized_fpi_one_factor_one_modality(self)" ;
    code:hasInput code:Parameter_self_test_factorized_fpi_one_factor_one_modality ;
    code:isDocumented true ;
    code:name "test_factorized_fpi_one_factor_one_modality" .

code:Tests_test_fixed_point_iteration____test_test_message_passing_jax_py__test_fixed_point_iteration a code:Function ;
    code:comments "numpy version, set dF_tol to negative number so numpy version of FPI never stops early due to convergence, jax version" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "test.test_message_passing_jax.TestMessagePassing.test_fixed_point_iteration(self)" ;
    code:hasInput code:Parameter_self_test_fixed_point_iteration ;
    code:isDocumented false ;
    code:name "test_fixed_point_iteration" .

code:Tests_test_fixed_point_iteration_factorized_fullyconnected____test_test_message_passing_jax_py__test_fixed_point_iteration_factorized_fullyconnected a code:Function ;
    code:comments "initialize arrays in numpy version, jax version" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the factorized version of `run_vanilla_fpi`, named `run_factorized_fpi`
        with multiple hidden state factors and multiple observation modalities.""" ;
    code:function_exe_cmd "test.test_message_passing_jax.TestMessagePassing.test_fixed_point_iteration_factorized_fullyconnected(self)" ;
    code:hasInput code:Parameter_self_test_fixed_point_iteration_factorized_fullyconnected ;
    code:isDocumented true ;
    code:name "test_fixed_point_iteration_factorized_fullyconnected" .

code:Tests_test_fixed_point_iteration_factorized_sparsegraph____test_test_message_passing_jax_py__test_fixed_point_iteration_factorized_sparsegraph a code:Function ;
    code:comments "jax version, create the full A matrix, where all hidden state factors are represented in the lagging dimensions of each sub-A array, jax version" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the factorized version of `run_vanilla_fpi`, named `run_factorized_fpi`
        with multiple hidden state factors and multiple observation modalities, and with sparse conditional dependence relationships between hidden states
        and observation modalities""" ;
    code:function_exe_cmd "test.test_message_passing_jax.TestMessagePassing.test_fixed_point_iteration_factorized_sparsegraph(self)" ;
    code:hasInput code:Parameter_self_test_fixed_point_iteration_factorized_sparsegraph ;
    code:isDocumented true ;
    code:name "test_fixed_point_iteration_factorized_sparsegraph" .

code:Tests_test_fixed_point_iteration_index_observations____test_test_inference_jax_py__test_fixed_point_iteration_index_observations a code:Function ;
    code:comments "numpy version, set dF_tol to negative number so numpy version of FPI never stops early due to convergence, jax version, obs = [jnp.array(o_m) for o_m in obs]" ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Tests the jax-ified version of mean-field fixed-point iteration against the original NumPy version.
        In this version there are multiple hidden state factors and multiple observation modalities.

        Test the jax version with index-based observations (not one-hots)""" ;
    code:function_exe_cmd "test.test_inference_jax.TestInferenceJax.test_fixed_point_iteration_index_observations(self)" ;
    code:hasInput code:Parameter_self_test_fixed_point_iteration_index_observations ;
    code:isDocumented true ;
    code:name "test_fixed_point_iteration_index_observations" .

code:Tests_test_fixed_point_iteration_multistate_multiobs____test_test_inference_jax_py__test_fixed_point_iteration_multistate_multiobs a code:Function ;
    code:comments "numpy version, set dF_tol to negative number so numpy version of FPI never stops early due to convergence, jax version" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Tests the jax-ified version of mean-field fixed-point iteration against the original numpy version.
        In this version there are multiple hidden state factors and multiple observation modalities""" ;
    code:function_exe_cmd "test.test_inference_jax.TestInferenceJax.test_fixed_point_iteration_multistate_multiobs(self)" ;
    code:hasInput code:Parameter_self_test_fixed_point_iteration_multistate_multiobs ;
    code:isDocumented true ;
    code:name "test_fixed_point_iteration_multistate_multiobs" .

code:Tests_test_fixed_point_iteration_multistate_singleobs____test_test_inference_jax_py__test_fixed_point_iteration_multistate_singleobs a code:Function ;
    code:comments "numpy version, set dF_tol to negative number so numpy version of FPI never stops early due to convergence, jax version" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Tests the jax-ified version of mean-field fixed-point iteration against the original numpy version.
        In this version there are multiple hidden state factors and a single observation modality""" ;
    code:function_exe_cmd "test.test_inference_jax.TestInferenceJax.test_fixed_point_iteration_multistate_singleobs(self)" ;
    code:hasInput code:Parameter_self_test_fixed_point_iteration_multistate_singleobs ;
    code:isDocumented true ;
    code:name "test_fixed_point_iteration_multistate_singleobs" .

code:Tests_test_fixed_point_iteration_singlestate_multiobs____test_test_inference_jax_py__test_fixed_point_iteration_singlestate_multiobs a code:Function ;
    code:comments "numpy version, set dF_tol to negative number so numpy version of FPI never stops early due to convergence, jax version" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Tests the jax-ified version of mean-field fixed-point iteration against the original numpy version.
        In this version there is one hidden state factor and multiple observation modalities""" ;
    code:function_exe_cmd "test.test_inference_jax.TestInferenceJax.test_fixed_point_iteration_singlestate_multiobs(self)" ;
    code:hasInput code:Parameter_self_test_fixed_point_iteration_singlestate_multiobs ;
    code:isDocumented true ;
    code:name "test_fixed_point_iteration_singlestate_multiobs" .

code:Tests_test_fixed_point_iteration_singlestate_singleobs____test_test_inference_jax_py__test_fixed_point_iteration_singlestate_singleobs a code:Function ;
    code:comments "numpy version, set dF_tol to negative number so numpy version of FPI never stops early due to convergence, jax version" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Tests the jax-ified version of mean-field fixed-point iteration against the original numpy version.
        In this version there is one hidden state factor and one observation modality""" ;
    code:function_exe_cmd "test.test_inference_jax.TestInferenceJax.test_fixed_point_iteration_singlestate_singleobs(self)" ;
    code:hasInput code:Parameter_self_test_fixed_point_iteration_singlestate_singleobs ;
    code:isDocumented true ;
    code:name "test_fixed_point_iteration_singlestate_singleobs" .

code:Tests_test_get_expected_obs_factorized____test_test_control_jax_py__test_get_expected_obs_factorized a code:Function ;
    code:comments "need to wrap `qs` in list because `get_expected_obs_factorized` expects a list of `qs` (representing multiple timesteps), need to extract first index of `qo_validation` because `get_expected_obs_factorized` returns a list of `qo` (representing multiple timesteps)" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the jax-ified version of computations of expected observations under some hidden states and policy" ;
    code:function_exe_cmd "test.test_control_jax.TestControlJax.test_get_expected_obs_factorized(self)" ;
    code:hasInput code:Parameter_self_test_get_expected_obs_factorized ;
    code:isDocumented true ;
    code:name "test_get_expected_obs_factorized" .

code:Tests_test_get_expected_obs_factorized____test_test_control_py__test_get_expected_obs_factorized a code:Function ;
    code:comments "need to wrap `qs` in list because `get_expected_obs_factorized` expects a list of `qs` (representing multiple timesteps), need to wrap `qs` in list because `get_expected_obs` expects a list of `qs` (representing multiple timesteps), need to extract first index of `qo_test` and `qo_val` because `get_expected_obs_factorized` returns a list of `qo` (representing multiple timesteps), need to wrap `qs` in list because `get_expected_obs_factorized` expects a list of `qs` (representing multiple timesteps), list of the factors that modality `m` does not depend on, broadcast or tile the reduced A matrix (`A_reduced`) along the dimensions of corresponding to `other_factors`, need to wrap `qs` in list because `get_expected_obs` expects a list of `qs` (representing multiple timesteps), need to extract first index of `qo_test` and `qo_val` because `get_expected_obs_factorized` returns a list of `qo` (representing multiple timesteps)" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Test the new version of `get_expected_obs` that includes sparse dependencies of `A` array on hidden state factors (not all observation modalities depend on all hidden state factors)" ;
    code:function_exe_cmd "test.test_control.TestControl.test_get_expected_obs_factorized(self)" ;
    code:hasInput code:Parameter_self_test_get_expected_obs_factorized ;
    code:isDocumented true ;
    code:name "test_get_expected_obs_factorized" .

code:Tests_test_get_expected_states____test_test_control_py__test_get_expected_states a code:Function ;
    code:complexity "Complexity: 11" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the refactored (Categorical-less) version of `get_expected_states`" ;
    code:function_exe_cmd "test.test_control.TestControl.test_get_expected_states(self)" ;
    code:hasInput code:Parameter_self_test_get_expected_states ;
    code:isDocumented true ;
    code:name "test_get_expected_states" .

code:Tests_test_get_expected_states_and_obs____test_test_control_py__test_get_expected_states_and_obs a code:Function ;
    code:comments "validation qs_pi, validation qo_pi, validation qs_pi, validation qo_pi, validation qs_pi, validation qo_pi" ;
    code:complexity "Complexity: 11" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the refactored (Categorical-less) versions of `get_expected_states` and `get_expected_obs` together" ;
    code:function_exe_cmd "test.test_control.TestControl.test_get_expected_states_and_obs(self)" ;
    code:hasInput code:Parameter_self_test_get_expected_states_and_obs ;
    code:isDocumented true ;
    code:name "test_get_expected_states_and_obs" .

code:Tests_test_get_expected_states_interactions_multi_factor____test_test_control_py__test_get_expected_states_interactions_multi_factor a code:Function ;
    code:comments "how to compute equivalent of `spm_dot(B[...,past_action], qs)`" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the new version of `get_expected_states` that includes `B` array inter-factor dependencies, 
        in the case where there are two hidden state factors: one that depends on itself and another that depends on both itself and the other factor.""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_get_expected_states_interactions_multi_factor(self)" ;
    code:hasInput code:Parameter_self_test_get_expected_states_interactions_multi_factor ;
    code:isDocumented true ;
    code:name "test_get_expected_states_interactions_multi_factor" .

code:Tests_test_get_expected_states_interactions_multi_factor_independent____test_test_control_py__test_get_expected_states_interactions_multi_factor_independent a code:Function ;
    code:comments "each factor only depends on itself" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the new version of `get_expected_states` that includes `B` array inter-factor dependencies, 
        in the case where there are multiple hidden state factors, but they all only depend on themselves""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_get_expected_states_interactions_multi_factor_independent(self)" ;
    code:hasInput code:Parameter_self_test_get_expected_states_interactions_multi_factor_independent ;
    code:isDocumented true ;
    code:name "test_get_expected_states_interactions_multi_factor_independent" .

code:Tests_test_get_expected_states_interactions_single_factor____test_test_control_py__test_get_expected_states_interactions_single_factor a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Test the new version of `get_expected_states` that includes `B` array inter-factor dependencies, in case a of trivial single factor" ;
    code:function_exe_cmd "test.test_control.TestControl.test_get_expected_states_interactions_single_factor(self)" ;
    code:hasInput code:Parameter_self_test_get_expected_states_interactions_single_factor ;
    code:isDocumented true ;
    code:name "test_get_expected_states_interactions_single_factor" .

code:Tests_test_get_model_dimensions_from_labels____test_test_wrappers_py__test_get_model_dimensions_from_labels a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests model dimension extraction from labels including observations, states and actions." ;
    code:function_exe_cmd "test.test_wrappers.TestWrappers.test_get_model_dimensions_from_labels(self)" ;
    code:hasInput code:Parameter_self_test_get_model_dimensions_from_labels ;
    code:isDocumented true ;
    code:name "test_get_model_dimensions_from_labels" .

code:Tests_test_gridworld_activeinference____test_test_demos_py__test_gridworld_activeinference a code:Function ;
    code:comments "@NOTE: we use the `spm_log_single` helper function from the `maths` sub-library of pymdp. This is a numerically stable version of np.log(), def plot_empirical_prior(B):, fig, axes = plt.subplots(3,2, figsize=(8, 10)), actions = ['UP', 'RIGHT', 'DOWN', 'LEFT', 'STAY'], count = 0, for i in range(3):, for j in range(2):, if count >= 5:, break, g = sns.heatmap(B[:,:,count], cmap=\"OrRd\", linewidth=2.5, cbar=False, ax=axes[i,j]), g.set_title(actions[count]), count += 1, fig.delaxes(axes.flatten()[5]), plt.tight_layout(), def plot_transition(B):, fig, axes = plt.subplots(2,3, figsize = (15,8)), a = list(actions.keys()), count = 0, for i in range(dim-1):, for j in range(dim):, if count >= 5:, break, g = sns.heatmap(B[:,:,count], cmap = \"OrRd\", linewidth = 2.5, cbar = False, ax = axes[i,j], xticklabels=labels, yticklabels=labels), g.set_title(a[count]), count +=1, fig.delaxes(axes.flatten()[5]), plt.tight_layout(), plot_likelihood(A), plot_transition(B), def perform_inference(likelihood, prior):, return softmax(log_stable(likelihood) + log_stable(prior)), plot_beliefs(Qs), plot_beliefs(C), initialize expected free energy at 0, loop over policy, get action entailed by the policy at timestep `t`, work out expected state, given the action, work out expected observations, given the action, get entropy, get predicted divergence, divergence = np.sum(Qo_pi * (log_stable(Qo_pi) - log_stable(C)), axis=0), compute the expected uncertainty or ambiguity, increment the expected free energy counter for the policy, using the expected free energy at this timestep, initialize the negative expected free energy, loop over every possible policy and compute the EFE of each policy, get distribution over policies, initialize probabilites of control states (convert from policies to actions), sum probabilites of control states or actions, control state specified by policy, add probability of policy, normalize action marginal, sample control from action marginal, number of time steps, n_actions = env.n_control, length of policies we consider, this function generates all possible combinations of policies, reset environment, loop over time, infer which action to take, perform action in the environment and update the environment, infer new hidden state (this is the same equation as above but with PyMDP functions), plot_beliefs(Qs, \"Beliefs (Qs) at time {}\".format(t)), self.assertEqual(np.argmax(Qs), REWARD_LOCATION) # @NOTE: This is not always true due to stochastic samplign!!!" ;
    code:complexity "Complexity: 8" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "This unit test runs the a concise version of the code in the `gridworld_tutorial_1.ipynb` tutorial notebook to make sure it works if things are changed" ;
    code:function_exe_cmd "test.test_demos.TestDemos.test_gridworld_activeinference(self)" ;
    code:hasInput code:Parameter_self_test_gridworld_activeinference ;
    code:isDocumented true ;
    code:name "test_gridworld_activeinference" .

code:Tests_test_gridworld_genmodel_construction____test_test_demos_py__test_gridworld_genmodel_construction a code:Function ;
    code:comments "rows are the y-coordinate, columns are the x-coordinate -- so we index into the grid we'll be visualizing using '[y, x]', plot_likelihood(A)" ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "This unit test runs the a concise version of the code in the `gridworld_tutorial_1.ipynb` tutorial notebook to make sure it works if things are changed" ;
    code:function_exe_cmd "test.test_demos.TestDemos.test_gridworld_genmodel_construction(self)" ;
    code:hasInput code:Parameter_self_test_gridworld_genmodel_construction ;
    code:isDocumented true ;
    code:name "test_gridworld_genmodel_construction" .

code:Tests_test_info_gain_factorized____test_test_control_jax_py__test_info_gain_factorized a code:Function ;
    code:comments "cue statistics, bandit statistics (mapping between reward-state (first hidden state factor) and rewards (Good vs Bad)), agent believes it's in the start state, agent believes it's in the arm-visiting state, agent believes it's in the cue-visiting state" ;
    code:complexity "Complexity: 6" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Unit test the `calc_states_info_gain_factorized` function by qualitatively checking that in the T-Maze (contextual bandit)
        example, the state info gain is higher for the policy that leads to visiting the cue, which is higher than state info gain
        for visiting the bandit arm, which in turn is higher than the state info gain for the policy that leads to staying in the start state.""" ;
    code:function_exe_cmd "test.test_control_jax.TestControlJax.test_info_gain_factorized(self)" ;
    code:hasInput code:Parameter_self_test_info_gain_factorized ;
    code:isDocumented true ;
    code:name "test_info_gain_factorized" .

code:Tests_test_marginal_message_passing____test_test_message_passing_jax_py__test_marginal_message_passing a code:Function ;
    code:comments "create a version of a_deps_i where each sub-list is sorted, move observations into leading dimensions, move u_t to the rightmost axis of the array, s_t+1 to the leading dimension of the array, # create a policy-dependent sequence of B matrices, but now we store the sequence dimension (action indices) in the first dimension (0th dimension is still batch dimension)" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "test.test_message_passing_jax.TestMessagePassing.test_marginal_message_passing(self)" ;
    code:hasInput code:Parameter_self_test_marginal_message_passing ;
    code:isDocumented false ;
    code:name "test_marginal_message_passing" .

code:Tests_test_mmp_a____test_test_mmp_py__test_mmp_a a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Testing our SPM-ified version of `run_MMP` with
            1 hidden state factor & 1 outcome modality, at a random fixed
            timestep during the generative process""" ;
    code:function_exe_cmd "test.test_mmp.MMP.test_mmp_a(self)" ;
    code:hasInput code:Parameter_self_test_mmp_a ;
    code:isDocumented true ;
    code:name "test_mmp_a" .

code:Tests_test_mmp_active_inference____test_test_agent_py__test_mmp_active_inference a code:Function ;
    code:comments "just randomly generate observations at each timestep, no generative process" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Tests to make sure whole active inference loop works (with various past and future
        inference/policy horizons).""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_mmp_active_inference(self)" ;
    code:hasInput code:Parameter_self_test_mmp_active_inference ;
    code:isDocumented true ;
    code:name "test_mmp_active_inference" .

code:Tests_test_mmp_b____test_test_mmp_py__test_mmp_b a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Testing our SPM-ified version of `run_MMP` with
        2 hidden state factors & 2 outcome modalities, at a random fixed
        timestep during the generative process""" ;
    code:function_exe_cmd "test.test_mmp.MMP.test_mmp_b(self)" ;
    code:hasInput code:Parameter_self_test_mmp_b ;
    code:isDocumented true ;
    code:name "test_mmp_b" .

code:Tests_test_mmp_c____test_test_mmp_py__test_mmp_c a code:Function ;
    code:comments "prev_actions = mat_contents[\"previous_actions\"].astype(\"int64\") - 1, prev_actions = prev_actions[(max(0, curr_t - t_horizon)) :, :]" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Testing our SPM-ified version of `run_MMP` with
         2 hidden state factors & 2 outcome modalities, at the very first
         timestep of the generative process (boundary condition test). So there 
         are no previous actions""" ;
    code:function_exe_cmd "test.test_mmp.MMP.test_mmp_c(self)" ;
    code:hasInput code:Parameter_self_test_mmp_c ;
    code:isDocumented true ;
    code:name "test_mmp_c" .

code:Tests_test_mmp_d____test_test_mmp_py__test_mmp_d a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Testing our SPM-ified version of `run_MMP` with
        2 hidden state factors & 2 outcome modalities, at the final
        timestep of the generative process (boundary condition test)
        @NOTE: mmp_d.mat test has issues with the prediction errors. But the future messages are 
        totally fine (even at the last timestep of variational iteration.""" ;
    code:function_exe_cmd "test.test_mmp.MMP.test_mmp_d(self)" ;
    code:hasInput code:Parameter_self_test_mmp_d ;
    code:isDocumented true ;
    code:name "test_mmp_d" .

code:Tests_test_obj_array_from_list____test_test_utils_py__test_obj_array_from_list a code:Function ;
    code:comments "make arrays with same leading dimensions. naive method trigger numpy broadcasting error." ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests `obj_array_from_list`" ;
    code:function_exe_cmd "test.test_utils.TestUtils.test_obj_array_from_list(self)" ;
    code:hasInput code:Parameter_self_test_obj_array_from_list ;
    code:isDocumented true ;
    code:name "test_obj_array_from_list" .

code:Tests_test_pA_info_gain____test_test_control_py__test_pA_info_gain a code:Function ;
    code:comments "start with a precise initial state, single timestep, single observation modality, create noiseless identity A matrix, create prior over dirichlets such that there is a skew, in the parameters about the likelihood mapping from the, second hidden state (index 1) to observations, such that, Observation 0 is believed to be more likely than the other, conditioned on State 1., Therefore sampling observations conditioned on State 1 would afford high info gain, about parameters, for that part of the likelhood distribution." ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the pA_info_gain function. Demonstrates operation
        by manipulating shape of the Dirichlet priors over likelihood parameters
        (pA), which affects information gain for different expected observations""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_pA_info_gain(self)" ;
    code:hasInput code:Parameter_self_test_pA_info_gain ;
    code:isDocumented true ;
    code:name "test_pA_info_gain" .

code:Tests_test_pB_info_gain____test_test_control_py__test_pB_info_gain a code:Function ;
    code:comments "start with a precise initial state, create prior over dirichlets such that there is a skew, in the parameters about the likelihood mapping from the, hidden states to hidden states under the second action,, such that hidden state 0 is considered to be more likely than the other,, given the action in question, Therefore taking that action would yield an expected state that afford, high information gain about that part of the likelihood distribution., , single timestep" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the pB_info_gain function. Demonstrates operation
        by manipulating shape of the Dirichlet priors over likelihood parameters
        (pB), which affects information gain for different states""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_pB_info_gain(self)" ;
    code:hasInput code:Parameter_self_test_pB_info_gain ;
    code:isDocumented true ;
    code:name "test_pB_info_gain" .

code:Tests_test_prune_likelihoods____test_test_learning_py__test_prune_likelihoods a code:Function ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test removing hidden state factor levels and/or observation levels from the likelihood arrays 
        of a generative model, using the `_prune_A` and `_prune_B` functions of the `learning` module""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_prune_likelihoods(self)" ;
    code:hasInput code:Parameter_self_test_prune_likelihoods ;
    code:isDocumented true ;
    code:name "test_prune_likelihoods" .

code:Tests_test_prune_prior____test_test_learning_py__test_prune_prior a code:Function ;
    code:comments "this could either be 4 hidden state levels, or 4 observation levels, this could either be 4 hidden state levels, or 4 observation levels, this could either be 4 hidden state levels, or 4 observation levels" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test removing hidden state factor levels and/or observation levels from the priors vectors
        of a generative model, using the `_prune_prior` function of the `learning` module""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_prune_prior(self)" ;
    code:hasInput code:Parameter_self_test_prune_prior ;
    code:isDocumented true ;
    code:name "test_prune_prior" .

code:Tests_test_reset_agent_MMP_wBMA____test_test_agent_py__test_reset_agent_MMP_wBMA a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Ensure the `reset` method of Agent() using the new refactor is working as intended, 
        using the `MMP` argument to `inference_algo`, and `use_BMA` equal to True""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_reset_agent_MMP_wBMA(self)" ;
    code:hasInput code:Parameter_self_test_reset_agent_MMP_wBMA ;
    code:isDocumented true ;
    code:name "test_reset_agent_MMP_wBMA" .

code:Tests_test_reset_agent_MMP_wPSP____test_test_agent_py__test_reset_agent_MMP_wPSP a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Ensure the `reset` method of Agent() using the new refactor is working as intended, 
        using the `MMP` argument to `inference_algo`, and `policy-separated prior` equal to True""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_reset_agent_MMP_wPSP(self)" ;
    code:hasInput code:Parameter_self_test_reset_agent_MMP_wPSP ;
    code:isDocumented true ;
    code:name "test_reset_agent_MMP_wPSP" .

code:Tests_test_reset_agent_VANILLA____test_test_agent_py__test_reset_agent_VANILLA a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Ensure the `reset` method of Agent() using the new refactor is working as intended, 
        using the `VANILLA` argument to `inference_algo`""" ;
    code:function_exe_cmd "test.test_agent.TestAgent.test_reset_agent_VANILLA(self)" ;
    code:hasInput code:Parameter_self_test_reset_agent_VANILLA ;
    code:isDocumented true ;
    code:name "test_reset_agent_VANILLA" .

code:Tests_test_sample_action____test_test_control_py__test_sample_action a code:Function ;
    code:comments "One policy entails going to state 0 two times in a row, and then state 2 at the end, Another policy entails going to state 1 three times in a row, create noiseless identity A matrix, create imbalance in preferences for observations, This test is designed to illustrate the emergence of planning by, using the time-integral of the expected free energy., Even though the first observation (index 0) is the most preferred, the policy, that frequents this observation the most is actually not optimal, because that policy, terminates in a less preferred state by timestep 3." ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the refactored (Categorical-less) version of `sample_action`" ;
    code:function_exe_cmd "test.test_control.TestControl.test_sample_action(self)" ;
    code:hasInput code:Parameter_self_test_sample_action ;
    code:isDocumented true ;
    code:name "test_sample_action" .

code:Tests_test_sample_policy____test_test_control_py__test_sample_policy a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the action selection function where policies are sampled directly from posterior over policies `q_pi`" ;
    code:function_exe_cmd "test.test_control.TestControl.test_sample_policy(self)" ;
    code:hasInput code:Parameter_self_test_sample_policy ;
    code:isDocumented true ;
    code:name "test_sample_policy" .

code:Tests_test_state_info_gain____test_test_control_py__test_state_info_gain a code:Function ;
    code:comments "start with a precise initial state, add some uncertainty into the consequences of the second policy, which, leads to increased epistemic value of observations, in case of pursuing, that policy -- this of course depends on a precise observation likelihood model, \"noise-ify\" the consequences of the 1-th action, single timestep, single observation modality, create noiseless identity A matrix, store the Bayesian surprise / epistemic values of states here (AKA state info gain), now we 'undo' the epistemic bonus of the second policy by making the A matrix, totally ambiguous; thus observations cannot resolve uncertainty about hidden states., In this case, uncertainty in the posterior beliefs induced by Policy 1 doesn't tip the balance, of epistemic value, because uncertainty is irresolveable either way., create noiseless identity A matrix, add some uncertainty into the consequences of the both policies, \"noise-ify\" the consequences of the 0-th action, but to a lesser extent than the 1-th action, \"noise-ify\" the consequences of the 1-th action, Although in the presence of a precise likelihood mapping,, Policy 1 would be preferred (due to higher resolve-able uncertainty, introduced by a noisier action-dependent B matrix),, if the expected observation likelihood of being in state 1 (the most likely consequence of Policy 1) is not precise, then, Policy 0 (which has more probability loaded over state 0) will have more resolveable uncertainty, due to the, higher precision of the A matrix over that column (column 0, which is identity). Even though the expected density over states, is less noisy for policy 0." ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test the states_info_gain function. 
        Function is tested by manipulating uncertainty in the likelihood matrices (A or B)
        in a ways that alternatively change the resolvability of uncertainty
        This is done with A) an imprecise expected state and a precise sensory mapping, 
        and B) high ambiguity and imprecise sensory mapping.""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_state_info_gain(self)" ;
    code:hasInput code:Parameter_self_test_state_info_gain ;
    code:isDocumented true ;
    code:name "test_state_info_gain" .

code:Tests_test_state_info_gain_factorized____test_test_control_py__test_state_info_gain_factorized a code:Function ;
    code:comments "cue statistics, bandit statistics (mapping between reward-state (first hidden state factor) and rewards (Good vs Bad)), agent believes it's in the start state, agent believes it's in the arm-visiting state, agent believes it's in the cue-visiting state" ;
    code:complexity "Complexity: 11" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Unit test the `calc_states_info_gain_factorized` function by qualitatively checking that in the T-Maze (contextual bandit)
        example, the state info gain is higher for the policy that leads to visiting the cue, which is higher than state info gain
        for visiting the bandit arm, which in turn is higher than the state info gain for the policy that leads to staying in the start state.""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_state_info_gain_factorized(self)" ;
    code:hasInput code:Parameter_self_test_state_info_gain_factorized ;
    code:isDocumented true ;
    code:name "test_state_info_gain_factorized" .

code:Tests_test_stochastic_action_unidimensional_control____test_test_control_py__test_stochastic_action_unidimensional_control a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test stochastic action sampling in case that one of the control states is one-dimensional.
        Due to a call to probabilities.squeeze() in an earlier version of utils.sample(), this was throwing an
        error due to the inability to use np.random.multinomial on an array with undefined length (an 'unsized' array)""" ;
    code:function_exe_cmd "test.test_control.TestControl.test_stochastic_action_unidimensional_control(self)" ;
    code:hasInput code:Parameter_self_test_stochastic_action_unidimensional_control ;
    code:isDocumented true ;
    code:name "test_stochastic_action_unidimensional_control" .

code:Tests_test_temporal_C_matrix____test_test_control_py__test_temporal_C_matrix a code:Function ;
    code:comments "C vectors for modalities 0 is time-dependent, C vectors for modalities 1 is time-independent" ;
    code:complexity "Complexity: 12" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Unit-tests for preferences that change over time" ;
    code:function_exe_cmd "test.test_control.TestControl.test_temporal_C_matrix(self)" ;
    code:hasInput code:Parameter_self_test_temporal_C_matrix ;
    code:isDocumented true ;
    code:name "test_temporal_C_matrix" .

code:Tests_test_tmaze_demo____test_test_demos_py__test_tmaze_demo a code:Function ;
    code:comments "probabilities used in the original SPM T-maze demo, plot_likelihood(A_gp[1][:,:,0],'Reward Right'), plot_likelihood(B_gp[1][:,:,0],'Reward Condition Transitions'), make a copy of the true observation likelihood to initialize the observation model, make a copy of the true transition likelihood to initialize the transition model, plot_beliefs(agent.D[0],\"Beliefs about initial location\"), they like reward, they don't like loss, number of timesteps, reset the environment and get an initial observation, these are useful for displaying read-outs during the loop over time, if the reward condition is Reward on RIGHT, this tests that the cue observation is 'Cue Right' in case of 'Reward on Right' condition, if the reward condition is Reward on RIGHT, this tests that the cue observation is 'Cue Left' in case of 'Reward on Left' condition" ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "This unit test runs the a concise version of the code in the `tmaze_demo.ipynb` tutorial notebook to make sure it works if things are changed" ;
    code:function_exe_cmd "test.test_demos.TestDemos.test_tmaze_demo(self)" ;
    code:hasInput code:Parameter_self_test_tmaze_demo ;
    code:isDocumented true ;
    code:name "test_tmaze_demo" .

code:Tests_test_tmaze_learning_demo____test_test_demos_py__test_tmaze_learning_demo a code:Function ;
    code:comments "the 'true' reward probabilities, this is a list of the indices of the hidden state factors that are controllable, this is a list of the modalities that you want to be learn-able, number of timesteps, reset the environment and get an initial observation, make sure they are learning the reward contingencies in the right general direction, in case the reward condition is 'Reward on RIGHT', in case the reward condition is 'Reward on LEFT'" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "This unit test runs the a concise version of the code in the `tmaze_demo_learning.ipynb` tutorial notebook to make sure it works if things are changed" ;
    code:function_exe_cmd "test.test_demos.TestDemos.test_tmaze_learning_demo(self)" ;
    code:hasInput code:Parameter_self_test_tmaze_learning_demo ;
    code:isDocumented true ;
    code:name "test_tmaze_learning_demo" .

code:Tests_test_update_observation_likelihood_factorized____test_test_learning_jax_py__test_update_observation_likelihood_factorized a code:Function ;
    code:comments "create numpy arrays to test numpy version of learning, create A matrix initialization (expected initial value of P(o|s, A)) and prior over A (pA), create random observations, create random state posterior, run numpy version of learning" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Testing JAX-ified version of updating Dirichlet posterior over observation likelihood parameters (qA is posterior, pA is prior, and A is expectation
        of likelihood wrt to current posterior over A, i.e. $A = E_{Q(A)}[P(o|s,A)]$.

        This is the factorized version where only some hidden state factors drive each modality (i.e. A_dependencies is a list of lists of hidden state factors)""" ;
    code:function_exe_cmd "test.test_learning_jax.TestLearningJax.test_update_observation_likelihood_factorized(self)" ;
    code:hasInput code:Parameter_self_test_update_observation_likelihood_factorized ;
    code:isDocumented true ;
    code:name "test_update_observation_likelihood_factorized" .

code:Tests_test_update_observation_likelihood_fullyconnected____test_test_learning_jax_py__test_update_observation_likelihood_fullyconnected a code:Function ;
    code:comments "create numpy arrays to test numpy version of learning, create A matrix initialization (expected initial value of P(o|s, A)) and prior over A (pA), create random observations, create random state posterior, run numpy version of learning" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Testing JAX-ified version of updating Dirichlet posterior over observation likelihood parameters (qA is posterior, pA is prior, and A is expectation
        of likelihood wrt to current posterior over A, i.e. $A = E_{Q(A)}[P(o|s,A)]$.

        This is the so-called 'fully-connected' version where all hidden state factors drive each modality (i.e. A_dependencies is a list of lists of hidden state factors)""" ;
    code:function_exe_cmd "test.test_learning_jax.TestLearningJax.test_update_observation_likelihood_fullyconnected(self)" ;
    code:hasInput code:Parameter_self_test_update_observation_likelihood_fullyconnected ;
    code:isDocumented true ;
    code:name "test_update_observation_likelihood_fullyconnected" .

code:Tests_test_update_pA_diff_observation_formats____test_test_learning_py__test_update_pA_diff_observation_formats a code:Function ;
    code:comments "multiple observation modalities, now do the same for case of single modality" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over sensory likelihood (pA)
        in the case that observation is stored in various formats""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pA_diff_observation_formats(self)" ;
    code:hasInput code:Parameter_self_test_update_pA_diff_observation_formats ;
    code:isDocumented true ;
    code:name "test_update_pA_diff_observation_formats" .

code:Tests_test_update_pA_factorized____test_test_learning_py__test_update_pA_factorized a code:Function ;
    code:comments "sample some positive learning rate" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for `learning.update_obs_likelihood_dirichlet_factorized`, which is the learning function updating prior Dirichlet parameters over the sensory likelihood (pA) 
        in the case that the generative model is sparse and only some modalities depend on some hidden state factors""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pA_factorized(self)" ;
    code:hasInput code:Parameter_self_test_update_pA_factorized ;
    code:isDocumented true ;
    code:name "test_update_pA_factorized" .

code:Tests_test_update_pA_multi_factor_all____test_test_learning_py__test_update_pA_multi_factor_all a code:Function ;
    code:comments "single observation modality, multiple observation modalities" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over sensory likelihood (pA)
        in the case that all observation modalities are updated and the generative model 
        has multiple hidden state factors""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pA_multi_factor_all(self)" ;
    code:hasInput code:Parameter_self_test_update_pA_multi_factor_all ;
    code:isDocumented true ;
    code:name "test_update_pA_multi_factor_all" .

code:Tests_test_update_pA_multi_factor_one_modality____test_test_learning_py__test_update_pA_multi_factor_one_modality a code:Function ;
    code:comments "multiple observation modalities" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over sensory likelihood (pA)
        in the case that ONE observation modalities is updated and the generative model 
        has multiple hidden state factors""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pA_multi_factor_one_modality(self)" ;
    code:hasInput code:Parameter_self_test_update_pA_multi_factor_one_modality ;
    code:isDocumented true ;
    code:name "test_update_pA_multi_factor_one_modality" .

code:Tests_test_update_pA_multi_factor_some_modalities____test_test_learning_py__test_update_pA_multi_factor_some_modalities a code:Function ;
    code:comments "multiple observation modalities" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over sensory likelihood (pA)
        in the case that SOME observation modalities are updated and the generative model 
        has multiple hidden state factors""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pA_multi_factor_some_modalities(self)" ;
    code:hasInput code:Parameter_self_test_update_pA_multi_factor_some_modalities ;
    code:isDocumented true ;
    code:name "test_update_pA_multi_factor_some_modalities" .

code:Tests_test_update_pA_single_factor_all____test_test_learning_py__test_update_pA_single_factor_all a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over sensory likelihood (pA)
        in the case that all observation modalities are updated and the generative model 
        has a single hidden state factor""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pA_single_factor_all(self)" ;
    code:hasInput code:Parameter_self_test_update_pA_single_factor_all ;
    code:isDocumented true ;
    code:name "test_update_pA_single_factor_all" .

code:Tests_test_update_pA_single_factor_one_modality____test_test_learning_py__test_update_pA_single_factor_one_modality a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over sensory likelihood (pA)
        in the case that ONE observation modalities is updated and the generative model 
        has a single hidden state factor""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pA_single_factor_one_modality(self)" ;
    code:hasInput code:Parameter_self_test_update_pA_single_factor_one_modality ;
    code:isDocumented true ;
    code:name "test_update_pA_single_factor_one_modality" .

code:Tests_test_update_pA_single_factor_some_modalities____test_test_learning_py__test_update_pA_single_factor_some_modalities a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over sensory likelihood (pA)
        in the case that some observation modalities are updated and the generative model 
        has a single hidden state factor""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pA_single_factor_some_modalities(self)" ;
    code:hasInput code:Parameter_self_test_update_pA_single_factor_some_modalities ;
    code:isDocumented true ;
    code:name "test_update_pA_single_factor_some_modalities" .

code:Tests_test_update_pB_interactions____test_test_learning_py__test_update_pB_interactions a code:Function ;
    code:comments "sample some positive learning rate, sample some positive learning rate" ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for `learning.update_state_likelihood_dirichlet_factorized`, which is the learning function updating prior Dirichlet parameters over the transition likelihood (pB) 
        in the case that there are allowable interactions between hidden state factors, i.e. the dynamics of factor `f` may depend on more than just its control factor and its own state.""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_interactions(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_interactions ;
    code:isDocumented true ;
    code:name "test_update_pB_interactions" .

code:Tests_test_update_pB_multi_factor_no_actions_all_factors____test_test_learning_py__test_update_pB_multi_factor_no_actions_all_factors a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over transition likelihood (pB)
        in the case that there are mulitple hidden state factors, and there 
        are no actions. All factors are updated.""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_multi_factor_no_actions_all_factors(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_multi_factor_no_actions_all_factors ;
    code:isDocumented true ;
    code:name "test_update_pB_multi_factor_no_actions_all_factors" .

code:Tests_test_update_pB_multi_factor_no_actions_one_factor____test_test_learning_py__test_update_pB_multi_factor_no_actions_one_factor a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over transition likelihood (pB)
        in the case that there are mulitple hidden state factors, and there 
        are no actions. One factor is updated""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_multi_factor_no_actions_one_factor(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_multi_factor_no_actions_one_factor ;
    code:isDocumented true ;
    code:name "test_update_pB_multi_factor_no_actions_one_factor" .

code:Tests_test_update_pB_multi_factor_no_actions_some_factors____test_test_learning_py__test_update_pB_multi_factor_no_actions_some_factors a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over transition likelihood (pB)
        in the case that there are mulitple hidden state factors, and there 
        are no actions. Some factors are updated.""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_multi_factor_no_actions_some_factors(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_multi_factor_no_actions_some_factors ;
    code:isDocumented true ;
    code:name "test_update_pB_multi_factor_no_actions_some_factors" .

code:Tests_test_update_pB_multi_factor_some_controllable_some_factors____test_test_learning_py__test_update_pB_multi_factor_some_controllable_some_factors a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over transition likelihood (pB)
        in the case that there are mulitple hidden state factors, some of which 
        are controllable. Some factors are updated.""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_multi_factor_some_controllable_some_factors(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_multi_factor_some_controllable_some_factors ;
    code:isDocumented true ;
    code:name "test_update_pB_multi_factor_some_controllable_some_factors" .

code:Tests_test_update_pB_multi_factor_with_actions_all_factors____test_test_learning_py__test_update_pB_multi_factor_with_actions_all_factors a code:Function ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over transition likelihood (pB)
        in the case that there are mulitple hidden state factors, and there 
        are actions. All factors are updated""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_multi_factor_with_actions_all_factors(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_multi_factor_with_actions_all_factors ;
    code:isDocumented true ;
    code:name "test_update_pB_multi_factor_with_actions_all_factors" .

code:Tests_test_update_pB_multi_factor_with_actions_one_factor____test_test_learning_py__test_update_pB_multi_factor_with_actions_one_factor a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over transition likelihood (pB)
        in the case that there are mulitple hidden state factors, and there 
        are actions. One factor is updated""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_multi_factor_with_actions_one_factor(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_multi_factor_with_actions_one_factor ;
    code:isDocumented true ;
    code:name "test_update_pB_multi_factor_with_actions_one_factor" .

code:Tests_test_update_pB_multi_factor_with_actions_some_factors____test_test_learning_py__test_update_pB_multi_factor_with_actions_some_factors a code:Function ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over transition likelihood (pB)
        in the case that there are mulitple hidden state factors, and there 
        are actions. Some factors are updated""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_multi_factor_with_actions_some_factors(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_multi_factor_with_actions_some_factors ;
    code:isDocumented true ;
    code:name "test_update_pB_multi_factor_with_actions_some_factors" .

code:Tests_test_update_pB_single_factor_no_actions____test_test_learning_py__test_update_pB_single_factor_no_actions a code:Function ;
    code:comments "this is how we encode the fact that there aren't any actions" ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over transition likelihood (pB)
        in the case that the one and only hidden state factor is updated, and there 
        are no actions.""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_single_factor_no_actions(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_single_factor_no_actions ;
    code:isDocumented true ;
    code:name "test_update_pB_single_factor_no_actions" .

code:Tests_test_update_pB_single_factor_with_actions____test_test_learning_py__test_update_pB_single_factor_with_actions a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test for updating prior Dirichlet parameters over transition likelihood (pB)
        in the case that the one and only hidden state factor is updated, and there 
        are actions.""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pB_single_factor_with_actions(self)" ;
    code:hasInput code:Parameter_self_test_update_pB_single_factor_with_actions ;
    code:isDocumented true ;
    code:name "test_update_pB_single_factor_with_actions" .

code:Tests_test_update_pD____test_test_learning_py__test_update_pD a code:Function ;
    code:comments "1. Single hidden state factor, 2. Multiple hidden state factors, 3. Multiple hidden state factors, only some learned" ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Test updating prior Dirichlet parameters over initial hidden states (pD). 
        Tests different cases
        1. Multiple vs. single hidden state factor
        2. One factor vs. several factors vs. all factors learned""" ;
    code:function_exe_cmd "test.test_learning.TestLearning.test_update_pD(self)" ;
    code:hasInput code:Parameter_self_test_update_pD ;
    code:isDocumented true ;
    code:name "test_update_pD" .

code:Tests_test_update_posterior_policies_factorized____test_test_control_py__test_update_posterior_policies_factorized a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Test new update_posterior_policies_factorized function, just to make sure it runs through and outputs correct shapes" ;
    code:function_exe_cmd "test.test_control.TestControl.test_update_posterior_policies_factorized(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_policies_factorized ;
    code:isDocumented true ;
    code:name "test_update_posterior_policies_factorized" .

code:Tests_test_update_posterior_policies_pA_infogain____test_test_control_py__test_update_posterior_policies_pA_infogain a code:Function ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the refactored (Categorical-less) version of `update_posterior_policies`, using only the information gain (about likelihood parameters) component of the expected free energy" ;
    code:function_exe_cmd "test.test_control.TestControl.test_update_posterior_policies_pA_infogain(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_policies_pA_infogain ;
    code:isDocumented true ;
    code:name "test_update_posterior_policies_pA_infogain" .

code:Tests_test_update_posterior_policies_pB_infogain____test_test_control_py__test_update_posterior_policies_pB_infogain a code:Function ;
    code:complexity "Complexity: 4" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the refactored (Categorical-less) version of `update_posterior_policies`, using only the information gain (about transition likelihood parameters) component of the expected free energy" ;
    code:function_exe_cmd "test.test_control.TestControl.test_update_posterior_policies_pB_infogain(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_policies_pB_infogain ;
    code:isDocumented true ;
    code:name "test_update_posterior_policies_pB_infogain" .

code:Tests_test_update_posterior_policies_states_infogain____test_test_control_py__test_update_posterior_policies_states_infogain a code:Function ;
    code:complexity "Complexity: 5" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the refactored (Categorical-less) version of `update_posterior_policies`, using only the information gain (about states) component of the expected free energy" ;
    code:function_exe_cmd "test.test_control.TestControl.test_update_posterior_policies_states_infogain(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_policies_states_infogain ;
    code:isDocumented true ;
    code:name "test_update_posterior_policies_states_infogain" .

code:Tests_test_update_posterior_policies_utility____test_test_control_py__test_update_posterior_policies_utility a code:Function ;
    code:complexity "Complexity: 7" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the refactored (Categorical-less) version of `update_posterior_policies`, using only the expected utility component of the expected free energy" ;
    code:function_exe_cmd "test.test_control.TestControl.test_update_posterior_policies_utility(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_policies_utility ;
    code:isDocumented true ;
    code:name "test_update_posterior_policies_utility" .

code:Tests_test_update_posterior_policies_withE_vector____test_test_control_py__test_update_posterior_policies_withE_vector a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Test update posterior policies in the case that there is a prior over policies" ;
    code:function_exe_cmd "test.test_control.TestControl.test_update_posterior_policies_withE_vector(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_policies_withE_vector ;
    code:isDocumented true ;
    code:name "test_update_posterior_policies_withE_vector" .

code:Tests_test_update_posterior_states____test_test_inference_py__test_update_posterior_states a code:Function ;
    code:comments "validate with a quick n' dirty implementation of FPI, initialize posterior and log prior, which axes to sum out" ;
    code:complexity "Complexity: 6" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring "Tests the refactored version of `update_posterior_states`" ;
    code:function_exe_cmd "test.test_inference.TestInference.test_update_posterior_states(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_states ;
    code:isDocumented true ;
    code:name "test_update_posterior_states" .

code:Tests_test_update_posterior_states_factorized____test_test_inference_py__test_update_posterior_states_factorized a code:Function ;
    code:comments "list of the factors that modality `m` does not depend on, broadcast or tile the reduced A matrix (`A_reduced`) along the dimensions of corresponding to `other_factors`" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Tests the version of `update_posterior_states` where an `mb_dict` is provided as an argument to factorize
        the fixed-point iteration (FPI) algorithm.""" ;
    code:function_exe_cmd "test.test_inference.TestInference.test_update_posterior_states_factorized(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_states_factorized ;
    code:isDocumented true ;
    code:name "test_update_posterior_states_factorized" .

code:Tests_test_update_posterior_states_factorized_noVFE_compute____test_test_inference_py__test_update_posterior_states_factorized_noVFE_compute a code:Function ;
    code:comments "list of the factors that modality `m` does not depend on, broadcast or tile the reduced A matrix (`A_reduced`) along the dimensions of corresponding to `other_factors`" ;
    code:complexity "Complexity: 3" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Tests the version of `update_posterior_states` where an `mb_dict` is provided as an argument to factorize
        the fixed-point iteration (FPI) algorithm.

        In this version, we always run the total number of iterations because we don't compute the variational free energy over the course of convergence/optimization.""" ;
    code:function_exe_cmd "test.test_inference.TestInference.test_update_posterior_states_factorized_noVFE_compute(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_states_factorized_noVFE_compute ;
    code:isDocumented true ;
    code:name "test_update_posterior_states_factorized_noVFE_compute" .

code:Tests_test_update_posterior_states_factorized_single_factor____test_test_inference_py__test_update_posterior_states_factorized_single_factor a code:Function ;
    code:complexity "Complexity: 1" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:docstring """Tests the version of `update_posterior_states` where an `mb_dict` is provided as an argument to factorize
        the fixed-point iteration (FPI) algorithm. Single factor version.""" ;
    code:function_exe_cmd "test.test_inference.TestInference.test_update_posterior_states_factorized_single_factor(self)" ;
    code:hasInput code:Parameter_self_test_update_posterior_states_factorized_single_factor ;
    code:isDocumented true ;
    code:name "test_update_posterior_states_factorized_single_factor" .

code:Tests_test_vmappable_agent_methods____test_test_agent_jax_py__test_vmappable_agent_methods a code:Function ;
    code:comments "validate that the method broadcasted properly" ;
    code:complexity "Complexity: 2" ;
    code:description "Description: " ;
    code:descriptionEmbedding "DescriptionEmbedding: " ;
    code:function_exe_cmd "test.test_agent_jax.TestAgentJax.test_vmappable_agent_methods(self)" ;
    code:hasInput code:Parameter_self_test_vmappable_agent_methods ;
    code:isDocumented false ;
    code:name "test_vmappable_agent_methods" .

code:Parameter_A_calc_ambiguity_factorized a code:Parameter ;
    code:name "A" .

code:Parameter_A_calc_states_info_gain a code:Parameter ;
    code:name "A" .

code:Parameter_A_calc_states_info_gain_factorized a code:Parameter ;
    code:name "A" .

code:Parameter_A_compute_G_policy a code:Parameter ;
    code:name "A" .

code:Parameter_A_compute_G_policy_inductive a code:Parameter ;
    code:name "A" .

code:Parameter_A_compute_accuracy a code:Parameter ;
    code:name "A" .

code:Parameter_A_compute_expected_obs a code:Parameter ;
    code:name "A" .

code:Parameter_A_compute_free_energy a code:Parameter ;
    code:name "A" .

code:Parameter_A_compute_info_gain a code:Parameter ;
    code:name "A" .

code:Parameter_A_compute_log_likelihood a code:Parameter ;
    code:name "A" .

code:Parameter_A_compute_log_likelihood_per_modality a code:Parameter ;
    code:name "A" .

code:Parameter_A_dependencies_calc_pA_info_gain a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_compute_G_policy a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_compute_G_policy_inductive a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_compute_expected_obs a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_compute_info_gain a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_make_A_full a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_run_factorized_fpi a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_run_mmp a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_run_online_filtering a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_run_vmp a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_update_marginals a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_update_posterior_policies a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_update_posterior_policies_inductive a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_update_posterior_states a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_update_variational_filtering a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dependencies_variational_filtering_step a code:Parameter ;
    code:name "A_dependencies" .

code:Parameter_A_dot_likelihood a code:Parameter ;
    code:name "A" .

code:Parameter_A_entropy a code:Parameter ;
    code:name "A" .

code:Parameter_A_factor_list_calc_ambiguity_factorized a code:Parameter ;
    code:name "A_factor_list" .

code:Parameter_A_factor_list_calc_pA_info_gain_factorized a code:Parameter ;
    code:name "A_factor_list" .

code:Parameter_A_factor_list_calc_states_info_gain_factorized a code:Parameter ;
    code:name "A_factor_list" .

code:Parameter_A_factor_list_get_expected_obs_factorized a code:Parameter ;
    code:name "A_factor_list" .

code:Parameter_A_factor_list_random_A_matrix a code:Parameter ;
    code:name "A_factor_list" .

code:Parameter_A_factor_list_sophisticated_inference_search a code:Parameter ;
    code:name "A_factor_list" .

code:Parameter_A_factor_list_update_obs_likelihood_dirichlet_factorized a code:Parameter ;
    code:name "A_factor_list" .

code:Parameter_A_factor_list_update_posterior_policies_factorized a code:Parameter ;
    code:name "A_factor_list" .

code:Parameter_A_factor_list_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "A_factor_list" .

code:Parameter_A_get_expected_obs a code:Parameter ;
    code:name "A" .

code:Parameter_A_get_expected_obs_factorized a code:Parameter ;
    code:name "A" .

code:Parameter_A_get_joint_likelihood a code:Parameter ;
    code:name "A" .

code:Parameter_A_get_joint_likelihood_seq a code:Parameter ;
    code:name "A" .

code:Parameter_A_get_joint_likelihood_seq_by_modality a code:Parameter ;
    code:name "A" .

code:Parameter_A_get_model_dimensions a code:Parameter ;
    code:name "A" .

code:Parameter_A_m_compute_log_likelihood_single_modality a code:Parameter ;
    code:name "A_m" .

code:Parameter_A_m_get_likelihood_single_modality a code:Parameter ;
    code:name "A_m" .

code:Parameter_A_plot_likelihood a code:Parameter ;
    code:name "A" .

code:Parameter_A_reduce_a_matrix a code:Parameter ;
    code:name "A" .

code:Parameter_A_reduced_construct_full_a a code:Parameter ;
    code:name "A_reduced" .

code:Parameter_A_reduced_make_A_full a code:Parameter ;
    code:name "A_reduced" .

code:Parameter_A_run_factorized_fpi a code:Parameter ;
    code:name "A" .

code:Parameter_A_run_mmp a code:Parameter ;
    code:name "A" .

code:Parameter_A_run_online_filtering a code:Parameter ;
    code:name "A" .

code:Parameter_A_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "A" .

code:Parameter_A_run_vmp a code:Parameter ;
    code:name "A" .

code:Parameter_A_sophisticated_inference_search a code:Parameter ;
    code:name "A" .

code:Parameter_A_spm_MDP_G a code:Parameter ;
    code:name "A" .

code:Parameter_A_spm_calc_neg_ambig a code:Parameter ;
    code:name "A" .

code:Parameter_A_spm_calc_qo_entropy a code:Parameter ;
    code:name "A" .

code:Parameter_A_spm_norm a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_marginals a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_obs_likelihood_dirichlet_factorized a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_posterior_policies_factorized a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_posterior_policies_full a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_posterior_policies_inductive a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_posterior_states_factorized a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_posterior_states_full a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_posterior_states_full_factorized a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_variational_filtering a code:Parameter ;
    code:name "A" .

code:Parameter_B_backwards_induction a code:Parameter ;
    code:name "B" .

code:Parameter_B_compute_G_policy a code:Parameter ;
    code:name "B" .

code:Parameter_B_compute_G_policy_inductive a code:Parameter ;
    code:name "B" .

code:Parameter_B_compute_expected_state a code:Parameter ;
    code:name "B" .

code:Parameter_B_compute_expected_state_and_Bs a code:Parameter ;
    code:name "B" .

code:Parameter_B_dependencies_calc_pB_info_gain a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_compute_G_policy a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_compute_G_policy_inductive a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_compute_expected_state a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_get_vmp_messages a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_run_mmp a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_run_vmp a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_update_marginals a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_update_posterior_policies a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_update_posterior_policies_inductive a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_dependencies_update_posterior_states a code:Parameter ;
    code:name "B_dependencies" .

code:Parameter_B_deps_get_mmp_messages a code:Parameter ;
    code:name "B_deps" .

code:Parameter_B_factor_list_backwards_induction a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_factor_list_calc_pB_info_gain_interactions a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_factor_list_get_expected_states_interactions a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_factor_list_random_B_matrix a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_factor_list_run_mmp_factorized a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_factor_list_sophisticated_inference_search a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_factor_list_update_posterior_policies_factorized a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_factor_list_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_factor_list_update_posterior_states_full_factorized a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_factor_list_update_state_likelihood_dirichlet_interactions a code:Parameter ;
    code:name "B_factor_list" .

code:Parameter_B_generate_I_matrix a code:Parameter ;
    code:name "B" .

code:Parameter_B_get_expected_states a code:Parameter ;
    code:name "B" .

code:Parameter_B_get_expected_states_interactions a code:Parameter ;
    code:name "B" .

code:Parameter_B_get_mmp_messages a code:Parameter ;
    code:name "B" .

code:Parameter_B_get_model_dimensions a code:Parameter ;
    code:name "B" .

code:Parameter_B_get_vmp_messages a code:Parameter ;
    code:name "B" .

code:Parameter_B_run_mmp_factorized a code:Parameter ;
    code:name "B" .

code:Parameter_B_run_online_filtering a code:Parameter ;
    code:name "B" .

code:Parameter_B_run_vmp a code:Parameter ;
    code:name "B" .

code:Parameter_B_smoothing_ovf a code:Parameter ;
    code:name "B" .

code:Parameter_B_sophisticated_inference_search a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_marginals a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_posterior_policies_factorized a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_posterior_policies_full a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_posterior_policies_inductive a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_posterior_states a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_posterior_states_full a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_posterior_states_full_factorized a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_state_likelihood_dirichlet a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_state_likelihood_dirichlet_interactions a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_state_transition_dirichlet a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_variational_filtering a code:Parameter ;
    code:name "B" .

code:Parameter_Bs_variational_filtering_step a code:Parameter ;
    code:name "Bs" .

code:Parameter_C_calc_expected_utility a code:Parameter ;
    code:name "C" .

code:Parameter_C_compute_G_policy a code:Parameter ;
    code:name "C" .

code:Parameter_C_compute_G_policy_inductive a code:Parameter ;
    code:name "C" .

code:Parameter_C_compute_expected_utility a code:Parameter ;
    code:name "C" .

code:Parameter_C_sophisticated_inference_search a code:Parameter ;
    code:name "C" .

code:Parameter_C_update_posterior_policies_factorized a code:Parameter ;
    code:name "C" .

code:Parameter_C_update_posterior_policies_full a code:Parameter ;
    code:name "C" .

code:Parameter_C_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "C" .

code:Parameter_C_update_posterior_policies_inductive a code:Parameter ;
    code:name "C" .

code:Parameter_E_update_posterior_policies_factorized a code:Parameter ;
    code:name "E" .

code:Parameter_E_update_posterior_policies_full a code:Parameter ;
    code:name "E" .

code:Parameter_E_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "E" .

code:Parameter_E_update_posterior_policies_inductive a code:Parameter ;
    code:name "E" .

code:Parameter_F_update_posterior_policies_full a code:Parameter ;
    code:name "F" .

code:Parameter_F_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "F" .

code:Parameter_H_backwards_induction a code:Parameter ;
    code:name "H" .

code:Parameter_H_generate_I_matrix a code:Parameter ;
    code:name "H" .

code:Parameter_I_calc_inductive_cost a code:Parameter ;
    code:name "I" .

code:Parameter_I_calc_inductive_value_t a code:Parameter ;
    code:name "I" .

code:Parameter_I_compute_G_policy_inductive a code:Parameter ;
    code:name "I" .

code:Parameter_I_sophisticated_inference_search a code:Parameter ;
    code:name "I" .

code:Parameter_I_update_posterior_policies a code:Parameter ;
    code:name "I" .

code:Parameter_I_update_posterior_policies_factorized a code:Parameter ;
    code:name "I" .

code:Parameter_I_update_posterior_policies_full a code:Parameter ;
    code:name "I" .

code:Parameter_I_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "I" .

code:Parameter_I_update_posterior_policies_inductive a code:Parameter ;
    code:name "I" .

code:Parameter_M_factor_dot a code:Parameter ;
    code:name "M" .

code:Parameter_Na_aif_likelihood a code:Parameter ;
    code:name "Na" .

code:Parameter_Nb_aif_likelihood a code:Parameter ;
    code:name "Nb" .

code:Parameter_Nt_aif_likelihood a code:Parameter ;
    code:name "Nt" .

code:Parameter_P_kl_div a code:Parameter ;
    code:name "P" .

code:Parameter_Q_kl_div a code:Parameter ;
    code:name "Q" .

code:Parameter_X_spm_dot a code:Parameter ;
    code:name "X" .

code:Parameter_X_spm_dot_classic a code:Parameter ;
    code:name "X" .

code:Parameter_X_spm_dot_old a code:Parameter ;
    code:name "X" .

code:Parameter_action_step a code:Parameter ;
    code:name "action" .

code:Parameter_action_update_empirical_prior a code:Parameter ;
    code:name "action" .

code:Parameter_actions_f_update_state_transition_dirichlet_f a code:Parameter ;
    code:name "actions_f" .

code:Parameter_actions_infer_parameters a code:Parameter ;
    code:name "actions" .

code:Parameter_actions_joint_dist_factor a code:Parameter ;
    code:name "actions" .

code:Parameter_actions_select_probs a code:Parameter ;
    code:name "actions" .

code:Parameter_actions_update_state_likelihood_dirichlet a code:Parameter ;
    code:name "actions" .

code:Parameter_actions_update_state_likelihood_dirichlet_interactions a code:Parameter ;
    code:name "actions" .

code:Parameter_actions_update_state_transition_dirichlet a code:Parameter ;
    code:name "actions" .

code:Parameter_agent_aif_likelihood a code:Parameter ;
    code:name "agent" .

code:Parameter_agent_evolve_trials a code:Parameter ;
    code:name "agent" .

code:Parameter_all_factor_lists_all_marginal_log_likelihood a code:Parameter ;
    code:name "all_factor_lists" .

code:Parameter_arr_is_obj_array a code:Parameter ;
    code:name "arr" .

code:Parameter_arr_sample_obj_array a code:Parameter ;
    code:name "arr" .

code:Parameter_arr_softmax_obj_arr a code:Parameter ;
    code:name "arr" .

code:Parameter_arr_spm_log_single a code:Parameter ;
    code:name "arr" .

code:Parameter_arr_to_obj_array a code:Parameter ;
    code:name "arr" .

code:Parameter_arrs_multidimensional_outer a code:Parameter ;
    code:name "arrs" .

code:Parameter_b_joint_dist_factor a code:Parameter ;
    code:name "b" .

code:Parameter_belief_dist_plot_beliefs a code:Parameter ;
    code:name "belief_dist" .

code:Parameter_beliefs_A_infer_parameters a code:Parameter ;
    code:name "beliefs_A" .

code:Parameter_beliefs_B_infer_parameters a code:Parameter ;
    code:name "beliefs_B" .

code:Parameter_compute_vfe_run_vanilla_fpi a code:Parameter ;
    code:name "compute_vfe" .

code:Parameter_compute_vfe_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "compute_vfe" .

code:Parameter_dF_run_vanilla_fpi a code:Parameter ;
    code:name "dF" .

code:Parameter_dF_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "dF" .

code:Parameter_dF_tol_run_vanilla_fpi a code:Parameter ;
    code:name "dF_tol" .

code:Parameter_dF_tol_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "dF_tol" .

code:Parameter_data_aif_likelihood a code:Parameter ;
    code:name "data" .

code:Parameter_data_evolve_trials a code:Parameter ;
    code:name "data" .

code:Parameter_dependencies_m_update_obs_likelihood_dirichlet_m a code:Parameter ;
    code:name "dependencies_m" .

code:Parameter_dependency_list_select_probs a code:Parameter ;
    code:name "dependency_list" .

code:Parameter_depth_backwards_induction a code:Parameter ;
    code:name "depth" .

code:Parameter_depth_generate_I_matrix a code:Parameter ;
    code:name "depth" .

code:Parameter_dims_to_omit_spm_dot a code:Parameter ;
    code:name "dims_to_omit" .

code:Parameter_dims_to_omit_spm_dot_classic a code:Parameter ;
    code:name "dims_to_omit" .

code:Parameter_dims_to_omit_spm_dot_old a code:Parameter ;
    code:name "dims_to_omit" .

code:Parameter_dir_arr_dirichlet_expected_value a code:Parameter ;
    code:name "dir_arr" .

code:Parameter_dist_is_normalized a code:Parameter ;
    code:name "dist" .

code:Parameter_dist_softmax a code:Parameter ;
    code:name "dist" .

code:Parameter_distr_obs_compute_log_likelihood a code:Parameter ;
    code:name "distr_obs" .

code:Parameter_distr_obs_compute_log_likelihood_per_modality a code:Parameter ;
    code:name "distr_obs" .

code:Parameter_distr_obs_compute_log_likelihood_single_modality a code:Parameter ;
    code:name "distr_obs" .

code:Parameter_distr_obs_get_likelihood_single_modality a code:Parameter ;
    code:name "distr_obs" .

code:Parameter_distr_obs_infer_states a code:Parameter ;
    code:name "distr_obs" .

code:Parameter_distr_obs_run_vanilla_fpi a code:Parameter ;
    code:name "distr_obs" .

code:Parameter_empirical_prior_infer_states a code:Parameter ;
    code:name "empirical_prior" .

code:Parameter_epsilon_calc_inductive_cost a code:Parameter ;
    code:name "epsilon" .

code:Parameter_epsilon_calc_inductive_value_t a code:Parameter ;
    code:name "epsilon" .

code:Parameter_factor_list_m_mll_factors a code:Parameter ;
    code:name "factor_list_m" .

code:Parameter_factorized_get_model_dimensions a code:Parameter ;
    code:name "factorized" .

code:Parameter_factors_update_state_likelihood_dirichlet a code:Parameter ;
    code:name "factors" .

code:Parameter_factors_update_state_likelihood_dirichlet_interactions a code:Parameter ;
    code:name "factors" .

code:Parameter_factors_update_state_prior_dirichlet a code:Parameter ;
    code:name "factors" .

code:Parameter_filtered_post_smoothing_ovf a code:Parameter ;
    code:name "filtered_post" .

code:Parameter_filtered_qs_joint_dist_factor a code:Parameter ;
    code:name "filtered_qs" .

code:Parameter_gamma_sophisticated_inference_search a code:Parameter ;
    code:name "gamma" .

code:Parameter_gamma_update_posterior_policies_factorized a code:Parameter ;
    code:name "gamma" .

code:Parameter_gamma_update_posterior_policies_full a code:Parameter ;
    code:name "gamma" .

code:Parameter_gamma_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "gamma" .

code:Parameter_gamma_update_posterior_policies_inductive a code:Parameter ;
    code:name "gamma" .

code:Parameter_get_messages_update_marginals a code:Parameter ;
    code:name "get_messages" .

code:Parameter_grad_descent_run_mmp a code:Parameter ;
    code:name "grad_descent" .

code:Parameter_grad_descent_run_mmp_factorized a code:Parameter ;
    code:name "grad_descent" .

code:Parameter_horizon_sophisticated_inference_search a code:Parameter ;
    code:name "horizon" .

code:Parameter_i_marginal_log_likelihood a code:Parameter ;
    code:name "i" .

code:Parameter_indices_insert_multiple a code:Parameter ;
    code:name "indices" .

code:Parameter_inductive_epsilon_compute_G_policy_inductive a code:Parameter ;
    code:name "inductive_epsilon" .

code:Parameter_inductive_epsilon_update_posterior_policies_inductive a code:Parameter ;
    code:name "inductive_epsilon" .

code:Parameter_inference_params_sophisticated_inference_search a code:Parameter ;
    code:name "inference_params" .

code:Parameter_init_qs_reset a code:Parameter ;
    code:name "init_qs" .

code:Parameter_items_insert_multiple a code:Parameter ;
    code:name "items" .

code:Parameter_joint_beliefs_update_state_transition_dirichlet a code:Parameter ;
    code:name "joint_beliefs" .

code:Parameter_joint_qs_f_update_state_transition_dirichlet_f a code:Parameter ;
    code:name "joint_qs_f" .

code:Parameter_keep_dims_factor_dot a code:Parameter ;
    code:name "keep_dims" .

code:Parameter_key_cat_sample a code:Parameter ;
    code:name "key" .

code:Parameter_key_reset a code:Parameter ;
    code:name "key" .

code:Parameter_key_step a code:Parameter ;
    code:name "key" .

code:Parameter_last_belief_set_latest_beliefs a code:Parameter ;
    code:name "last_belief" .

code:Parameter_last_timestep_run_mmp a code:Parameter ;
    code:name "last_timestep" .

code:Parameter_last_timestep_run_mmp_factorized a code:Parameter ;
    code:name "last_timestep" .

code:Parameter_lh_seq_run_mmp a code:Parameter ;
    code:name "lh_seq" .

code:Parameter_lh_seq_run_mmp_factorized a code:Parameter ;
    code:name "lh_seq" .

code:Parameter_likelihood_calc_free_energy a code:Parameter ;
    code:name "likelihood" .

code:Parameter_list_input_obj_array_from_list a code:Parameter ;
    code:name "list_input" .

code:Parameter_ll_m_mll_factors a code:Parameter ;
    code:name "ll_m" .

code:Parameter_lnB_future_mirror_gradient_descent_step a code:Parameter ;
    code:name "lnB_future" .

code:Parameter_lnB_past_mirror_gradient_descent_step a code:Parameter ;
    code:name "lnB_past" .

code:Parameter_ln_A_mirror_gradient_descent_step a code:Parameter ;
    code:name "ln_A" .

code:Parameter_ln_As_variational_filtering_step a code:Parameter ;
    code:name "ln_As" .

code:Parameter_ln_B_get_mmp_messages a code:Parameter ;
    code:name "ln_B" .

code:Parameter_ln_B_get_vmp_messages a code:Parameter ;
    code:name "ln_B" .

code:Parameter_ln_prior_get_mmp_messages a code:Parameter ;
    code:name "ln_prior" .

code:Parameter_ln_prior_get_vmp_messages a code:Parameter ;
    code:name "ln_prior" .

code:Parameter_ln_qs_mirror_gradient_descent_step a code:Parameter ;
    code:name "ln_qs" .

code:Parameter_log_likelihood_compute_accuracy a code:Parameter ;
    code:name "log_likelihood" .

code:Parameter_log_likelihood_marginal_log_likelihood a code:Parameter ;
    code:name "log_likelihood" .

code:Parameter_log_likelihoods_all_marginal_log_likelihood a code:Parameter ;
    code:name "log_likelihoods" .

code:Parameter_lr_pA_infer_parameters a code:Parameter ;
    code:name "lr_pA" .

code:Parameter_lr_pB_infer_parameters a code:Parameter ;
    code:name "lr_pB" .

code:Parameter_lr_update_obs_likelihood_dirichlet a code:Parameter ;
    code:name "lr" .

code:Parameter_lr_update_obs_likelihood_dirichlet_factorized a code:Parameter ;
    code:name "lr" .

code:Parameter_lr_update_obs_likelihood_dirichlet_m a code:Parameter ;
    code:name "lr" .

code:Parameter_lr_update_state_likelihood_dirichlet a code:Parameter ;
    code:name "lr" .

code:Parameter_lr_update_state_likelihood_dirichlet_interactions a code:Parameter ;
    code:name "lr" .

code:Parameter_lr_update_state_prior_dirichlet a code:Parameter ;
    code:name "lr" .

code:Parameter_lr_update_state_transition_dirichlet_f a code:Parameter ;
    code:name "lr" .

code:Parameter_matrix_select_probs a code:Parameter ;
    code:name "matrix" .

code:Parameter_mb_dict_run_mmp_factorized a code:Parameter ;
    code:name "mb_dict" .

code:Parameter_mb_dict_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "mb_dict" .

code:Parameter_mb_dict_update_posterior_states_factorized a code:Parameter ;
    code:name "mb_dict" .

code:Parameter_mb_dict_update_posterior_states_full_factorized a code:Parameter ;
    code:name "mb_dict" .

code:Parameter_method_update_posterior_states a code:Parameter ;
    code:name "method" .

code:Parameter_modalities_update_obs_likelihood_dirichlet a code:Parameter ;
    code:name "modalities" .

code:Parameter_modalities_update_obs_likelihood_dirichlet_factorized a code:Parameter ;
    code:name "modalities" .

code:Parameter_model_labels_get_model_dimensions_from_labels a code:Parameter ;
    code:name "model_labels" .

code:Parameter_n_factors_calc_free_energy a code:Parameter ;
    code:name "n_factors" .

code:Parameter_n_modalities_process_observation_seq a code:Parameter ;
    code:name "n_modalities" .

code:Parameter_n_observations_process_observation_seq a code:Parameter ;
    code:name "n_observations" .

code:Parameter_n_sophisticated_inference_search a code:Parameter ;
    code:name "n" .

code:Parameter_num_arr_obj_array a code:Parameter ;
    code:name "num_arr" .

code:Parameter_num_controls_construct_controllable_B a code:Parameter ;
    code:name "num_controls" .

code:Parameter_num_controls_get_marginals a code:Parameter ;
    code:name "num_controls" .

code:Parameter_num_controls_initialize_empty_B a code:Parameter ;
    code:name "num_controls" .

code:Parameter_num_controls_random_B_matrix a code:Parameter ;
    code:name "num_controls" .

code:Parameter_num_controls_sample_policy a code:Parameter ;
    code:name "num_controls" .

code:Parameter_num_iter_run_factorized_fpi a code:Parameter ;
    code:name "num_iter" .

code:Parameter_num_iter_run_mmp_factorized a code:Parameter ;
    code:name "num_iter" .

code:Parameter_num_iter_run_online_filtering a code:Parameter ;
    code:name "num_iter" .

code:Parameter_num_iter_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "num_iter" .

code:Parameter_num_iter_run_vmp a code:Parameter ;
    code:name "num_iter" .

code:Parameter_num_iter_update_marginals a code:Parameter ;
    code:name "num_iter" .

code:Parameter_num_iter_update_posterior_states a code:Parameter ;
    code:name "num_iter" .

code:Parameter_num_modalities_process_observation a code:Parameter ;
    code:name "num_modalities" .

code:Parameter_num_models_make_model_configs a code:Parameter ;
    code:name "num_models" .

code:Parameter_num_obs_convert_observation_array a code:Parameter ;
    code:name "num_obs" .

code:Parameter_num_obs_initialize_empty_A a code:Parameter ;
    code:name "num_obs" .

code:Parameter_num_obs_make_A_full a code:Parameter ;
    code:name "num_obs" .

code:Parameter_num_obs_random_A_matrix a code:Parameter ;
    code:name "num_obs" .

code:Parameter_num_obs_run_vanilla_fpi a code:Parameter ;
    code:name "num_obs" .

code:Parameter_num_obs_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "num_obs" .

code:Parameter_num_obs_update_posterior_states_factorized a code:Parameter ;
    code:name "num_obs" .

code:Parameter_num_observations_process_observation a code:Parameter ;
    code:name "num_observations" .

code:Parameter_num_states_construct_controllable_B a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_construct_full_a a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_get_joint_likelihood a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_get_joint_likelihood_seq a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_get_joint_likelihood_seq_by_modality a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_initialize_empty_A a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_initialize_empty_B a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_make_A_full a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_random_A_matrix a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_random_B_matrix a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_run_vanilla_fpi a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_states_update_posterior_states_factorized a code:Parameter ;
    code:name "num_states" .

code:Parameter_num_values_onehot a code:Parameter ;
    code:name "num_values" .

code:Parameter_o_m_compute_log_likelihood_single_modality a code:Parameter ;
    code:name "o_m" .

code:Parameter_o_m_get_likelihood_single_modality a code:Parameter ;
    code:name "o_m" .

code:Parameter_obj_arr_norm_dist_obj_arr a code:Parameter ;
    code:name "obj_arr" .

code:Parameter_obj_arr_spm_log_obj_array a code:Parameter ;
    code:name "obj_arr" .

code:Parameter_obs_compute_accuracy a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_compute_free_energy a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_compute_log_likelihood a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_compute_log_likelihood_per_modality a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_convert_observation_array a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_dot_likelihood a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_get_joint_likelihood a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_get_joint_likelihood_seq a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_get_joint_likelihood_seq_by_modality a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_m_update_obs_likelihood_dirichlet_m a code:Parameter ;
    code:name "obs_m" .

code:Parameter_obs_mode_spm_dot_old a code:Parameter ;
    code:name "obs_mode" .

code:Parameter_obs_process_observation a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_run_factorized_fpi a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_run_mmp a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_run_online_filtering a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_run_vmp a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_seq_process_observation_seq a code:Parameter ;
    code:name "obs_seq" .

code:Parameter_obs_update_A a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_update_marginals a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_update_obs_likelihood_dirichlet_factorized a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_update_posterior_states_factorized a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_update_variational_filtering a code:Parameter ;
    code:name "obs" .

code:Parameter_observation_infer_states a code:Parameter ;
    code:name "observation" .

code:Parameter_observations_infer_states a code:Parameter ;
    code:name "observations" .

code:Parameter_options_array_select_highest a code:Parameter ;
    code:name "options_array" .

code:Parameter_original_factor_idx_construct_full_a a code:Parameter ;
    code:name "original_factor_idx" .

code:Parameter_outcomes_infer_parameters a code:Parameter ;
    code:name "outcomes" .

code:Parameter_output_list_array_scaled a code:Parameter ;
    code:hasDataType code:Object ;
    code:name "return" .

code:Parameter_output_list_array_uniform a code:Parameter ;
    code:hasDataType code:Object ;
    code:name "return" .

code:Parameter_output_list_array_zeros a code:Parameter ;
    code:hasDataType code:Object ;
    code:name "return" .

code:Parameter_output_make_A_full a code:Parameter ;
    code:hasDataType code:Object ;
    code:name "return" .

code:Parameter_output_make_model_configs a code:Parameter ;
    code:hasDataType code:JSON ;
    code:name "return" .

code:Parameter_output_mll_factors a code:Parameter ;
    code:hasDataType code:Object ;
    code:name "return" .

code:Parameter_output_norm_dist a code:Parameter ;
    code:hasDataType code:Object ;
    code:name "return" .

code:Parameter_pA_calc_pA_info_gain_factorized a code:Parameter ;
    code:name "pA" .

code:Parameter_pA_compute_G_policy a code:Parameter ;
    code:name "pA" .

code:Parameter_pA_compute_G_policy_inductive a code:Parameter ;
    code:name "pA" .

code:Parameter_pA_m_update_obs_likelihood_dirichlet_m a code:Parameter ;
    code:name "pA_m" .

code:Parameter_pA_update_obs_likelihood_dirichlet_factorized a code:Parameter ;
    code:name "pA" .

code:Parameter_pA_update_posterior_policies_factorized a code:Parameter ;
    code:name "pA" .

code:Parameter_pA_update_posterior_policies_full a code:Parameter ;
    code:name "pA" .

code:Parameter_pA_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "pA" .

code:Parameter_pA_update_posterior_policies_inductive a code:Parameter ;
    code:name "pA" .

code:Parameter_pB_calc_pB_info_gain_interactions a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_compute_G_policy a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_compute_G_policy_inductive a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_f_update_state_transition_dirichlet_f a code:Parameter ;
    code:name "pB_f" .

code:Parameter_pB_update_posterior_policies_factorized a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_update_posterior_policies_full a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_update_posterior_policies_inductive a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_update_state_likelihood_dirichlet a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_update_state_likelihood_dirichlet_interactions a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_update_state_transition_dirichlet a code:Parameter ;
    code:name "pB" .

code:Parameter_pD_update_state_prior_dirichlet a code:Parameter ;
    code:name "pD" .

code:Parameter_p_cat_sample a code:Parameter ;
    code:name "p" .

code:Parameter_p_dir_dirichlet_log_evidence a code:Parameter ;
    code:name "p_dir" .

code:Parameter_past_actions_smoothing_ovf a code:Parameter ;
    code:name "past_actions" .

code:Parameter_past_actions_update_posterior_states a code:Parameter ;
    code:name "past_actions" .

code:Parameter_policies_get_marginals a code:Parameter ;
    code:name "policies" .

code:Parameter_policies_get_num_controls_from_policies a code:Parameter ;
    code:name "policies" .

code:Parameter_policies_sophisticated_inference_search a code:Parameter ;
    code:name "policies" .

code:Parameter_policies_update_posterior_policies a code:Parameter ;
    code:name "policies" .

code:Parameter_policies_update_posterior_policies_factorized a code:Parameter ;
    code:name "policies" .

code:Parameter_policies_update_posterior_policies_full a code:Parameter ;
    code:name "policies" .

code:Parameter_policies_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "policies" .

code:Parameter_policies_update_posterior_states_full a code:Parameter ;
    code:name "policies" .

code:Parameter_policies_update_posterior_states_full_factorized a code:Parameter ;
    code:name "policies" .

code:Parameter_policy_calc_pB_info_gain a code:Parameter ;
    code:name "policy" .

code:Parameter_policy_calc_pB_info_gain_interactions a code:Parameter ;
    code:name "policy" .

code:Parameter_policy_get_expected_states a code:Parameter ;
    code:name "policy" .

code:Parameter_policy_get_expected_states_interactions a code:Parameter ;
    code:name "policy" .

code:Parameter_policy_i_compute_G_policy a code:Parameter ;
    code:name "policy_i" .

code:Parameter_policy_i_compute_G_policy_inductive a code:Parameter ;
    code:name "policy_i" .

code:Parameter_policy_matrix_update_posterior_policies a code:Parameter ;
    code:name "policy_matrix" .

code:Parameter_policy_matrix_update_posterior_policies_inductive a code:Parameter ;
    code:name "policy_matrix" .

code:Parameter_policy_prune_threshold_sophisticated_inference_search a code:Parameter ;
    code:name "policy_prune_threshold" .

code:Parameter_policy_run_mmp a code:Parameter ;
    code:name "policy" .

code:Parameter_policy_run_mmp_factorized a code:Parameter ;
    code:name "policy" .

code:Parameter_policy_sep_prior_update_posterior_states_full a code:Parameter ;
    code:name "policy_sep_prior" .

code:Parameter_policy_sep_prior_update_posterior_states_full_factorized a code:Parameter ;
    code:name "policy_sep_prior" .

code:Parameter_positions_select_probs a code:Parameter ;
    code:name "positions" .

code:Parameter_prev_actions_run_mmp a code:Parameter ;
    code:name "prev_actions" .

code:Parameter_prev_actions_run_mmp_factorized a code:Parameter ;
    code:name "prev_actions" .

code:Parameter_prev_actions_update_posterior_states_full a code:Parameter ;
    code:name "prev_actions" .

code:Parameter_prev_actions_update_posterior_states_full_factorized a code:Parameter ;
    code:name "prev_actions" .

code:Parameter_prev_obs_update_posterior_states_full a code:Parameter ;
    code:name "prev_obs" .

code:Parameter_prev_obs_update_posterior_states_full_factorized a code:Parameter ;
    code:name "prev_obs" .

code:Parameter_prior_calc_free_energy a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_compute_free_energy a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_run_factorized_fpi a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_run_mmp_factorized a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_run_online_filtering a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_run_vanilla_fpi_factorized a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_run_vmp a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_update_marginals a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_update_posterior_policies_full a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_update_posterior_states_factorized a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_update_posterior_states_full a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_update_posterior_states_full_factorized a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_update_variational_filtering a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_variational_filtering_step a code:Parameter ;
    code:name "prior" .

code:Parameter_probabilities_sample a code:Parameter ;
    code:name "probabilities" .

code:Parameter_prune_penalty_sophisticated_inference_search a code:Parameter ;
    code:name "prune_penalty" .

code:Parameter_q_dir_dirichlet_log_evidence a code:Parameter ;
    code:name "q_dir" .

code:Parameter_q_pi_average_states_over_policies a code:Parameter ;
    code:name "q_pi" .

code:Parameter_q_pi_get_marginals a code:Parameter ;
    code:name "q_pi" .

code:Parameter_q_pi_multiaction_probabilities a code:Parameter ;
    code:name "q_pi" .

code:Parameter_qo_calc_pA_info_gain a code:Parameter ;
    code:name "qo" .

code:Parameter_qo_compute_expected_utility a code:Parameter ;
    code:name "qo" .

code:Parameter_qo_compute_info_gain a code:Parameter ;
    code:name "qo" .

code:Parameter_qo_pi_calc_expected_utility a code:Parameter ;
    code:name "qo_pi" .

code:Parameter_qo_pi_calc_pA_info_gain a code:Parameter ;
    code:name "qo_pi" .

code:Parameter_qo_pi_calc_pA_info_gain_factorized a code:Parameter ;
    code:name "qo_pi" .

code:Parameter_qs_all_marginal_log_likelihood a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_calc_free_energy a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_calc_inductive_cost a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_calc_inductive_value_t a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_calc_pA_info_gain a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_compute_expected_obs a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_compute_free_energy a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_compute_info_gain a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_get_expected_states a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_get_expected_states_interactions a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_get_mmp_messages a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_get_vmp_messages a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_hist_update_posterior_states a code:Parameter ;
    code:name "qs_hist" .

code:Parameter_qs_infer_policies a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_init_compute_G_policy a code:Parameter ;
    code:name "qs_init" .

code:Parameter_qs_init_compute_G_policy_inductive a code:Parameter ;
    code:name "qs_init" .

code:Parameter_qs_init_update_posterior_policies a code:Parameter ;
    code:name "qs_init" .

code:Parameter_qs_init_update_posterior_policies_inductive a code:Parameter ;
    code:name "qs_init" .

code:Parameter_qs_marginal_log_likelihood a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_mll_factors a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_next_calc_inductive_value_t a code:Parameter ;
    code:name "qs_next" .

code:Parameter_qs_pi_average_states_over_policies a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_calc_ambiguity_factorized a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_calc_inductive_cost a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_calc_pA_info_gain a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_calc_pA_info_gain_factorized a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_calc_pB_info_gain a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_calc_pB_info_gain_interactions a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_calc_states_info_gain a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_calc_states_info_gain_factorized a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_get_expected_obs a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_pi_get_expected_obs_factorized a code:Parameter ;
    code:name "qs_pi" .

code:Parameter_qs_prev_calc_pB_info_gain a code:Parameter ;
    code:name "qs_prev" .

code:Parameter_qs_prev_calc_pB_info_gain_interactions a code:Parameter ;
    code:name "qs_prev" .

code:Parameter_qs_prev_update_B a code:Parameter ;
    code:name "qs_prev" .

code:Parameter_qs_prev_update_state_likelihood_dirichlet a code:Parameter ;
    code:name "qs_prev" .

code:Parameter_qs_prev_update_state_likelihood_dirichlet_interactions a code:Parameter ;
    code:name "qs_prev" .

code:Parameter_qs_prior_compute_expected_state a code:Parameter ;
    code:name "qs_prior" .

code:Parameter_qs_prior_compute_expected_state_and_Bs a code:Parameter ;
    code:name "qs_prior" .

code:Parameter_qs_seq_pi_update_posterior_policies_full a code:Parameter ;
    code:name "qs_seq_pi" .

code:Parameter_qs_seq_pi_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "qs_seq_pi" .

code:Parameter_qs_sophisticated_inference_search a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_t0_update_D a code:Parameter ;
    code:name "qs_t0" .

code:Parameter_qs_t_calc_pB_info_gain a code:Parameter ;
    code:name "qs_t" .

code:Parameter_qs_t_minus_1_calc_pB_info_gain a code:Parameter ;
    code:name "qs_t_minus_1" .

code:Parameter_qs_update_empirical_prior a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_update_obs_likelihood_dirichlet_factorized a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_update_obs_likelihood_dirichlet_m a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_update_posterior_policies a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_update_posterior_policies_factorized a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_update_state_likelihood_dirichlet a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_update_state_likelihood_dirichlet_interactions a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_update_state_prior_dirichlet a code:Parameter ;
    code:name "qs" .

code:Parameter_r_dir_dirichlet_log_evidence a code:Parameter ;
    code:name "r_dir" .

code:Parameter_rng_key_sample_policy a code:Parameter ;
    code:name "rng_key" .

code:Parameter_s_insert_multiple a code:Parameter ;
    code:name "s" .

code:Parameter_scale_dirichlet_like a code:Parameter ;
    code:name "scale" .

code:Parameter_scale_list_array_scaled a code:Parameter ;
    code:name "scale" .

code:Parameter_scale_obj_array_ones a code:Parameter ;
    code:name "scale" .

code:Parameter_self_get_future_qs a code:Parameter ;
    code:name "self" .

code:Parameter_self_get_uniform_posterior a code:Parameter ;
    code:name "self" .

code:Parameter_self_infer_parameters a code:Parameter ;
    code:name "self" .

code:Parameter_self_multiaction_probabilities a code:Parameter ;
    code:name "self" .

code:Parameter_self_reward_condition a code:Parameter ;
    code:name "self" .

code:Parameter_self_set_latest_beliefs a code:Parameter ;
    code:name "self" .

code:Parameter_self_state a code:Parameter ;
    code:name "self" .

code:Parameter_self_step_time a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_BMR_SPM_a a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_BMR_SPM_b a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_actinfloop_factorized a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_active_inference_SPM_1a a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_demo a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_distributional_obs a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_infer_states a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_init_without_control_fac_idx a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_A_learning_vanilla a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_A_learning_vanilla_factorized a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_B_learning_vanilla a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_D_learning_MMP a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_D_learning_vanilla a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_factorized_inference a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_input_alpha a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_interactions_in_B a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_sampling_mode a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_agent_with_stochastic_action_unidimensional_control a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_deterministic_action_sampling_equal_value a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_deterministic_policy_selection_equal_value a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_expected_utility a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_factorized_fpi_multi_factor_multi_modality a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_factorized_fpi_multi_factor_multi_modality_with_condind a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_factorized_fpi_multi_factor_one_modality a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_factorized_fpi_multi_factor_single_modality_with_condind a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_factorized_fpi_one_factor_multi_modality a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_factorized_fpi_one_factor_one_modality a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_fixed_point_iteration a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_fixed_point_iteration_factorized_fullyconnected a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_fixed_point_iteration_factorized_sparsegraph a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_fixed_point_iteration_index_observations a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_fixed_point_iteration_multistate_multiobs a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_fixed_point_iteration_multistate_singleobs a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_fixed_point_iteration_singlestate_multiobs a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_fixed_point_iteration_singlestate_singleobs a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_get_expected_states a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_get_expected_states_and_obs a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_get_expected_states_interactions_multi_factor a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_get_expected_states_interactions_multi_factor_independent a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_get_expected_states_interactions_single_factor a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_get_model_dimensions_from_labels a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_gridworld_activeinference a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_gridworld_genmodel_construction a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_info_gain_factorized a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_marginal_message_passing a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_mmp_a a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_mmp_active_inference a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_mmp_b a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_mmp_c a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_mmp_d a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_obj_array_from_list a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_pA_info_gain a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_pB_info_gain a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_prune_likelihoods a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_prune_prior a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_reset_agent_MMP_wBMA a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_reset_agent_MMP_wPSP a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_reset_agent_VANILLA a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_sample_action a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_sample_policy a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_state_info_gain a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_state_info_gain_factorized a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_stochastic_action_unidimensional_control a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_temporal_C_matrix a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_tmaze_demo a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_tmaze_learning_demo a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_observation_likelihood_factorized a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_observation_likelihood_fullyconnected a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pA_diff_observation_formats a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pA_factorized a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pA_multi_factor_all a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pA_multi_factor_one_modality a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pA_multi_factor_some_modalities a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pA_single_factor_all a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pA_single_factor_one_modality a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pA_single_factor_some_modalities a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_interactions a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_multi_factor_no_actions_all_factors a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_multi_factor_no_actions_one_factor a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_multi_factor_no_actions_some_factors a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_multi_factor_some_controllable_some_factors a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_multi_factor_with_actions_all_factors a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_multi_factor_with_actions_one_factor a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_multi_factor_with_actions_some_factors a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_single_factor_no_actions a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pB_single_factor_with_actions a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_pD a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_policies_factorized a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_policies_pA_infogain a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_policies_pB_infogain a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_policies_states_infogain a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_policies_utility a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_policies_withE_vector a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_states a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_states_factorized a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_states_factorized_noVFE_compute a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_update_posterior_states_factorized_single_factor a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_vmappable_agent_methods a code:Parameter ;
    code:name "self" .

code:Parameter_self_unique_multiactions a code:Parameter ;
    code:name "self" .

code:Parameter_self_update_A a code:Parameter ;
    code:name "self" .

code:Parameter_self_update_B a code:Parameter ;
    code:name "self" .

code:Parameter_self_update_D a code:Parameter ;
    code:name "self" .

code:Parameter_self_update_empirical_prior a code:Parameter ;
    code:name "self" .

code:Parameter_shape_list_list_array_scaled a code:Parameter ;
    code:name "shape_list" .

code:Parameter_shape_list_list_array_uniform a code:Parameter ;
    code:name "shape_list" .

code:Parameter_shape_list_list_array_zeros a code:Parameter ;
    code:name "shape_list" .

code:Parameter_shape_list_obj_array_ones a code:Parameter ;
    code:name "shape_list" .

code:Parameter_shape_list_obj_array_uniform a code:Parameter ;
    code:name "shape_list" .

code:Parameter_shape_list_obj_array_zeros a code:Parameter ;
    code:name "shape_list" .

code:Parameter_shape_list_random_single_categorical a code:Parameter ;
    code:name "shape_list" .

code:Parameter_source_seed_make_model_configs a code:Parameter ;
    code:name "source_seed" .

code:Parameter_state_prune_threshold_sophisticated_inference_search a code:Parameter ;
    code:name "state_prune_threshold" .

code:Parameter_t_compute_expected_utility a code:Parameter ;
    code:name "t" .

code:Parameter_tau_mirror_gradient_descent_step a code:Parameter ;
    code:name "tau" .

code:Parameter_tau_run_mmp_factorized a code:Parameter ;
    code:name "tau" .

code:Parameter_tau_run_online_filtering a code:Parameter ;
    code:name "tau" .

code:Parameter_tau_run_vmp a code:Parameter ;
    code:name "tau" .

code:Parameter_tau_update_marginals a code:Parameter ;
    code:name "tau" .

code:Parameter_template_categorical_dirichlet_like a code:Parameter ;
    code:name "template_categorical" .

code:Parameter_threshold_backwards_induction a code:Parameter ;
    code:name "threshold" .

code:Parameter_threshold_generate_I_matrix a code:Parameter ;
    code:name "threshold" .

code:Parameter_title_plot_beliefs a code:Parameter ;
    code:name "title" .

code:Parameter_title_plot_likelihood a code:Parameter ;
    code:name "title" .

code:Parameter_u_t_compute_expected_state a code:Parameter ;
    code:name "u_t" .

code:Parameter_u_t_compute_expected_state_and_Bs a code:Parameter ;
    code:name "u_t" .

code:Parameter_u_t_minus_1_calc_pB_info_gain a code:Parameter ;
    code:name "u_t_minus_1" .

code:Parameter_use_inductive_compute_G_policy_inductive a code:Parameter ;
    code:name "use_inductive" .

code:Parameter_use_inductive_update_posterior_policies_inductive a code:Parameter ;
    code:name "use_inductive" .

code:Parameter_use_param_info_gain_compute_G_policy a code:Parameter ;
    code:name "use_param_info_gain" .

code:Parameter_use_param_info_gain_compute_G_policy_inductive a code:Parameter ;
    code:name "use_param_info_gain" .

code:Parameter_use_param_info_gain_update_posterior_policies_factorized a code:Parameter ;
    code:name "use_param_info_gain" .

code:Parameter_use_param_info_gain_update_posterior_policies_full a code:Parameter ;
    code:name "use_param_info_gain" .

code:Parameter_use_param_info_gain_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "use_param_info_gain" .

code:Parameter_use_param_info_gain_update_posterior_policies_inductive a code:Parameter ;
    code:name "use_param_info_gain" .

code:Parameter_use_states_info_gain_compute_G_policy a code:Parameter ;
    code:name "use_states_info_gain" .

code:Parameter_use_states_info_gain_compute_G_policy_inductive a code:Parameter ;
    code:name "use_states_info_gain" .

code:Parameter_use_states_info_gain_update_posterior_policies_factorized a code:Parameter ;
    code:name "use_states_info_gain" .

code:Parameter_use_states_info_gain_update_posterior_policies_full a code:Parameter ;
    code:name "use_states_info_gain" .

code:Parameter_use_states_info_gain_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "use_states_info_gain" .

code:Parameter_use_states_info_gain_update_posterior_policies_inductive a code:Parameter ;
    code:name "use_states_info_gain" .

code:Parameter_use_utility_compute_G_policy a code:Parameter ;
    code:name "use_utility" .

code:Parameter_use_utility_compute_G_policy_inductive a code:Parameter ;
    code:name "use_utility" .

code:Parameter_use_utility_update_posterior_policies_factorized a code:Parameter ;
    code:name "use_utility" .

code:Parameter_use_utility_update_posterior_policies_full a code:Parameter ;
    code:name "use_utility" .

code:Parameter_use_utility_update_posterior_policies_full_factorized a code:Parameter ;
    code:name "use_utility" .

code:Parameter_use_utility_update_posterior_policies_inductive a code:Parameter ;
    code:name "use_utility" .

code:Parameter_value_onehot a code:Parameter ;
    code:name "value" .

code:Parameter_x_add a code:Parameter ;
    code:name "x" .

code:Parameter_x_log_stable a code:Parameter ;
    code:name "x" .

code:Parameter_x_spm_MDP_G a code:Parameter ;
    code:name "x" .

code:Parameter_x_spm_calc_neg_ambig a code:Parameter ;
    code:name "x" .

code:Parameter_x_spm_calc_qo_entropy a code:Parameter ;
    code:name "x" .

code:Parameter_x_spm_cross a code:Parameter ;
    code:name "x" .

code:Parameter_x_spm_dot a code:Parameter ;
    code:name "x" .

code:Parameter_x_spm_dot_classic a code:Parameter ;
    code:name "x" .

code:Parameter_x_spm_dot_old a code:Parameter ;
    code:name "x" .

code:Parameter_x_stable_cross_entropy a code:Parameter ;
    code:name "x" .

code:Parameter_x_stable_entropy a code:Parameter ;
    code:name "x" .

code:Parameter_x_stable_xlogx a code:Parameter ;
    code:name "x" .

code:Parameter_xn_build_xn_vn_array a code:Parameter ;
    code:name "xn" .

code:Parameter_xs_factor_dot a code:Parameter ;
    code:name "xs" .

code:Parameter_y_add a code:Parameter ;
    code:name "y" .

code:Parameter_y_spm_cross a code:Parameter ;
    code:name "y" .

code:Parameter_y_stable_cross_entropy a code:Parameter ;
    code:name "y" .

code:Parameter_z_spm_betaln a code:Parameter ;
    code:name "z" .

code:Parameter_A_run_vanilla_fpi a code:Parameter ;
    code:name "A" .

code:Parameter_A_spm_wnorm a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_obs_likelihood_dirichlet a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_posterior_policies a code:Parameter ;
    code:name "A" .

code:Parameter_A_update_posterior_states a code:Parameter ;
    code:name "A" .

code:Parameter_B_run_mmp a code:Parameter ;
    code:name "B" .

code:Parameter_B_update_posterior_policies a code:Parameter ;
    code:name "B" .

code:Parameter_C_update_posterior_policies a code:Parameter ;
    code:name "C" .

code:Parameter_E_update_posterior_policies a code:Parameter ;
    code:name "E" .

code:Parameter_M_factor_dot_flex a code:Parameter ;
    code:name "M" .

code:Parameter_action_selection_sample_action a code:Parameter ;
    code:name "action_selection" .

code:Parameter_action_selection_sample_policy a code:Parameter ;
    code:name "action_selection" .

code:Parameter_actions_step a code:Parameter ;
    code:name "actions" .

code:Parameter_alpha_sample_action a code:Parameter ;
    code:name "alpha" .

code:Parameter_alpha_sample_policy a code:Parameter ;
    code:name "alpha" .

code:Parameter_control_fac_idx_construct_policies a code:Parameter ;
    code:name "control_fac_idx" .

code:Parameter_dims_factor_dot_flex a code:Parameter ;
    code:name "dims" .

code:Parameter_dist_norm_dist a code:Parameter ;
    code:name "dist" .

code:Parameter_gamma_update_posterior_policies a code:Parameter ;
    code:name "gamma" .

code:Parameter_keep_dims_factor_dot_flex a code:Parameter ;
    code:name "keep_dims" .

code:Parameter_num_controls_construct_policies a code:Parameter ;
    code:name "num_controls" .

code:Parameter_num_controls_sample_action a code:Parameter ;
    code:name "num_controls" .

code:Parameter_num_iter_run_mmp a code:Parameter ;
    code:name "num_iter" .

code:Parameter_num_iter_run_vanilla_fpi a code:Parameter ;
    code:name "num_iter" .

code:Parameter_num_states_construct_policies a code:Parameter ;
    code:name "num_states" .

code:Parameter_obs_run_vanilla_fpi a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_update_obs_likelihood_dirichlet a code:Parameter ;
    code:name "obs" .

code:Parameter_obs_update_posterior_states a code:Parameter ;
    code:name "obs" .

code:Parameter_pA_calc_pA_info_gain a code:Parameter ;
    code:name "pA" .

code:Parameter_pA_update_obs_likelihood_dirichlet a code:Parameter ;
    code:name "pA" .

code:Parameter_pA_update_posterior_policies a code:Parameter ;
    code:name "pA" .

code:Parameter_pB_calc_pB_info_gain a code:Parameter ;
    code:name "pB" .

code:Parameter_pB_update_posterior_policies a code:Parameter ;
    code:name "pB" .

code:Parameter_policies_sample_action a code:Parameter ;
    code:name "policies" .

code:Parameter_policies_sample_policy a code:Parameter ;
    code:name "policies" .

code:Parameter_policy_len_construct_policies a code:Parameter ;
    code:name "policy_len" .

code:Parameter_prior_run_mmp a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_run_vanilla_fpi a code:Parameter ;
    code:name "prior" .

code:Parameter_prior_update_posterior_states a code:Parameter ;
    code:name "prior" .

code:Parameter_q_pi_sample_policy a code:Parameter ;
    code:name "q_pi" .

code:Parameter_qs_compute_accuracy a code:Parameter ;
    code:name "qs" .

code:Parameter_qs_update_obs_likelihood_dirichlet a code:Parameter ;
    code:name "qs" .

code:Parameter_rng_key_sample_action a code:Parameter ;
    code:name "rng_key" .

code:Parameter_self_get_likelihood_dist a code:Parameter ;
    code:name "self" .

code:Parameter_self_get_rand_likelihood_dist a code:Parameter ;
    code:name "self" .

code:Parameter_self_get_rand_transition_dist a code:Parameter ;
    code:name "self" .

code:Parameter_self_get_transition_dist a code:Parameter ;
    code:name "self" .

code:Parameter_self_infer_policies a code:Parameter ;
    code:name "self" .

code:Parameter_self_infer_states a code:Parameter ;
    code:name "self" .

code:Parameter_self_render a code:Parameter ;
    code:name "self" .

code:Parameter_self_test_get_expected_obs_factorized a code:Parameter ;
    code:name "self" .

code:Parameter_state_reset a code:Parameter ;
    code:name "state" .

code:Parameter_tau_run_mmp a code:Parameter ;
    code:name "tau" .

code:Parameter_use_param_info_gain_update_posterior_policies a code:Parameter ;
    code:name "use_param_info_gain" .

code:Parameter_use_states_info_gain_update_posterior_policies a code:Parameter ;
    code:name "use_states_info_gain" .

code:Parameter_use_utility_update_posterior_policies a code:Parameter ;
    code:name "use_utility" .

code:Parameter_xs_factor_dot_flex a code:Parameter ;
    code:name "xs" .

code:Parameter_q_pi_sample_action a code:Parameter ;
    code:name "q_pi" .

code:Parameter_self_step a code:Parameter ;
    code:name "self" .

code:Parameter_self_reset a code:Parameter ;
    code:name "self" .

code:Parameter_self_sample_action a code:Parameter ;
    code:name "self" .

