Package Analysis Report
=====================

Package: /tmp/git_analyzer_pws5vca0/tests

Metrics:
- Total Files: 36
- Total Classes: 81
- Total Functions: 212
- Average Complexity: 3.87
- Total Lines of Code: 3727
- Analysis Errors: 0


Modules:

  ../docs/_themes/flask_theme_support.py:
    Name: flask_theme_support.py
    Description: 
    Description Embedding: 

  ../docs/conf.py:
    Name: conf.py
    Description: 
    Description Embedding: 

  ../setup.py:
    Name: setup.py
    Description: 
    Description Embedding: 

  ../src/requests/adapters.py:
    Name: adapters.py
    Description: 
    Description Embedding: 

  ../src/requests/api.py:
    Name: api.py
    Description: 
    Description Embedding: 

  ../src/requests/auth.py:
    Name: auth.py
    Description: 
    Description Embedding: 

  ../src/requests/certs.py:
    Name: certs.py
    Description: 
    Description Embedding: 

  ../src/requests/compat.py:
    Name: compat.py
    Description: 
    Description Embedding: 

  ../src/requests/cookies.py:
    Name: cookies.py
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py:
    Name: exceptions.py
    Description: 
    Description Embedding: 

  ../src/requests/help.py:
    Name: help.py
    Description: 
    Description Embedding: 

  ../src/requests/hooks.py:
    Name: hooks.py
    Description: 
    Description Embedding: 

  ../src/requests/models.py:
    Name: models.py
    Description: 
    Description Embedding: 

  ../src/requests/packages.py:
    Name: packages.py
    Description: 
    Description Embedding: 

  ../src/requests/sessions.py:
    Name: sessions.py
    Description: 
    Description Embedding: 

  ../src/requests/status_codes.py:
    Name: status_codes.py
    Description: 
    Description Embedding: 

  ../src/requests/structures.py:
    Name: structures.py
    Description: 
    Description Embedding: 

  ../src/requests/utils.py:
    Name: utils.py
    Description: 
    Description Embedding: 

  compat.py:
    Name: compat.py
    Description: 
    Description Embedding: 

  conftest.py:
    Name: conftest.py
    Description: 
    Description Embedding: 

  test_adapters.py:
    Name: test_adapters.py
    Description: 
    Description Embedding: 

  test_help.py:
    Name: test_help.py
    Description: 
    Description Embedding: 

  test_hooks.py:
    Name: test_hooks.py
    Description: 
    Description Embedding: 

  test_lowlevel.py:
    Name: test_lowlevel.py
    Description: 
    Description Embedding: 

  test_packages.py:
    Name: test_packages.py
    Description: 
    Description Embedding: 

  test_requests.py:
    Name: test_requests.py
    Description: 
    Description Embedding: 

  test_structures.py:
    Name: test_structures.py
    Description: 
    Description Embedding: 

  test_testserver.py:
    Name: test_testserver.py
    Description: 
    Description Embedding: 

  test_utils.py:
    Name: test_utils.py
    Description: 
    Description Embedding: 

  testserver/server.py:
    Name: server.py
    Description: 
    Description Embedding: 

  utils.py:
    Name: utils.py
    Description: 
    Description Embedding: 

Class Hierarchy:

  ../docs/_themes/flask_theme_support.py::FlaskyStyle:
    Bases: Style
    Functions: []
    Attributes: ['background_color', 'default_style', 'styles']
    Start Line: 7
    End Line: 86
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  ../src/requests/adapters.py::BaseAdapter:
    Bases: None
    Functions: ['send', 'close']
    Attributes: []
    Start Line: 137
    End Line: 164
    Decorators: None
    Docstring: The Base Transport Adapter
    Description: 
    Description Embedding: 

  ../src/requests/adapters.py::HTTPAdapter:
    Bases: BaseAdapter
    Functions: ['init_poolmanager', 'proxy_manager_for', 'cert_verify', 'build_response', 'build_connection_pool_key_attributes', 'get_connection_with_tls_context', 'get_connection', 'close', 'request_url', 'add_headers', 'proxy_headers', 'send']
    Attributes: ['__attrs__']
    Start Line: 167
    End Line: 719
    Decorators: None
    Docstring: The built-in HTTP Adapter for urllib3.

    Provides a general-case interface for Requests sessions to contact HTTP and
    HTTPS urls by implementing the Transport Adapter interface. This class will
    usually be created by the :class:`Session <Session>` class under the
    covers.

    :param pool_connections: The number of urllib3 connection pools to cache.
    :param pool_maxsize: The maximum number of connections to save in the pool.
    :param max_retries: The maximum number of retries each connection
        should attempt. Note, this applies only to failed DNS lookups, socket
        connections and connection timeouts, never to requests where data has
        made it to the server. By default, Requests does not retry failed
        connections. If you need granular control over the conditions under
        which we retry a request, import urllib3's ``Retry`` class and pass
        that instead.
    :param pool_block: Whether the connection pool should block for connections.

    Usage::

      >>> import requests
      >>> s = requests.Session()
      >>> a = requests.adapters.HTTPAdapter(max_retries=3)
      >>> s.mount('http://', a)
    Description: 
    Description Embedding: 

  ../src/requests/auth.py::AuthBase:
    Bases: None
    Functions: []
    Attributes: []
    Start Line: 69
    End Line: 73
    Decorators: None
    Docstring: Base class that all auth implementations derive from
    Description: 
    Description Embedding: 

  ../src/requests/auth.py::HTTPBasicAuth:
    Bases: AuthBase
    Functions: []
    Attributes: []
    Start Line: 76
    End Line: 96
    Decorators: None
    Docstring: Attaches HTTP Basic Authentication to the given Request object.
    Description: 
    Description Embedding: 

  ../src/requests/auth.py::HTTPDigestAuth:
    Bases: AuthBase
    Functions: ['init_per_thread_state', 'build_digest_header', 'handle_redirect', 'handle_401']
    Attributes: []
    Start Line: 107
    End Line: 314
    Decorators: None
    Docstring: Attaches HTTP Digest Authentication to the given Request object.
    Description: 
    Description Embedding: 

  ../src/requests/auth.py::HTTPProxyAuth:
    Bases: HTTPBasicAuth
    Functions: []
    Attributes: []
    Start Line: 99
    End Line: 104
    Decorators: None
    Docstring: Attaches HTTP Proxy Authentication to a given Request object.
    Description: 
    Description Embedding: 

  ../src/requests/cookies.py::CookieConflictError:
    Bases: RuntimeError
    Functions: []
    Attributes: []
    Start Line: 170
    End Line: 173
    Decorators: None
    Docstring: There are two cookies that meet the criteria specified in the cookie jar.
    Use .get and .set and include domain and path args in order to be more specific.
    Description: 
    Description Embedding: 

  ../src/requests/cookies.py::MockRequest:
    Bases: None
    Functions: ['get_type', 'get_host', 'get_origin_req_host', 'get_full_url', 'is_unverifiable', 'has_header', 'get_header', 'add_header', 'add_unredirected_header', 'get_new_headers', 'unverifiable', 'origin_req_host', 'host']
    Attributes: []
    Start Line: 23
    End Line: 100
    Decorators: None
    Docstring: Wraps a `requests.Request` to mimic a `urllib2.Request`.

    The code in `http.cookiejar.CookieJar` expects this interface in order to correctly
    manage cookie policies, i.e., determine whether a cookie can be set, given the
    domains of the request and the cookie.

    The original request object is read-only. The client is responsible for collecting
    the new headers via `get_new_headers()` and interpreting them appropriately. You
    probably want `get_cookie_header`, defined below.
    Description: 
    Description Embedding: 

  ../src/requests/cookies.py::MockResponse:
    Bases: None
    Functions: ['info', 'getheaders']
    Attributes: []
    Start Line: 103
    End Line: 121
    Decorators: None
    Docstring: Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.

    ...what? Basically, expose the parsed HTTP headers from the server response
    the way `http.cookiejar` expects to see them.
    Description: 
    Description Embedding: 

  ../src/requests/cookies.py::RequestsCookieJar:
    Bases: cookielib.CookieJar, MutableMapping
    Functions: ['get', 'set', 'iterkeys', 'keys', 'itervalues', 'values', 'iteritems', 'items', 'list_domains', 'list_paths', 'multiple_domains', 'get_dict', 'set_cookie', 'update', 'copy', 'get_policy']
    Attributes: []
    Start Line: 176
    End Line: 437
    Decorators: None
    Docstring: Compatibility class; is a http.cookiejar.CookieJar, but exposes a dict
    interface.

    This is the CookieJar we create by default for requests and sessions that
    don't specify one, since some clients may expect response.cookies and
    session.cookies to support dict operations.

    Requests does not use the dict interface internally; it's just for
    compatibility with external client code. All requests code should work
    out of the box with externally provided instances of ``CookieJar``, e.g.
    ``LWPCookieJar`` and ``FileCookieJar``.

    Unlike a regular CookieJar, this class is pickleable.

    .. warning:: dictionary operations that are normally O(1) may be O(n).
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::ChunkedEncodingError:
    Bases: RequestException
    Functions: []
    Attributes: []
    Start Line: 119
    End Line: 120
    Decorators: None
    Docstring: The server declared chunked encoding but sent an invalid chunk.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::ConnectTimeout:
    Bases: ConnectionError, Timeout
    Functions: []
    Attributes: []
    Start Line: 80
    End Line: 84
    Decorators: None
    Docstring: The request timed out while trying to connect to the remote server.

    Requests that produced this error are safe to retry.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::ConnectionError:
    Bases: RequestException
    Functions: []
    Attributes: []
    Start Line: 59
    End Line: 60
    Decorators: None
    Docstring: A Connection error occurred.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::ContentDecodingError:
    Bases: RequestException, BaseHTTPError
    Functions: []
    Attributes: []
    Start Line: 123
    End Line: 124
    Decorators: None
    Docstring: Failed to decode response content.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::FileModeWarning:
    Bases: RequestsWarning, DeprecationWarning
    Functions: []
    Attributes: []
    Start Line: 146
    End Line: 147
    Decorators: None
    Docstring: A file was opened in text mode, but Requests determined its binary length.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::HTTPError:
    Bases: RequestException
    Functions: []
    Attributes: []
    Start Line: 55
    End Line: 56
    Decorators: None
    Docstring: An HTTP error occurred.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::InvalidHeader:
    Bases: RequestException, ValueError
    Functions: []
    Attributes: []
    Start Line: 111
    End Line: 112
    Decorators: None
    Docstring: The header value provided was somehow invalid.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::InvalidJSONError:
    Bases: RequestException
    Functions: []
    Attributes: []
    Start Line: 27
    End Line: 28
    Decorators: None
    Docstring: A JSON error occurred.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::InvalidProxyURL:
    Bases: InvalidURL
    Functions: []
    Attributes: []
    Start Line: 115
    End Line: 116
    Decorators: None
    Docstring: The proxy URL provided is invalid.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::InvalidSchema:
    Bases: RequestException, ValueError
    Functions: []
    Attributes: []
    Start Line: 103
    End Line: 104
    Decorators: None
    Docstring: The URL scheme provided is either invalid or unsupported.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::InvalidURL:
    Bases: RequestException, ValueError
    Functions: []
    Attributes: []
    Start Line: 107
    End Line: 108
    Decorators: None
    Docstring: The URL provided was somehow invalid.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::JSONDecodeError:
    Bases: InvalidJSONError, CompatJSONDecodeError
    Functions: []
    Attributes: []
    Start Line: 31
    End Line: 52
    Decorators: None
    Docstring: Couldn't decode the text into json
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::MissingSchema:
    Bases: RequestException, ValueError
    Functions: []
    Attributes: []
    Start Line: 99
    End Line: 100
    Decorators: None
    Docstring: The URL scheme (e.g. http or https) is missing.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::ProxyError:
    Bases: ConnectionError
    Functions: []
    Attributes: []
    Start Line: 63
    End Line: 64
    Decorators: None
    Docstring: A proxy error occurred.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::ReadTimeout:
    Bases: Timeout
    Functions: []
    Attributes: []
    Start Line: 87
    End Line: 88
    Decorators: None
    Docstring: The server did not send any data in the allotted amount of time.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::RequestException:
    Bases: IOError
    Functions: []
    Attributes: []
    Start Line: 12
    End Line: 24
    Decorators: None
    Docstring: There was an ambiguous exception that occurred while handling your
    request.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::RequestsDependencyWarning:
    Bases: RequestsWarning
    Functions: []
    Attributes: []
    Start Line: 150
    End Line: 151
    Decorators: None
    Docstring: An imported dependency doesn't match the expected version range.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::RequestsWarning:
    Bases: Warning
    Functions: []
    Attributes: []
    Start Line: 142
    End Line: 143
    Decorators: None
    Docstring: Base warning for Requests.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::RetryError:
    Bases: RequestException
    Functions: []
    Attributes: []
    Start Line: 131
    End Line: 132
    Decorators: None
    Docstring: Custom retries logic failed
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::SSLError:
    Bases: ConnectionError
    Functions: []
    Attributes: []
    Start Line: 67
    End Line: 68
    Decorators: None
    Docstring: An SSL error occurred.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::StreamConsumedError:
    Bases: RequestException, TypeError
    Functions: []
    Attributes: []
    Start Line: 127
    End Line: 128
    Decorators: None
    Docstring: The content for this response was already consumed.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::Timeout:
    Bases: RequestException
    Functions: []
    Attributes: []
    Start Line: 71
    End Line: 77
    Decorators: None
    Docstring: The request timed out.

    Catching this error will catch both
    :exc:`~requests.exceptions.ConnectTimeout` and
    :exc:`~requests.exceptions.ReadTimeout` errors.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::TooManyRedirects:
    Bases: RequestException
    Functions: []
    Attributes: []
    Start Line: 95
    End Line: 96
    Decorators: None
    Docstring: Too many redirects.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::URLRequired:
    Bases: RequestException
    Functions: []
    Attributes: []
    Start Line: 91
    End Line: 92
    Decorators: None
    Docstring: A valid URL is required to make a request.
    Description: 
    Description Embedding: 

  ../src/requests/exceptions.py::UnrewindableBodyError:
    Bases: RequestException
    Functions: []
    Attributes: []
    Start Line: 135
    End Line: 136
    Decorators: None
    Docstring: Requests encountered an error when trying to rewind a body.
    Description: 
    Description Embedding: 

  ../src/requests/models.py::PreparedRequest:
    Bases: RequestEncodingMixin, RequestHooksMixin
    Functions: ['prepare', 'copy', 'prepare_method', 'prepare_url', 'prepare_headers', 'prepare_body', 'prepare_content_length', 'prepare_auth', 'prepare_cookies', 'prepare_hooks']
    Attributes: []
    Start Line: 313
    End Line: 637
    Decorators: None
    Docstring: The fully mutable :class:`PreparedRequest <PreparedRequest>` object,
    containing the exact bytes that will be sent to the server.

    Instances are generated from a :class:`Request <Request>` object, and
    should not be instantiated manually; doing so may produce undesirable
    effects.

    Usage::

      >>> import requests
      >>> req = requests.Request('GET', 'https://httpbin.org/get')
      >>> r = req.prepare()
      >>> r
      <PreparedRequest [GET]>

      >>> s = requests.Session()
      >>> s.send(r)
      <Response [200]>
    Description: 
    Description Embedding: 

  ../src/requests/models.py::Request:
    Bases: RequestHooksMixin
    Functions: ['prepare']
    Attributes: []
    Start Line: 230
    End Line: 310
    Decorators: None
    Docstring: A user-created :class:`Request <Request>` object.

    Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.

    :param method: HTTP method to use.
    :param url: URL to send.
    :param headers: dictionary of headers to send.
    :param files: dictionary of {filename: fileobject} files to multipart upload.
    :param data: the body to attach to the request. If a dictionary or
        list of tuples ``[(key, value)]`` is provided, form-encoding will
        take place.
    :param json: json for the body to attach to the request (if files or data is not specified).
    :param params: URL parameters to append to the URL. If a dictionary or
        list of tuples ``[(key, value)]`` is provided, form-encoding will
        take place.
    :param auth: Auth handler or (user, pass) tuple.
    :param cookies: dictionary or CookieJar of cookies to attach to this request.
    :param hooks: dictionary of callback hooks, for internal usage.

    Usage::

      >>> import requests
      >>> req = requests.Request('GET', 'https://httpbin.org/get')
      >>> req.prepare()
      <PreparedRequest [GET]>
    Description: 
    Description Embedding: 

  ../src/requests/models.py::RequestEncodingMixin:
    Bases: None
    Functions: ['path_url']
    Attributes: []
    Start Line: 84
    End Line: 203
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  ../src/requests/models.py::RequestHooksMixin:
    Bases: None
    Functions: ['register_hook', 'deregister_hook']
    Attributes: []
    Start Line: 206
    End Line: 227
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  ../src/requests/models.py::Response:
    Bases: None
    Functions: ['ok', 'is_redirect', 'is_permanent_redirect', 'next', 'apparent_encoding', 'iter_content', 'iter_lines', 'content', 'text', 'json', 'links', 'raise_for_status', 'close']
    Attributes: ['__attrs__']
    Start Line: 640
    End Line: 1039
    Decorators: None
    Docstring: The :class:`Response <Response>` object, which contains a
    server's response to an HTTP request.
    Description: 
    Description Embedding: 

  ../src/requests/sessions.py::Session:
    Bases: SessionRedirectMixin
    Functions: ['prepare_request', 'request', 'get', 'options', 'head', 'post', 'put', 'patch', 'delete', 'send', 'merge_environment_settings', 'get_adapter', 'close', 'mount']
    Attributes: ['__attrs__']
    Start Line: 356
    End Line: 816
    Decorators: None
    Docstring: A Requests session.

    Provides cookie persistence, connection-pooling, and configuration.

    Basic Usage::

      >>> import requests
      >>> s = requests.Session()
      >>> s.get('https://httpbin.org/get')
      <Response [200]>

    Or as a context manager::

      >>> with requests.Session() as s:
      ...     s.get('https://httpbin.org/get')
      <Response [200]>
    Description: 
    Description Embedding: 

  ../src/requests/sessions.py::SessionRedirectMixin:
    Bases: None
    Functions: ['get_redirect_target', 'should_strip_auth', 'resolve_redirects', 'rebuild_auth', 'rebuild_proxies', 'rebuild_method']
    Attributes: []
    Start Line: 106
    End Line: 353
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  ../src/requests/structures.py::CaseInsensitiveDict:
    Bases: MutableMapping
    Functions: ['lower_items', 'copy']
    Attributes: []
    Start Line: 13
    End Line: 80
    Decorators: None
    Docstring: A case-insensitive ``dict``-like object.

    Implements all methods and operations of
    ``MutableMapping`` as well as dict's ``copy``. Also
    provides ``lower_items``.

    All keys are expected to be strings. The structure remembers the
    case of the last key to be set, and ``iter(instance)``,
    ``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
    will contain case-sensitive keys. However, querying and contains
    testing is case insensitive::

        cid = CaseInsensitiveDict()
        cid['Accept'] = 'application/json'
        cid['aCCEPT'] == 'application/json'  # True
        list(cid) == ['Accept']  # True

    For example, ``headers['content-encoding']`` will return the
    value of a ``'Content-Encoding'`` response header, regardless
    of how the header name was originally stored.

    If the constructor, ``.update``, or equality comparison
    operations are given keys that have equal ``.lower()``s, the
    behavior is undefined.
    Description: 
    Description Embedding: 

  ../src/requests/structures.py::LookupDict:
    Bases: dict
    Functions: ['get']
    Attributes: []
    Start Line: 83
    End Line: 99
    Decorators: None
    Docstring: Dictionary lookup object.
    Description: 
    Description Embedding: 

  test_help.py::VersionedPackage:
    Bases: None
    Functions: []
    Attributes: []
    Start Line: 11
    End Line: 13
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::BadFileObj:
    Bases: None
    Functions: ['tell']
    Attributes: []
    Start Line: 1987
    End Line: 1995
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::CustomMapping:
    Bases: MutableMapping
    Functions: []
    Attributes: []
    Start Line: 859
    End Line: 876
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::CustomRedirectSession:
    Bases: requests.Session
    Functions: ['get_redirect_target']
    Attributes: []
    Start Line: 2198
    End Line: 2207
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::DummyAuth:
    Bases: requests.auth.AuthBase
    Functions: []
    Attributes: []
    Start Line: 1175
    End Line: 1178
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::MyBytes:
    Bases: bytes
    Functions: []
    Attributes: []
    Start Line: 1774
    End Line: 1775
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::MyCookiePolicy:
    Bases: cookielib.DefaultCookiePolicy
    Functions: []
    Attributes: []
    Start Line: 1371
    End Line: 1372
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::MyString:
    Bases: str
    Functions: []
    Attributes: []
    Start Line: 1771
    End Line: 1772
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::RedirectSession:
    Bases: SessionRedirectMixin
    Functions: ['send', 'build_response']
    Attributes: []
    Start Line: 2498
    End Line: 2527
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::TestCaseInsensitiveDict:
    Bases: None
    Functions: ['test_init', 'test_docstring_example', 'test_len', 'test_getitem', 'test_fixes_649', 'test_delitem', 'test_contains', 'test_get', 'test_update', 'test_update_retains_unchanged', 'test_iter', 'test_equality', 'test_setdefault', 'test_lower_items', 'test_preserve_key_case', 'test_preserve_last_key_case', 'test_copy']
    Attributes: []
    Start Line: 2220
    End Line: 2368
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::TestMorselToCookieExpires:
    Bases: None
    Functions: ['test_expires_valid_str', 'test_expires_invalid_int', 'test_expires_none']
    Attributes: []
    Start Line: 2371
    End Line: 2402
    Decorators: None
    Docstring: Tests for morsel_to_cookie when morsel contains expires.
    Description: 
    Description Embedding: 

  test_requests.py::TestMorselToCookieMaxAge:
    Bases: None
    Functions: ['test_max_age_valid_int', 'test_max_age_invalid_str']
    Attributes: []
    Start Line: 2405
    End Line: 2423
    Decorators: None
    Docstring: Tests for morsel_to_cookie when morsel contains max-age.
    Description: 
    Description Embedding: 

  test_requests.py::TestPreparingURLs:
    Bases: None
    Functions: ['test_preparing_url', 'test_preparing_bad_url', 'test_redirecting_to_bad_url', 'test_url_mutation', 'test_parameters_for_nonstandard_schemes', 'test_post_json_nan', 'test_json_decode_compatibility', 'test_json_decode_persists_doc_attr', 'test_status_code_425', 'test_different_connection_pool_for_tls_settings_verify_True', 'test_different_connection_pool_for_tls_settings_verify_bundle_expired_cert', 'test_different_connection_pool_for_tls_settings_verify_bundle_unexpired_cert', 'test_different_connection_pool_for_mtls_settings']
    Attributes: []
    Start Line: 2649
    End Line: 2950
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::TestRequests:
    Bases: None
    Functions: ['test_entry_points', 'test_invalid_url', 'test_basic_building', 'test_no_content_length', 'test_no_body_content_length', 'test_empty_content_length', 'test_override_content_length', 'test_path_is_not_double_encoded', 'test_params_are_added_before_fragment', 'test_params_original_order_is_preserved_by_default', 'test_params_bytes_are_encoded', 'test_binary_put', 'test_whitespaces_are_removed_from_url', 'test_mixed_case_scheme_acceptable', 'test_HTTP_200_OK_GET_ALTERNATIVE', 'test_HTTP_302_ALLOW_REDIRECT_GET', 'test_HTTP_307_ALLOW_REDIRECT_POST', 'test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE', 'test_HTTP_302_TOO_MANY_REDIRECTS', 'test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS', 'test_http_301_changes_post_to_get', 'test_http_301_doesnt_change_head_to_get', 'test_http_302_changes_post_to_get', 'test_http_302_doesnt_change_head_to_get', 'test_http_303_changes_post_to_get', 'test_http_303_doesnt_change_head_to_get', 'test_header_and_body_removal_on_redirect', 'test_transfer_enc_removal_on_redirect', 'test_fragment_maintained_on_redirect', 'test_HTTP_200_OK_GET_WITH_PARAMS', 'test_HTTP_200_OK_GET_WITH_MIXED_PARAMS', 'test_set_cookie_on_301', 'test_cookie_sent_on_redirect', 'test_cookie_removed_on_expire', 'test_cookie_quote_wrapped', 'test_cookie_persists_via_api', 'test_request_cookie_overrides_session_cookie', 'test_request_cookies_not_persisted', 'test_generic_cookiejar_works', 'test_param_cookiejar_works', 'test_cookielib_cookiejar_on_redirect', 'test_requests_in_history_are_not_overridden', 'test_history_is_always_a_list', 'test_headers_on_session_with_None_are_not_sent', 'test_headers_preserve_order', 'test_user_agent_transfers', 'test_HTTP_200_OK_HEAD', 'test_HTTP_200_OK_PUT', 'test_BASICAUTH_TUPLE_HTTP_200_OK_GET', 'test_set_basicauth', 'test_basicauth_encodes_byte_strings', 'test_errors', 'test_proxy_error', 'test_proxy_error_on_bad_url', 'test_respect_proxy_env_on_send_self_prepared_request', 'test_respect_proxy_env_on_send_session_prepared_request', 'test_respect_proxy_env_on_send_with_redirects', 'test_respect_proxy_env_on_get', 'test_respect_proxy_env_on_request', 'test_proxy_authorization_preserved_on_request', 'test_proxy_authorization_not_appended_to_https_request', 'test_basicauth_with_netrc', 'test_DIGEST_HTTP_200_OK_GET', 'test_DIGEST_AUTH_RETURNS_COOKIE', 'test_DIGEST_AUTH_SETS_SESSION_COOKIES', 'test_DIGEST_STREAM', 'test_DIGESTAUTH_WRONG_HTTP_401_GET', 'test_DIGESTAUTH_QUOTES_QOP_VALUE', 'test_POSTBIN_GET_POST_FILES', 'test_invalid_files_input', 'test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER', 'test_POSTBIN_GET_POST_FILES_WITH_DATA', 'test_post_with_custom_mapping', 'test_conflicting_post_params', 'test_request_ok_set', 'test_status_raising', 'test_decompress_gzip', 'test_unicode_get', 'test_unicode_header_name', 'test_pyopenssl_redirect', 'test_invalid_ca_certificate_path', 'test_invalid_ssl_certificate_files', 'test_env_cert_bundles', 'test_http_with_certificate', 'test_https_warnings', 'test_certificate_failure', 'test_urlencoded_get_query_multivalued_param', 'test_form_encoded_post_query_multivalued_element', 'test_different_encodings_dont_break_post', 'test_unicode_multipart_post', 'test_unicode_multipart_post_fieldnames', 'test_unicode_method_name', 'test_unicode_method_name_with_request_object', 'test_non_prepared_request_error', 'test_custom_content_type', 'test_hook_receives_request_arguments', 'test_session_hooks_are_used_with_no_request_hooks', 'test_session_hooks_are_overridden_by_request_hooks', 'test_prepared_request_hook', 'test_prepared_from_session', 'test_prepare_request_with_bytestring_url', 'test_request_with_bytestring_host', 'test_links', 'test_cookie_parameters', 'test_cookie_as_dict_keeps_len', 'test_cookie_as_dict_keeps_items', 'test_cookie_as_dict_keys', 'test_cookie_as_dict_values', 'test_cookie_as_dict_items', 'test_cookie_duplicate_names_different_domains', 'test_cookie_duplicate_names_raises_cookie_conflict_error', 'test_cookie_policy_copy', 'test_time_elapsed_blank', 'test_empty_response_has_content_none', 'test_response_is_iterable', 'test_response_decode_unicode', 'test_response_reason_unicode', 'test_response_reason_unicode_fallback', 'test_response_chunk_size_type', 'test_iter_content_wraps_exceptions', 'test_request_and_response_are_pickleable', 'test_prepared_request_is_pickleable', 'test_prepared_request_with_file_is_pickleable', 'test_prepared_request_with_hook_is_pickleable', 'test_cannot_send_unprepared_requests', 'test_http_error', 'test_session_pickling', 'test_fixes_1329', 'test_uppercase_scheme_redirect', 'test_transport_adapter_ordering', 'test_session_get_adapter_prefix_matching', 'test_session_get_adapter_prefix_matching_mixed_case', 'test_session_get_adapter_prefix_matching_is_case_insensitive', 'test_header_remove_is_case_insensitive', 'test_params_are_merged_case_sensitive', 'test_long_authinfo_in_url', 'test_header_keys_are_native', 'test_header_validation', 'test_header_value_not_str', 'test_header_no_return_chars', 'test_header_no_leading_space', 'test_header_with_subclass_types', 'test_can_send_objects_with_files', 'test_can_send_file_object_with_non_string_filename', 'test_autoset_header_values_are_native', 'test_nonhttp_schemes_dont_check_URLs', 'test_auth_is_stripped_on_http_downgrade', 'test_auth_is_retained_for_redirect_on_host', 'test_should_strip_auth_host_change', 'test_should_strip_auth_http_downgrade', 'test_should_strip_auth_https_upgrade', 'test_should_strip_auth_port_change', 'test_should_strip_auth_default_port', 'test_manual_redirect_with_partial_body_read', 'test_prepare_body_position_non_stream', 'test_rewind_body', 'test_rewind_partially_read_body', 'test_rewind_body_no_seek', 'test_rewind_body_failed_seek', 'test_rewind_body_failed_tell', 'test_redirect_with_wrong_gzipped_header', 'test_basic_auth_str_is_always_native', 'test_requests_history_is_saved', 'test_json_param_post_content_type_works', 'test_json_param_post_should_not_override_data_param', 'test_response_iter_lines', 'test_response_context_manager', 'test_unconsumed_session_response_closes_connection', 'test_response_iter_lines_reentrant', 'test_session_close_proxy_clear', 'test_proxy_auth', 'test_proxy_auth_empty_pass', 'test_response_json_when_content_is_None', 'test_response_without_release_conn', 'test_empty_stream_with_auth_does_not_set_content_length_header', 'test_stream_with_auth_does_not_set_transfer_encoding_header', 'test_chunked_upload_does_not_set_content_length_header', 'test_custom_redirect_mixin']
    Attributes: ['digest_auth_algo']
    Start Line: 81
    End Line: 2217
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::TestStream:
    Bases: None
    Functions: ['read', 'tell', 'seek']
    Attributes: []
    Start Line: 801
    End Line: 828
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_requests.py::TestTimeout:
    Bases: None
    Functions: ['test_stream_timeout', 'test_invalid_timeout', 'test_none_timeout', 'test_read_timeout', 'test_connect_timeout', 'test_total_timeout_connect', 'test_encoded_methods']
    Attributes: []
    Start Line: 2426
    End Line: 2492
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_structures.py::TestCaseInsensitiveDict:
    Bases: None
    Functions: ['setup', 'test_list', 'test_getitem', 'test_delitem', 'test_lower_items', 'test_repr', 'test_copy', 'test_instance_equality']
    Attributes: ['possible_keys']
    Start Line: 6
    End Line: 51
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_structures.py::TestLookupDict:
    Bases: None
    Functions: ['setup', 'test_repr', 'test_getitem', 'test_get']
    Attributes: ['get_item_parameters']
    Start Line: 54
    End Line: 78
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_testserver.py::TestTestServer:
    Bases: None
    Functions: ['test_basic', 'test_server_closes', 'test_text_response', 'test_basic_response', 'test_basic_waiting_server', 'test_multiple_requests', 'test_request_recovery', 'test_requests_after_timeout_are_not_received', 'test_request_recovery_with_bigger_timeout', 'test_server_finishes_on_error', 'test_server_finishes_when_no_connections']
    Attributes: []
    Start Line: 11
    End Line: 162
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::BoomFile:
    Bases: None
    Functions: ['tell']
    Attributes: []
    Start Line: 75
    End Line: 80
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::LenFile:
    Bases: None
    Functions: []
    Attributes: []
    Start Line: 132
    End Line: 134
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::NoLenBoomFile:
    Bases: None
    Functions: ['tell', 'seek']
    Attributes: []
    Start Line: 88
    End Line: 93
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::RegHandle:
    Bases: None
    Functions: ['Close']
    Attributes: []
    Start Line: 936
    End Line: 938
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestAddressInNetwork:
    Bases: None
    Functions: ['test_valid', 'test_invalid']
    Attributes: []
    Start Line: 283
    End Line: 288
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestContentEncodingDetection:
    Bases: None
    Functions: ['test_none', 'test_pragmas', 'test_precedence']
    Attributes: []
    Start Line: 344
    End Line: 373
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestExtractZippedPaths:
    Bases: None
    Functions: ['test_unzipped_paths_unchanged', 'test_zipped_paths_extracted', 'test_invalid_unc_path']
    Attributes: []
    Start Line: 313
    End Line: 341
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestGetEnvironProxies:
    Bases: None
    Functions: ['no_proxy', 'test_bypass', 'test_not_bypass', 'test_bypass_no_proxy_keyword', 'test_not_bypass_no_proxy_keyword']
    Attributes: []
    Start Line: 191
    End Line: 253
    Decorators: None
    Docstring: Ensures that IP addresses are correctly matches with ranges
    in no_proxy variable.
    Description: 
    Description Embedding: 

  test_utils.py::TestGuessFilename:
    Bases: None
    Functions: ['test_guess_filename_invalid', 'test_guess_filename_valid']
    Attributes: []
    Start Line: 291
    End Line: 310
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestGuessJSONUTF:
    Bases: None
    Functions: ['test_encoded', 'test_bad_utf_like_encoding', 'test_guess_by_bom']
    Attributes: []
    Start Line: 376
    End Line: 408
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestIsIPv4Address:
    Bases: None
    Functions: ['test_valid', 'test_invalid']
    Attributes: []
    Start Line: 256
    End Line: 262
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestIsValidCIDR:
    Bases: None
    Functions: ['test_valid', 'test_invalid']
    Attributes: []
    Start Line: 265
    End Line: 280
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestSuperLen:
    Bases: None
    Functions: ['test_io_streams', 'test_super_len_correctly_calculates_len_of_partially_read_file', 'test_super_len_handles_files_raising_weird_errors_in_tell', 'test_super_len_tell_ioerror', 'test_string', 'test_file', 'test_tarfile_member', 'test_super_len_with__len__', 'test_super_len_with_no__len__', 'test_super_len_with_tell', 'test_super_len_with_fileno', 'test_super_len_with_no_matches']
    Attributes: []
    Start Line: 49
    End Line: 152
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestToKeyValList:
    Bases: None
    Functions: ['test_valid', 'test_invalid']
    Attributes: []
    Start Line: 155
    End Line: 170
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  test_utils.py::TestUnquoteHeaderValue:
    Bases: None
    Functions: ['test_valid', 'test_is_filename']
    Attributes: []
    Start Line: 173
    End Line: 188
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

  testserver/server.py::Server:
    Bases: threading.Thread
    Functions: ['text_response_server', 'basic_response_server', 'run']
    Attributes: ['WAIT_EVENT_TIMEOUT']
    Start Line: 25
    End Line: 135
    Decorators: None
    Docstring: Dummy server using for unit testing
    Description: 
    Description Embedding: 

  testserver/server.py::TLSServer:
    Bases: Server
    Functions: []
    Attributes: []
    Start Line: 138
    End Line: 176
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 

Functions:

  ../src/requests/adapters.py::__getstate__:
    name: __getstate__
    Module Path: ../src/requests/adapters.py
    Signature: __getstate__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.adapters.HTTPAdapter.__getstate__()
    Arguments: ['self']
    Returns: None
    Start Line: 224
    End Line: 225
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/adapters.py::__init__:
    name: __init__
    Module Path: ../src/requests/adapters.py
    Signature: __init__(self, pool_connections, pool_maxsize, max_retries, pool_block)
    Packages: []
    Imports: []
    function_exe_cmd: requests.adapters.HTTPAdapter.__init__()
    Arguments: ['self', 'pool_connections', 'pool_maxsize', 'max_retries', 'pool_block']
    Returns: None
    Start Line: 202
    End Line: 222
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/adapters.py::__setstate__:
    name: __setstate__
    Module Path: ../src/requests/adapters.py
    Signature: __setstate__(self, state)
    Packages: []
    Imports: []
    function_exe_cmd: requests.adapters.HTTPAdapter.__setstate__()
    Arguments: ['self', 'state']
    Returns: None
    Start Line: 227
    End Line: 238
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ["Can't handle by adding 'proxy_manager' to self.__attrs__ because", "self.poolmanager uses a lambda function, which isn't pickleable."]
    Runtime: python

  ../src/requests/adapters.py::_urllib3_request_context:
    name: _urllib3_request_context
    Module Path: ../src/requests/adapters.py
    Signature: _urllib3_request_context(request, verify, client_cert, poolmanager)
    Packages: ['urllib3', 'typing', 'os', 'ssl']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'import typing', 'import os.path', 'import ssl']
    function_exe_cmd: requests.adapters._urllib3_request_context()
    Arguments: ['request', 'verify', 'client_cert', 'poolmanager']
    Returns: '(typing.Dict[str, typing.Any], typing.Dict[str, typing.Any])'
    Start Line: 90
    End Line: 134
    Complexity: 13
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Determine if we have and should use our default SSLContext', 'to optimize performance on standard requests.', 'According to our docs, we allow users to specify just the client', 'cert path']
    Runtime: python

  ../src/requests/adapters.py::add_headers:
    name: add_headers
    Module Path: ../src/requests/adapters.py
    Signature: add_headers(self, request)
    Packages: ['os']
    Imports: ['import os.path', 'from urllib3.exceptions import urllib3.exceptions.ClosedPoolError']
    function_exe_cmd: requests.adapters.HTTPAdapter.add_headers()
    Arguments: ['self', 'request']
    Returns: None
    Start Line: 578
    End Line: 590
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Add any headers needed by the connection. As of v2.0 this does
        nothing by default, but is left for overriding by users that subclass
        the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        This should not be called from user code, and is only exposed for use
        when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.
        :param kwargs: The keyword arguments from the call to send().
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/adapters.py::build_connection_pool_key_attributes:
    name: build_connection_pool_key_attributes
    Module Path: ../src/requests/adapters.py
    Signature: build_connection_pool_key_attributes(self, request, verify, cert)
    Packages: ['urllib3', 'ssl', 'os', 'models', 'auth']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'import ssl', 'import os.path', 'from models import models.Response', 'from models import models.PreparedRequest', 'from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.urldefragauth']
    function_exe_cmd: requests.adapters.HTTPAdapter.build_connection_pool_key_attributes()
    Arguments: ['self', 'request', 'verify', 'cert']
    Returns: None
    Start Line: 396
    End Line: 444
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Build the PoolKey attributes used by urllib3 to return a connection.

        This looks at the PreparedRequest, the user-specified verify value,
        and the value of the cert parameter to determine what PoolKey values
        to use to select a connection from a given urllib3 Connection Pool.

        The SSL related pool key arguments are not consistently set. As of
        this writing, use the following to determine what keys may be in that
        dictionary:

        * If ``verify`` is ``True``, ``"ssl_context"`` will be set and will be the
          default Requests SSL Context
        * If ``verify`` is ``False``, ``"ssl_context"`` will not be set but
          ``"cert_reqs"`` will be set
        * If ``verify`` is a string, (i.e., it is a user-specified trust bundle)
          ``"ca_certs"`` will be set if the string is not a directory recognized
          by :py:func:`os.path.isdir`, otherwise ``"ca_certs_dir"`` will be
          set.
        * If ``"cert"`` is specified, ``"cert_file"`` will always be set. If
          ``"cert"`` is a tuple with a second item, ``"key_file"`` will also
          be present

        To override these settings, one may subclass this class, call this
        method and use the above logic to change parameters as desired. For
        example, if one wishes to use a custom :py:class:`ssl.SSLContext` one
        must both set ``"ssl_context"`` and based on what else they require,
        alter the other keys to ensure the desired behaviour.

        :param request:
            The PreparedReqest being sent over the connection.
        :type request:
            :class:`~requests.models.PreparedRequest`
        :param verify:
            Either a boolean, in which case it controls whether
            we verify the server's TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use.
        :param cert:
            (optional) Any user-provided SSL certificate for client
            authentication (a.k.a., mTLS). This may be a string (i.e., just
            the path to a file which holds both certificate and key) or a
            tuple of length 2 with the certificate file path and key file
            path.
        :returns:
            A tuple of two dictionaries. The first is the "host parameters"
            portion of the Pool Key including scheme, hostname, and port. The
            second is a dictionary of SSLContext related parameters.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/adapters.py::build_response:
    name: build_response
    Module Path: ../src/requests/adapters.py
    Signature: build_response(self, req, resp)
    Packages: ['urllib3', 'os', 'cookies']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'import os.path', 'from cookies import cookies.extract_cookies_to_jar']
    function_exe_cmd: requests.adapters.HTTPAdapter.build_response()
    Arguments: ['self', 'req', 'resp']
    Returns: None
    Start Line: 359
    End Line: 394
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Builds a :class:`Response <requests.Response>` object from a urllib3
        response. This should not be called from user code, and is only exposed
        for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`

        :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.
        :param resp: The urllib3 response object.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: ["Fallback to None if there's no status_code, for whatever reason.", 'Make headers case-insensitive.', 'Set encoding.', 'Add new cookies from the server.', 'Give the Response some context.']
    Runtime: python

  ../src/requests/adapters.py::cert_verify:
    name: cert_verify
    Module Path: ../src/requests/adapters.py
    Signature: cert_verify(self, conn, url, verify, cert)
    Packages: ['os', 'urllib3']
    Imports: ['import os.path', 'from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager']
    function_exe_cmd: requests.adapters.HTTPAdapter.cert_verify()
    Arguments: ['self', 'conn', 'url', 'verify', 'cert']
    Returns: None
    Start Line: 304
    End Line: 357
    Complexity: 15
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Verify a SSL certificate. This method should not be called from user
        code, and is only exposed for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param conn: The urllib3 connection object associated with the cert.
        :param url: The requested URL.
        :param verify: Either a boolean, in which case it controls whether we verify
            the server's TLS certificate, or a string, in which case it must be a path
            to a CA bundle to use
        :param cert: The SSL certificate to verify.
    Description: 
    Description Embedding: 
    Comments: ["Only load the CA certificates if 'verify' is a string indicating the CA bundle to use.", "Otherwise, if verify is a boolean, we don't load anything since", 'the connection will be using a context with the default certificates already loaded,', 'and this avoids a call to the slow load_verify_locations()', '`verify` must be a str with a path then']
    Runtime: python

  ../src/requests/adapters.py::close:
    name: close
    Module Path: ../src/requests/adapters.py
    Signature: close(self)
    Packages: ['os']
    Imports: ['import os.path', 'from urllib3.exceptions import urllib3.exceptions.ClosedPoolError']
    function_exe_cmd: requests.adapters.HTTPAdapter.close()
    Arguments: ['self']
    Returns: None
    Start Line: 536
    End Line: 544
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Disposes of any internal state.

        Currently, this closes the PoolManager and any active ProxyManager,
        which closes any pooled connections.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/adapters.py::get_connection:
    name: get_connection
    Module Path: ../src/requests/adapters.py
    Signature: get_connection(self, url, proxies)
    Packages: ['urllib3', 'os', 'warnings']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'import os.path', 'import warnings']
    function_exe_cmd: requests.adapters.HTTPAdapter.get_connection()
    Arguments: ['self', 'url', 'proxies']
    Returns: None
    Start Line: 495
    End Line: 534
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: DEPRECATED: Users should move to `get_connection_with_tls_context`
        for all subclasses of HTTPAdapter using Requests>=2.32.2.

        Returns a urllib3 connection for the given URL. This should not be
        called from user code, and is only exposed for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param url: The URL to connect to.
        :param proxies: (optional) A Requests-style dictionary of proxies used on this request.
        :rtype: urllib3.ConnectionPool
    Description: 
    Description Embedding: 
    Comments: ['Only scheme should be lower case']
    Runtime: python

  ../src/requests/adapters.py::get_connection_with_tls_context:
    name: get_connection_with_tls_context
    Module Path: ../src/requests/adapters.py
    Signature: get_connection_with_tls_context(self, request, verify, proxies, cert)
    Packages: ['urllib3', 'os', 'auth']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'import os.path', 'from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.urldefragauth']
    function_exe_cmd: requests.adapters.HTTPAdapter.get_connection_with_tls_context()
    Arguments: ['self', 'request', 'verify', 'proxies', 'cert']
    Returns: None
    Start Line: 446
    End Line: 493
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns a urllib3 connection for the given request and TLS settings.
        This should not be called from user code, and is only exposed for use
        when subclassing the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param request:
            The :class:`PreparedRequest <PreparedRequest>` object to be sent
            over the connection.
        :param verify:
            Either a boolean, in which case it controls whether we verify the
            server's TLS certificate, or a string, in which case it must be a
            path to a CA bundle to use.
        :param proxies:
            (optional) The proxies dictionary to apply to the request.
        :param cert:
            (optional) Any user-provided SSL certificate to be used for client
            authentication (a.k.a., mTLS).
        :rtype:
            urllib3.ConnectionPool
    Description: 
    Description Embedding: 
    Comments: ['Only scheme should be lower case']
    Runtime: python

  ../src/requests/adapters.py::init_poolmanager:
    name: init_poolmanager
    Module Path: ../src/requests/adapters.py
    Signature: init_poolmanager(self, connections, maxsize, block)
    Packages: ['urllib3', 'os']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'import os.path']
    function_exe_cmd: requests.adapters.HTTPAdapter.init_poolmanager()
    Arguments: ['self', 'connections', 'maxsize', 'block']
    Returns: None
    Start Line: 240
    End Line: 264
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Initializes a urllib3 PoolManager.

        This method should not be called from user code, and is only
        exposed for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param connections: The number of urllib3 connection pools to cache.
        :param maxsize: The maximum number of connections to save in the pool.
        :param block: Block when no free connections are available.
        :param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager.
    Description: 
    Description Embedding: 
    Comments: ['save these values for pickling']
    Runtime: python

  ../src/requests/adapters.py::proxy_headers:
    name: proxy_headers
    Module Path: ../src/requests/adapters.py
    Signature: proxy_headers(self, proxy)
    Packages: ['urllib3', 'os', 'auth']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'import os.path', 'from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.urldefragauth']
    function_exe_cmd: requests.adapters.HTTPAdapter.proxy_headers()
    Arguments: ['self', 'proxy']
    Returns: None
    Start Line: 592
    End Line: 611
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns a dictionary of the headers to add to any request sent
        through a proxy. This works with urllib3 magic to ensure that they are
        correctly sent to the proxy, rather than in a tunnelled request if
        CONNECT is being used.

        This should not be called from user code, and is only exposed for use
        when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param proxy: The url of the proxy being used for this request.
        :rtype: dict
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/adapters.py::proxy_manager_for:
    name: proxy_manager_for
    Module Path: ../src/requests/adapters.py
    Signature: proxy_manager_for(self, proxy)
    Packages: ['urllib3', 'os', 'auth']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'import os.path', 'from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.urldefragauth']
    function_exe_cmd: requests.adapters.HTTPAdapter.proxy_manager_for()
    Arguments: ['self', 'proxy']
    Returns: None
    Start Line: 266
    End Line: 302
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Return urllib3 ProxyManager for the given proxy.

        This method should not be called from user code, and is only
        exposed for use when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param proxy: The proxy to return a urllib3 ProxyManager for.
        :param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.
        :returns: ProxyManager
        :rtype: urllib3.ProxyManager
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/adapters.py::request_url:
    name: request_url
    Module Path: ../src/requests/adapters.py
    Signature: request_url(self, request, proxies)
    Packages: ['os', 'urllib3', 'auth']
    Imports: ['import os.path', 'from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.urldefragauth']
    function_exe_cmd: requests.adapters.HTTPAdapter.request_url()
    Arguments: ['self', 'request', 'proxies']
    Returns: None
    Start Line: 546
    End Line: 576
    Complexity: 8
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Obtain the url to use when making the final request.

        If the message is being sent through a HTTP proxy, the full URL has to
        be used. Otherwise, we should only use the path portion of the URL.

        This should not be called from user code, and is only exposed for use
        when subclassing the
        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.

        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.
        :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.
        :rtype: str
    Description: 
    Description Embedding: 
    Comments: ["Don't confuse urllib3"]
    Runtime: python

  ../src/requests/adapters.py::send:
    name: send
    Module Path: ../src/requests/adapters.py
    Signature: send(self, request, stream, timeout, verify, cert, proxies)
    Packages: ['urllib3', 'os']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.ClosedPoolError', 'from urllib3.exceptions import urllib3.exceptions.ConnectTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.HTTPError as _HTTPError', 'from urllib3.exceptions import urllib3.exceptions.InvalidHeader as _InvalidHeader', 'from urllib3.exceptions import urllib3.exceptions.LocationValueError', 'from urllib3.exceptions import urllib3.exceptions.MaxRetryError', 'from urllib3.exceptions import urllib3.exceptions.NewConnectionError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ProxyError as _ProxyError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.ResponseError', 'from urllib3.exceptions import urllib3.exceptions.SSLError as _SSLError', 'from urllib3.poolmanager import urllib3.poolmanager.PoolManager', 'from urllib3.poolmanager import urllib3.poolmanager.proxy_from_url', 'from urllib3.util import urllib3.util.Timeout as TimeoutSauce', 'from urllib3.util import urllib3.util.parse_url', 'from urllib3.util.retry import urllib3.util.retry.Retry', 'from urllib3.util.ssl_ import urllib3.util.ssl_.create_urllib3_context', 'from urllib3.contrib.socks import urllib3.contrib.socks.SOCKSProxyManager', 'import os.path']
    function_exe_cmd: requests.adapters.HTTPAdapter.send()
    Arguments: ['self', 'request', 'stream', 'timeout', 'verify', 'cert', 'proxies']
    Returns: None
    Start Line: 613
    End Line: 719
    Complexity: 20
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends PreparedRequest object. Returns Response object.

        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) <timeouts>` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server's TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: ['TODO: Remove this in 3.0.0: see #2811', 'This branch is for urllib3 v1.22 and later.', 'This branch is for urllib3 versions earlier than v1.22']
    Runtime: python

  ../src/requests/api.py::delete:
    name: delete
    Module Path: ../src/requests/api.py
    Signature: delete(url)
    Packages: []
    Imports: []
    function_exe_cmd: requests.api.delete()
    Arguments: ['url']
    Returns: None
    Start Line: 148
    End Line: 157
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a DELETE request.

    :param url: URL for the new :class:`Request` object.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/api.py::get:
    name: get
    Module Path: ../src/requests/api.py
    Signature: get(url, params)
    Packages: []
    Imports: []
    function_exe_cmd: requests.api.get()
    Arguments: ['url', 'params']
    Returns: None
    Start Line: 62
    End Line: 73
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a GET request.

    :param url: URL for the new :class:`Request` object.
    :param params: (optional) Dictionary, list of tuples or bytes to send
        in the query string for the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/api.py::head:
    name: head
    Module Path: ../src/requests/api.py
    Signature: head(url)
    Packages: []
    Imports: []
    function_exe_cmd: requests.api.head()
    Arguments: ['url']
    Returns: None
    Start Line: 88
    End Line: 100
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a HEAD request.

    :param url: URL for the new :class:`Request` object.
    :param \*\*kwargs: Optional arguments that ``request`` takes. If
        `allow_redirects` is not provided, it will be set to `False` (as
        opposed to the default :meth:`request` behavior).
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/api.py::options:
    name: options
    Module Path: ../src/requests/api.py
    Signature: options(url)
    Packages: []
    Imports: []
    function_exe_cmd: requests.api.options()
    Arguments: ['url']
    Returns: None
    Start Line: 76
    End Line: 85
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends an OPTIONS request.

    :param url: URL for the new :class:`Request` object.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/api.py::patch:
    name: patch
    Module Path: ../src/requests/api.py
    Signature: patch(url, data)
    Packages: []
    Imports: []
    function_exe_cmd: requests.api.patch()
    Arguments: ['url', 'data']
    Returns: None
    Start Line: 133
    End Line: 145
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a PATCH request.

    :param url: URL for the new :class:`Request` object.
    :param data: (optional) Dictionary, list of tuples, bytes, or file-like
        object to send in the body of the :class:`Request`.
    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/api.py::post:
    name: post
    Module Path: ../src/requests/api.py
    Signature: post(url, data, json)
    Packages: []
    Imports: []
    function_exe_cmd: requests.api.post()
    Arguments: ['url', 'data', 'json']
    Returns: None
    Start Line: 103
    End Line: 115
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a POST request.

    :param url: URL for the new :class:`Request` object.
    :param data: (optional) Dictionary, list of tuples, bytes, or file-like
        object to send in the body of the :class:`Request`.
    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/api.py::put:
    name: put
    Module Path: ../src/requests/api.py
    Signature: put(url, data)
    Packages: []
    Imports: []
    function_exe_cmd: requests.api.put()
    Arguments: ['url', 'data']
    Returns: None
    Start Line: 118
    End Line: 130
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a PUT request.

    :param url: URL for the new :class:`Request` object.
    :param data: (optional) Dictionary, list of tuples, bytes, or file-like
        object to send in the body of the :class:`Request`.
    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
    :param \*\*kwargs: Optional arguments that ``request`` takes.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/api.py::request:
    name: request
    Module Path: ../src/requests/api.py
    Signature: request(method, url)
    Packages: []
    Imports: []
    function_exe_cmd: requests.api.request()
    Arguments: ['method', 'url']
    Returns: None
    Start Line: 14
    End Line: 59
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Constructs and sends a :class:`Request <Request>`.

    :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.
    :param url: URL for the new :class:`Request` object.
    :param params: (optional) Dictionary, list of tuples or bytes to send
        in the query string for the :class:`Request`.
    :param data: (optional) Dictionary, list of tuples, bytes, or file-like
        object to send in the body of the :class:`Request`.
    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.
    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.
    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.
    :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.
        ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``
        or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content_type'`` is a string
        defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers
        to add for the file.
    :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.
    :param timeout: (optional) How many seconds to wait for the server to send data
        before giving up, as a float, or a :ref:`(connect timeout, read
        timeout) <timeouts>` tuple.
    :type timeout: float or tuple
    :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.
    :type allow_redirects: bool
    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.
    :param verify: (optional) Either a boolean, in which case it controls whether we verify
            the server's TLS certificate, or a string, in which case it must be a path
            to a CA bundle to use. Defaults to ``True``.
    :param stream: (optional) if ``False``, the response content will be immediately downloaded.
    :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.
    :return: :class:`Response <Response>` object
    :rtype: requests.Response

    Usage::

      >>> import requests
      >>> req = requests.request('GET', 'https://httpbin.org/get')
      >>> req
      <Response [200]>
    Description: 
    Description Embedding: 
    Comments: ["By using the 'with' statement we are sure the session is closed, thus we", 'avoid leaving sockets open which can trigger a ResourceWarning in some', 'cases, and look like a memory leak in others.']
    Runtime: python

  ../src/requests/auth.py::__call__:
    name: __call__
    Module Path: ../src/requests/auth.py
    Signature: __call__(self, r)
    Packages: ['re', 'os']
    Imports: ['import re', 'import threading', 'import os']
    function_exe_cmd: requests.auth.HTTPDigestAuth.__call__()
    Arguments: ['self', 'r']
    Returns: None
    Start Line: 285
    End Line: 303
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Initialize per-thread state, if needed', 'If we have a saved nonce, skip the 401', 'In the case of HTTPDigestAuth being reused and the body of', 'the previous request was a file-like object, pos has the', "file position of the previous body. Ensure it's set to", 'None.']
    Runtime: python

  ../src/requests/auth.py::__eq__:
    name: __eq__
    Module Path: ../src/requests/auth.py
    Signature: __eq__(self, other)
    Packages: ['re']
    Imports: ['import re', 'import threading']
    function_exe_cmd: requests.auth.HTTPDigestAuth.__eq__()
    Arguments: ['self', 'other']
    Returns: None
    Start Line: 305
    End Line: 311
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/auth.py::__init__:
    name: __init__
    Module Path: ../src/requests/auth.py
    Signature: __init__(self, username, password)
    Packages: ['re', 'threading']
    Imports: ['import re', 'import threading']
    function_exe_cmd: requests.auth.HTTPDigestAuth.__init__()
    Arguments: ['self', 'username', 'password']
    Returns: None
    Start Line: 110
    End Line: 114
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Keep state in per-thread local storage']
    Runtime: python

  ../src/requests/auth.py::__ne__:
    name: __ne__
    Module Path: ../src/requests/auth.py
    Signature: __ne__(self, other)
    Packages: ['re']
    Imports: ['import re', 'import threading']
    function_exe_cmd: requests.auth.HTTPDigestAuth.__ne__()
    Arguments: ['self', 'other']
    Returns: None
    Start Line: 313
    End Line: 314
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/auth.py::_basic_auth_str:
    name: _basic_auth_str
    Module Path: ../src/requests/auth.py
    Signature: _basic_auth_str(username, password)
    Packages: ['re', 'compat', 'warnings']
    Imports: ['import re', 'import threading', 'from compat import compat.basestring', 'from compat import compat.str', 'from compat import compat.urlparse', 'import warnings']
    function_exe_cmd: requests.auth._basic_auth_str()
    Arguments: ['username', 'password']
    Returns: None
    Start Line: 25
    End Line: 66
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns a Basic Auth string.
    Description: 
    Description Embedding: 
    Comments: ['"I want us to put a big-ol\' comment on top of it that', 'says that this behaviour is dumb but we need to preserve', 'it because people are relying on it."', '- Lukasa', '', 'These are here solely to maintain backwards compatibility', 'for things like ints. This will be removed in 3.0.0.', '-- End Removal --']
    Runtime: python

  ../src/requests/auth.py::build_digest_header:
    name: build_digest_header
    Module Path: ../src/requests/auth.py
    Signature: build_digest_header(self, method, url)
    Packages: ['re', 'hashlib', 'time', 'os']
    Imports: ['import re', 'import threading', 'import hashlib', 'import time', 'import os']
    function_exe_cmd: requests.auth.HTTPDigestAuth.build_digest_header()
    Arguments: ['self', 'method', 'url']
    Returns: None
    Start Line: 126
    End Line: 234
    Complexity: 26
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: :rtype: str
    Description: 
    Description Embedding: 
    Comments: ['lambdas assume digest modules are imported at the top level', 'noqa:E731', 'XXX not implemented yet', ': path is request-uri defined in RFC 2616 which should not be empty', 'XXX handle auth-int.', 'XXX should the partial digests be encoded too?']
    Runtime: python

  ../src/requests/auth.py::handle_401:
    name: handle_401
    Module Path: ../src/requests/auth.py
    Signature: handle_401(self, r)
    Packages: ['re', 'os', 'cookies']
    Imports: ['import re', 'import threading', 'import os', 'from cookies import cookies.extract_cookies_to_jar']
    function_exe_cmd: requests.auth.HTTPDigestAuth.handle_401()
    Arguments: ['self', 'r']
    Returns: None
    Start Line: 241
    End Line: 283
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Takes the given response and tries digest-auth, if needed.

        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: ['If response is not 4xx, do not auth', 'See https://github.com/psf/requests/issues/3772', 'Rewind the file position indicator of the body to where', 'it was to resend the request.', 'Consume content and release the original connection', 'to allow our new request to reuse the same one.']
    Runtime: python

  ../src/requests/auth.py::handle_redirect:
    name: handle_redirect
    Module Path: ../src/requests/auth.py
    Signature: handle_redirect(self, r)
    Packages: ['re']
    Imports: ['import re', 'import threading']
    function_exe_cmd: requests.auth.HTTPDigestAuth.handle_redirect()
    Arguments: ['self', 'r']
    Returns: None
    Start Line: 236
    End Line: 239
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Reset num_401_calls counter on redirects.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/auth.py::init_per_thread_state:
    name: init_per_thread_state
    Module Path: ../src/requests/auth.py
    Signature: init_per_thread_state(self)
    Packages: ['re', 'os']
    Imports: ['import re', 'import threading', 'import os']
    function_exe_cmd: requests.auth.HTTPDigestAuth.init_per_thread_state()
    Arguments: ['self']
    Returns: None
    Start Line: 116
    End Line: 124
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Ensure state is initialized just once per-thread']
    Runtime: python

  ../src/requests/compat.py::_resolve_char_detection:
    name: _resolve_char_detection
    Module Path: ../src/requests/compat.py
    Signature: _resolve_char_detection()
    Packages: ['io', 'importlib']
    Imports: ['from urllib3 import urllib3.__version__ as urllib3_version', 'from collections import collections.OrderedDict', 'from collections.abc import collections.abc.Callable', 'from collections.abc import collections.abc.Mapping', 'from collections.abc import collections.abc.MutableMapping', 'from io import io.StringIO', 'import importlib']
    function_exe_cmd: requests.compat._resolve_char_detection()
    Arguments: None
    Returns: None
    Start Line: 30
    End Line: 39
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Find supported character detection libraries.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::__contains__:
    name: __contains__
    Module Path: ../src/requests/cookies.py
    Signature: __contains__(self, name)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.__contains__()
    Arguments: ['self', 'name']
    Returns: None
    Start Line: 321
    End Line: 325
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::__delitem__:
    name: __delitem__
    Module Path: ../src/requests/cookies.py
    Signature: __delitem__(self, name)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.__delitem__()
    Arguments: ['self', 'name']
    Returns: None
    Start Line: 343
    End Line: 347
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Deletes a cookie given a name. Wraps ``http.cookiejar.CookieJar``'s
        ``remove_cookie_by_name()``.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::__getitem__:
    name: __getitem__
    Module Path: ../src/requests/cookies.py
    Signature: __getitem__(self, name)
    Packages: ['compat']
    Imports: ['from compat import compat.Morsel', 'from compat import compat.MutableMapping', 'from compat import compat.cookielib', 'from compat import compat.urlparse', 'from compat import compat.urlunparse']
    function_exe_cmd: requests.cookies.RequestsCookieJar.__getitem__()
    Arguments: ['self', 'name']
    Returns: None
    Start Line: 327
    End Line: 334
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like __getitem__() for compatibility with client code. Throws
        exception if there are more than one cookie with name. In that case,
        use the more explicit get() method instead.

        .. warning:: operation is O(n), not O(1).
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::__getstate__:
    name: __getstate__
    Module Path: ../src/requests/cookies.py
    Signature: __getstate__(self)
    Packages: ['copy']
    Imports: ['import copy']
    function_exe_cmd: requests.cookies.RequestsCookieJar.__getstate__()
    Arguments: ['self']
    Returns: None
    Start Line: 415
    End Line: 420
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Unlike a normal CookieJar, this class is pickleable.
    Description: 
    Description Embedding: 
    Comments: ['remove the unpickleable RLock object']
    Runtime: python

  ../src/requests/cookies.py::__init__:
    name: __init__
    Module Path: ../src/requests/cookies.py
    Signature: __init__(self, headers)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockResponse.__init__()
    Arguments: ['self', 'headers']
    Returns: None
    Start Line: 110
    End Line: 115
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Make a MockResponse for `cookiejar` to read.

        :param headers: a httplib.HTTPMessage or analogous carrying the headers
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::__setitem__:
    name: __setitem__
    Module Path: ../src/requests/cookies.py
    Signature: __setitem__(self, name, value)
    Packages: ['compat']
    Imports: ['from compat import compat.Morsel', 'from compat import compat.MutableMapping', 'from compat import compat.cookielib', 'from compat import compat.urlparse', 'from compat import compat.urlunparse']
    function_exe_cmd: requests.cookies.RequestsCookieJar.__setitem__()
    Arguments: ['self', 'name', 'value']
    Returns: None
    Start Line: 336
    End Line: 341
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like __setitem__ for compatibility with client code. Throws
        exception if there is already a cookie of that name in the jar. In that
        case, use the more explicit set() method instead.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::__setstate__:
    name: __setstate__
    Module Path: ../src/requests/cookies.py
    Signature: __setstate__(self, state)
    Packages: ['threading']
    Imports: ['import threading', 'import dummy_threading as threading']
    function_exe_cmd: requests.cookies.RequestsCookieJar.__setstate__()
    Arguments: ['self', 'state']
    Returns: None
    Start Line: 422
    End Line: 426
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Unlike a normal CookieJar, this class is pickleable.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::_copy_cookie_jar:
    name: _copy_cookie_jar
    Module Path: ../src/requests/cookies.py
    Signature: _copy_cookie_jar(jar)
    Packages: ['copy']
    Imports: ['import copy']
    function_exe_cmd: requests.cookies._copy_cookie_jar()
    Arguments: ['jar']
    Returns: None
    Start Line: 440
    End Line: 452
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ["We're dealing with an instance of RequestsCookieJar", "We're dealing with a generic CookieJar instance"]
    Runtime: python

  ../src/requests/cookies.py::_find:
    name: _find
    Module Path: ../src/requests/cookies.py
    Signature: _find(self, name, domain, path)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar._find()
    Arguments: ['self', 'name', 'domain', 'path']
    Returns: None
    Start Line: 366
    End Line: 384
    Complexity: 9
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Requests uses this method internally to get cookie values.

        If there are conflicting cookies, _find arbitrarily chooses one.
        See _find_no_duplicates if you want an exception thrown if there are
        conflicting cookies.

        :param name: a string containing name of cookie
        :param domain: (optional) string containing domain of cookie
        :param path: (optional) string containing path of cookie
        :return: cookie.value
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::_find_no_duplicates:
    name: _find_no_duplicates
    Module Path: ../src/requests/cookies.py
    Signature: _find_no_duplicates(self, name, domain, path)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar._find_no_duplicates()
    Arguments: ['self', 'name', 'domain', 'path']
    Returns: None
    Start Line: 386
    End Line: 413
    Complexity: 11
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Both ``__get_item__`` and ``get`` call this function: it's never
        used elsewhere in Requests.

        :param name: a string containing name of cookie
        :param domain: (optional) string containing domain of cookie
        :param path: (optional) string containing path of cookie
        :raises KeyError: if cookie is not found
        :raises CookieConflictError: if there are multiple cookies
            that match name and optionally domain and path
        :return: cookie.value
    Description: 
    Description Embedding: 
    Comments: ['if there are multiple cookies that meet passed in criteria', 'we will eventually return this as long as no cookie conflict']
    Runtime: python

  ../src/requests/cookies.py::add_header:
    name: add_header
    Module Path: ../src/requests/cookies.py
    Signature: add_header(self, key, val)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.add_header()
    Arguments: ['self', 'key', 'val']
    Returns: None
    Start Line: 78
    End Line: 82
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: cookiejar has no legitimate use for this method; add it back if you find one.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::add_unredirected_header:
    name: add_unredirected_header
    Module Path: ../src/requests/cookies.py
    Signature: add_unredirected_header(self, name, value)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.add_unredirected_header()
    Arguments: ['self', 'name', 'value']
    Returns: None
    Start Line: 84
    End Line: 85
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::cookiejar_from_dict:
    name: cookiejar_from_dict
    Module Path: ../src/requests/cookies.py
    Signature: cookiejar_from_dict(cookie_dict, cookiejar, overwrite)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.cookiejar_from_dict()
    Arguments: ['cookie_dict', 'cookiejar', 'overwrite']
    Returns: None
    Start Line: 521
    End Line: 539
    Complexity: 7
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns a CookieJar from a key/value dictionary.

    :param cookie_dict: Dict of key/values to insert into CookieJar.
    :param cookiejar: (optional) A cookiejar to add the cookies to.
    :param overwrite: (optional) If False, will not replace cookies
        already in the jar with new ones.
    :rtype: CookieJar
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::copy:
    name: copy
    Module Path: ../src/requests/cookies.py
    Signature: copy(self)
    Packages: ['copy']
    Imports: ['import copy']
    function_exe_cmd: requests.cookies.RequestsCookieJar.copy()
    Arguments: ['self']
    Returns: None
    Start Line: 428
    End Line: 433
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Return a copy of this RequestsCookieJar.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::create_cookie:
    name: create_cookie
    Module Path: ../src/requests/cookies.py
    Signature: create_cookie(name, value)
    Packages: ['time']
    Imports: ['import time']
    function_exe_cmd: requests.cookies.create_cookie()
    Arguments: ['name', 'value']
    Returns: None
    Start Line: 455
    End Line: 489
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Make a cookie from underspecified parameters.

    By default, the pair of `name` and `value` will be set for the domain ''
    and sent on every request (this is sometimes called a "supercookie").
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::extract_cookies_to_jar:
    name: extract_cookies_to_jar
    Module Path: ../src/requests/cookies.py
    Signature: extract_cookies_to_jar(jar, request, response)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.extract_cookies_to_jar()
    Arguments: ['jar', 'request', 'response']
    Returns: None
    Start Line: 124
    End Line: 137
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Extract the cookies from the response into a CookieJar.

    :param jar: http.cookiejar.CookieJar (not necessarily a RequestsCookieJar)
    :param request: our own requests.Request object
    :param response: urllib3.HTTPResponse object
    Description: 
    Description Embedding: 
    Comments: ['the _original_response field is the wrapped httplib.HTTPResponse object,', 'pull out the HTTPMessage with the headers and put it in the mock:']
    Runtime: python

  ../src/requests/cookies.py::get:
    name: get
    Module Path: ../src/requests/cookies.py
    Signature: get(self, name, default, domain, path)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.get()
    Arguments: ['self', 'name', 'default', 'domain', 'path']
    Returns: None
    Start Line: 194
    End Line: 204
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like get() that also supports optional domain and path args in
        order to resolve naming collisions from using one cookie jar over
        multiple domains.

        .. warning:: operation is O(n), not O(1).
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::get_cookie_header:
    name: get_cookie_header
    Module Path: ../src/requests/cookies.py
    Signature: get_cookie_header(jar, request)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.get_cookie_header()
    Arguments: ['jar', 'request']
    Returns: None
    Start Line: 140
    End Line: 148
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Produce an appropriate Cookie header string to be sent with `request`, or None.

    :rtype: str
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::get_dict:
    name: get_dict
    Module Path: ../src/requests/cookies.py
    Signature: get_dict(self, domain, path)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.get_dict()
    Arguments: ['self', 'domain', 'path']
    Returns: None
    Start Line: 306
    End Line: 319
    Complexity: 9
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Takes as an argument an optional domain and path and returns a plain
        old Python dict of name-value pairs of cookies that meet the
        requirements.

        :rtype: dict
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::get_full_url:
    name: get_full_url
    Module Path: ../src/requests/cookies.py
    Signature: get_full_url(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.get_full_url()
    Arguments: ['self']
    Returns: None
    Start Line: 49
    End Line: 67
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ["Only return the response's URL if the user hadn't set the Host", 'header', 'If they did set it, retrieve it and reconstruct the expected domain', 'Reconstruct the URL as we expect it']
    Runtime: python

  ../src/requests/cookies.py::get_header:
    name: get_header
    Module Path: ../src/requests/cookies.py
    Signature: get_header(self, name, default)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.get_header()
    Arguments: ['self', 'name', 'default']
    Returns: None
    Start Line: 75
    End Line: 76
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::get_host:
    name: get_host
    Module Path: ../src/requests/cookies.py
    Signature: get_host(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.get_host()
    Arguments: ['self']
    Returns: None
    Start Line: 43
    End Line: 44
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::get_new_headers:
    name: get_new_headers
    Module Path: ../src/requests/cookies.py
    Signature: get_new_headers(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.get_new_headers()
    Arguments: ['self']
    Returns: None
    Start Line: 87
    End Line: 88
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::get_origin_req_host:
    name: get_origin_req_host
    Module Path: ../src/requests/cookies.py
    Signature: get_origin_req_host(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.get_origin_req_host()
    Arguments: ['self']
    Returns: None
    Start Line: 46
    End Line: 47
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::get_policy:
    name: get_policy
    Module Path: ../src/requests/cookies.py
    Signature: get_policy(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.get_policy()
    Arguments: ['self']
    Returns: None
    Start Line: 435
    End Line: 437
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Return the CookiePolicy instance used.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::get_type:
    name: get_type
    Module Path: ../src/requests/cookies.py
    Signature: get_type(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.get_type()
    Arguments: ['self']
    Returns: None
    Start Line: 40
    End Line: 41
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::getheaders:
    name: getheaders
    Module Path: ../src/requests/cookies.py
    Signature: getheaders(self, name)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockResponse.getheaders()
    Arguments: ['self', 'name']
    Returns: None
    Start Line: 120
    End Line: 121
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::has_header:
    name: has_header
    Module Path: ../src/requests/cookies.py
    Signature: has_header(self, name)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.has_header()
    Arguments: ['self', 'name']
    Returns: None
    Start Line: 72
    End Line: 73
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::host:
    name: host
    Module Path: ../src/requests/cookies.py
    Signature: host(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.host()
    Arguments: ['self']
    Returns: None
    Start Line: 98
    End Line: 100
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::info:
    name: info
    Module Path: ../src/requests/cookies.py
    Signature: info(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockResponse.info()
    Arguments: ['self']
    Returns: None
    Start Line: 117
    End Line: 118
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::is_unverifiable:
    name: is_unverifiable
    Module Path: ../src/requests/cookies.py
    Signature: is_unverifiable(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.is_unverifiable()
    Arguments: ['self']
    Returns: None
    Start Line: 69
    End Line: 70
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::items:
    name: items
    Module Path: ../src/requests/cookies.py
    Signature: items(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.items()
    Arguments: ['self']
    Returns: None
    Start Line: 268
    End Line: 275
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like items() that returns a list of name-value tuples from the
        jar. Allows client-code to call ``dict(RequestsCookieJar)`` and get a
        vanilla python dict of key value pairs.

        .. seealso:: keys() and values().
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::iteritems:
    name: iteritems
    Module Path: ../src/requests/cookies.py
    Signature: iteritems(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.iteritems()
    Arguments: ['self']
    Returns: None
    Start Line: 259
    End Line: 266
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like iteritems() that returns an iterator of name-value tuples
        from the jar.

        .. seealso:: iterkeys() and itervalues().
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::iterkeys:
    name: iterkeys
    Module Path: ../src/requests/cookies.py
    Signature: iterkeys(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.iterkeys()
    Arguments: ['self']
    Returns: None
    Start Line: 225
    End Line: 232
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like iterkeys() that returns an iterator of names of cookies
        from the jar.

        .. seealso:: itervalues() and iteritems().
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::itervalues:
    name: itervalues
    Module Path: ../src/requests/cookies.py
    Signature: itervalues(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.itervalues()
    Arguments: ['self']
    Returns: None
    Start Line: 242
    End Line: 249
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like itervalues() that returns an iterator of values of cookies
        from the jar.

        .. seealso:: iterkeys() and iteritems().
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::keys:
    name: keys
    Module Path: ../src/requests/cookies.py
    Signature: keys(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.keys()
    Arguments: ['self']
    Returns: None
    Start Line: 234
    End Line: 240
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like keys() that returns a list of names of cookies from the
        jar.

        .. seealso:: values() and items().
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::list_domains:
    name: list_domains
    Module Path: ../src/requests/cookies.py
    Signature: list_domains(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.list_domains()
    Arguments: ['self']
    Returns: None
    Start Line: 277
    End Line: 283
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Utility method to list all the domains in the jar.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::list_paths:
    name: list_paths
    Module Path: ../src/requests/cookies.py
    Signature: list_paths(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.list_paths()
    Arguments: ['self']
    Returns: None
    Start Line: 285
    End Line: 291
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Utility method to list all the paths in the jar.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::merge_cookies:
    name: merge_cookies
    Module Path: ../src/requests/cookies.py
    Signature: merge_cookies(cookiejar, cookies)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.merge_cookies()
    Arguments: ['cookiejar', 'cookies']
    Returns: None
    Start Line: 542
    End Line: 561
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Add cookies to cookiejar and returns a merged CookieJar.

    :param cookiejar: CookieJar object to add the cookies to.
    :param cookies: Dictionary or CookieJar object to be added.
    :rtype: CookieJar
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::morsel_to_cookie:
    name: morsel_to_cookie
    Module Path: ../src/requests/cookies.py
    Signature: morsel_to_cookie(morsel)
    Packages: ['time', 'calendar']
    Imports: ['import time', 'import calendar']
    function_exe_cmd: requests.cookies.morsel_to_cookie()
    Arguments: ['morsel']
    Returns: None
    Start Line: 492
    End Line: 518
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Convert a Morsel object into a Cookie containing the one k/v pair.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::multiple_domains:
    name: multiple_domains
    Module Path: ../src/requests/cookies.py
    Signature: multiple_domains(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.multiple_domains()
    Arguments: ['self']
    Returns: None
    Start Line: 293
    End Line: 304
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns True if there are multiple domains in the jar.
        Returns False otherwise.

        :rtype: bool
    Description: 
    Description Embedding: 
    Comments: ['there is only one domain in jar']
    Runtime: python

  ../src/requests/cookies.py::origin_req_host:
    name: origin_req_host
    Module Path: ../src/requests/cookies.py
    Signature: origin_req_host(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.origin_req_host()
    Arguments: ['self']
    Returns: None
    Start Line: 94
    End Line: 96
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::remove_cookie_by_name:
    name: remove_cookie_by_name
    Module Path: ../src/requests/cookies.py
    Signature: remove_cookie_by_name(cookiejar, name, domain, path)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.remove_cookie_by_name()
    Arguments: ['cookiejar', 'name', 'domain', 'path']
    Returns: None
    Start Line: 151
    End Line: 167
    Complexity: 10
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Unsets a cookie by name, by default over all domains and paths.

    Wraps CookieJar.clear(), is O(n).
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::set:
    name: set
    Module Path: ../src/requests/cookies.py
    Signature: set(self, name, value)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.set()
    Arguments: ['self', 'name', 'value']
    Returns: None
    Start Line: 206
    End Line: 223
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like set() that also supports optional domain and path args in
        order to resolve naming collisions from using one cookie jar over
        multiple domains.
    Description: 
    Description Embedding: 
    Comments: ['support client code that unsets cookies by assignment of a None value:']
    Runtime: python

  ../src/requests/cookies.py::set_cookie:
    name: set_cookie
    Module Path: ../src/requests/cookies.py
    Signature: set_cookie(self, cookie)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.set_cookie()
    Arguments: ['self', 'cookie']
    Returns: None
    Start Line: 349
    End Line: 356
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::unverifiable:
    name: unverifiable
    Module Path: ../src/requests/cookies.py
    Signature: unverifiable(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.MockRequest.unverifiable()
    Arguments: ['self']
    Returns: None
    Start Line: 90
    End Line: 92
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::update:
    name: update
    Module Path: ../src/requests/cookies.py
    Signature: update(self, other)
    Packages: ['copy']
    Imports: ['import copy']
    function_exe_cmd: requests.cookies.RequestsCookieJar.update()
    Arguments: ['self', 'other']
    Returns: None
    Start Line: 358
    End Line: 364
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Updates this jar with cookies from another CookieJar or dict-like
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/cookies.py::values:
    name: values
    Module Path: ../src/requests/cookies.py
    Signature: values(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.cookies.RequestsCookieJar.values()
    Arguments: ['self']
    Returns: None
    Start Line: 251
    End Line: 257
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dict-like values() that returns a list of values of cookies from the
        jar.

        .. seealso:: keys() and items().
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/exceptions.py::__init__:
    name: __init__
    Module Path: ../src/requests/exceptions.py
    Signature: __init__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.exceptions.JSONDecodeError.__init__()
    Arguments: ['self']
    Returns: None
    Start Line: 34
    End Line: 42
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Construct the JSONDecodeError instance first with all
        args. Then use it's args to construct the IOError so that
        the json specific args aren't used as IOError specific args
        and the error message from JSONDecodeError is preserved.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/exceptions.py::__reduce__:
    name: __reduce__
    Module Path: ../src/requests/exceptions.py
    Signature: __reduce__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.exceptions.JSONDecodeError.__reduce__()
    Arguments: ['self']
    Returns: None
    Start Line: 44
    End Line: 52
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: The __reduce__ method called when pickling the object must
        be the one from the JSONDecodeError (be it json/simplejson)
        as it expects all the arguments for instantiation, not just
        one like the IOError, and the MRO would by default call the
        __reduce__ method from the IOError due to the inheritance order.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/help.py::_implementation:
    name: _implementation
    Module Path: ../src/requests/help.py
    Signature: _implementation()
    Packages: ['platform', 'sys']
    Imports: ['import platform', 'import sys']
    function_exe_cmd: requests.help._implementation()
    Arguments: None
    Returns: None
    Start Line: 34
    End Line: 66
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Return a dict with the Python implementation and version.

    Provide both the name and the version of the Python implementation
    currently running. For example, on CPython 3.10.3 it will return
    {'name': 'CPython', 'version': '3.10.3'}.

    This function works best on CPython and PyPy: in particular, it probably
    doesn't work for Jython or IronPython. Future investigation should be done
    to work out the correct shape of the code for those platforms.
    Description: 
    Description Embedding: 
    Comments: ['Complete Guess', 'Complete Guess']
    Runtime: python

  ../src/requests/help.py::info:
    name: info
    Module Path: ../src/requests/help.py
    Signature: info()
    Packages: ['platform', 'sys', 'urllib3', 'charset_normalizer', 'chardet', 'ssl', 'OpenSSL', 'cryptography', 'idna']
    Imports: ['import platform', 'import sys', 'import urllib3', 'from urllib3.contrib import urllib3.contrib.pyopenssl', 'import charset_normalizer', 'import chardet', 'import ssl', 'import OpenSSL', 'import cryptography', 'import idna']
    function_exe_cmd: requests.help.info()
    Arguments: None
    Returns: None
    Start Line: 69
    End Line: 125
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Generate information for a bug report.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/help.py::main:
    name: main
    Module Path: ../src/requests/help.py
    Signature: main()
    Packages: ['json']
    Imports: ['import json']
    function_exe_cmd: requests.help.main()
    Arguments: None
    Returns: None
    Start Line: 128
    End Line: 130
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Pretty-print the bug information as JSON.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/hooks.py::default_hooks:
    name: default_hooks
    Module Path: ../src/requests/hooks.py
    Signature: default_hooks()
    Packages: []
    Imports: []
    function_exe_cmd: requests.hooks.default_hooks()
    Arguments: None
    Returns: None
    Start Line: 15
    End Line: 16
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/hooks.py::dispatch_hook:
    name: dispatch_hook
    Module Path: ../src/requests/hooks.py
    Signature: dispatch_hook(key, hooks, hook_data)
    Packages: []
    Imports: []
    function_exe_cmd: requests.hooks.dispatch_hook()
    Arguments: ['key', 'hooks', 'hook_data']
    Returns: None
    Start Line: 22
    End Line: 33
    Complexity: 7
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Dispatches a hook dictionary on a given piece of data.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::__bool__:
    name: __bool__
    Module Path: ../src/requests/models.py
    Signature: __bool__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.__bool__()
    Arguments: ['self']
    Returns: None
    Start Line: 730
    End Line: 738
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns True if :attr:`status_code` is less than 400.

        This attribute checks if the status code of the response is between
        400 and 600 to see if there was a client error or a server error. If
        the status code, is between 200 and 400, this will return True. This
        is **not** a check to see if the response code is ``200 OK``.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::__enter__:
    name: __enter__
    Module Path: ../src/requests/models.py
    Signature: __enter__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.__enter__()
    Arguments: ['self']
    Returns: None
    Start Line: 705
    End Line: 706
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::__exit__:
    name: __exit__
    Module Path: ../src/requests/models.py
    Signature: __exit__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.__exit__()
    Arguments: ['self']
    Returns: None
    Start Line: 708
    End Line: 709
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::__getstate__:
    name: __getstate__
    Module Path: ../src/requests/models.py
    Signature: __getstate__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.__getstate__()
    Arguments: ['self']
    Returns: None
    Start Line: 711
    End Line: 717
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Consume everything; accessing the content attribute makes', 'sure the content has been fully read.']
    Runtime: python

  ../src/requests/models.py::__init__:
    name: __init__
    Module Path: ../src/requests/models.py
    Signature: __init__(self)
    Packages: ['io', 'cookies', 'datetime']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError', 'from cookies import cookies._copy_cookie_jar', 'from cookies import cookies.cookiejar_from_dict', 'from cookies import cookies.get_cookie_header', 'import datetime']
    function_exe_cmd: requests.models.Response.__init__()
    Arguments: ['self']
    Returns: None
    Start Line: 658
    End Line: 703
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: [': Integer Code of responded HTTP Status, e.g. 404 or 200.', ': Case-insensitive Dictionary of Response Headers.', ": For example, ``headers['content-encoding']`` will return the", ": value of a ``'Content-Encoding'`` response header.", ': File-like object representation of response (for advanced usage).', ': Use of ``raw`` requires that ``stream=True`` be set on the request.', ': This requirement does not apply for use internally to Requests.', ': Final URL location of Response.', ': Encoding to decode with when accessing r.text.', ': A list of :class:`Response <Response>` objects from', ': the history of the Request. Any redirect responses will end', ': up here. The list is sorted from the oldest to the most recent request.', ': Textual reason of responded HTTP Status, e.g. "Not Found" or "OK".', ': A CookieJar of Cookies the server sent back.', ': The amount of time elapsed between sending the request', ': and the arrival of the response (as a timedelta).', ': This property specifically measures the time taken between sending', ': the first byte of the request and finishing parsing the headers. It', ': is therefore unaffected by consuming the response content or the', ': value of the ``stream`` keyword argument.', ': The :class:`PreparedRequest <PreparedRequest>` object to which this', ': is a response.']
    Runtime: python

  ../src/requests/models.py::__iter__:
    name: __iter__
    Module Path: ../src/requests/models.py
    Signature: __iter__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.__iter__()
    Arguments: ['self']
    Returns: None
    Start Line: 750
    End Line: 752
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Allows you to use a response as an iterator.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::__nonzero__:
    name: __nonzero__
    Module Path: ../src/requests/models.py
    Signature: __nonzero__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.__nonzero__()
    Arguments: ['self']
    Returns: None
    Start Line: 740
    End Line: 748
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns True if :attr:`status_code` is less than 400.

        This attribute checks if the status code of the response is between
        400 and 600 to see if there was a client error or a server error. If
        the status code, is between 200 and 400, this will return True. This
        is **not** a check to see if the response code is ``200 OK``.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::__repr__:
    name: __repr__
    Module Path: ../src/requests/models.py
    Signature: __repr__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.__repr__()
    Arguments: ['self']
    Returns: None
    Start Line: 727
    End Line: 728
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::__setstate__:
    name: __setstate__
    Module Path: ../src/requests/models.py
    Signature: __setstate__(self, state)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.__setstate__()
    Arguments: ['self', 'state']
    Returns: None
    Start Line: 719
    End Line: 725
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['pickled objects do not have .raw']
    Runtime: python

  ../src/requests/models.py::_encode_files:
    name: _encode_files
    Module Path: ../src/requests/models.py
    Signature: _encode_files(files, data)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.RequestEncodingMixin._encode_files()
    Arguments: ['files', 'data']
    Returns: None
    Start Line: 136
    End Line: 203
    Complexity: 23
    Is Active: True
    Is Async: False
    Decorators: staticmethod
    Docstring: Build the body for a multipart/form-data request.

        Will successfully encode files when passed as a dict or a list of
        tuples. Order is retained if data is a list of tuples but arbitrary
        if parameters are supplied as a dict.
        The tuples may be 2-tuples (filename, fileobj), 3-tuples (filename, fileobj, contentype)
        or 4-tuples (filename, fileobj, contentype, custom_headers).
    Description: 
    Description Embedding: 
    Comments: ["Don't call str() on bytestrings: in Py3 it all goes wrong.", 'support for explicit filename']
    Runtime: python

  ../src/requests/models.py::_encode_params:
    name: _encode_params
    Module Path: ../src/requests/models.py
    Signature: _encode_params(data)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.RequestEncodingMixin._encode_params()
    Arguments: ['data']
    Returns: None
    Start Line: 106
    End Line: 134
    Complexity: 10
    Is Active: True
    Is Async: False
    Decorators: staticmethod
    Docstring: Encode parameters in a piece of data.

        Will successfully encode parameters when passed as a dict or a list of
        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary
        if parameters are supplied as a dict.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::_get_idna_encoded_host:
    name: _get_idna_encoded_host
    Module Path: ../src/requests/models.py
    Signature: _get_idna_encoded_host(host)
    Packages: ['idna']
    Imports: ['import encodings.idna', 'import idna']
    function_exe_cmd: requests.models.PreparedRequest._get_idna_encoded_host()
    Arguments: ['host']
    Returns: None
    Start Line: 399
    End Line: 407
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: staticmethod
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::apparent_encoding:
    name: apparent_encoding
    Module Path: ../src/requests/models.py
    Signature: apparent_encoding(self)
    Packages: ['io']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.Response.apparent_encoding()
    Arguments: ['self']
    Returns: None
    Start Line: 789
    End Line: 797
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: The apparent encoding, provided by the charset_normalizer or chardet libraries.
    Description: 
    Description Embedding: 
    Comments: ["If no character detection library is available, we'll fall back", 'to a standard Python utf-8 str.']
    Runtime: python

  ../src/requests/models.py::close:
    name: close
    Module Path: ../src/requests/models.py
    Signature: close(self)
    Packages: ['io']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.Response.close()
    Arguments: ['self']
    Returns: None
    Start Line: 1028
    End Line: 1039
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Releases the connection back to the pool. Once this method has been
        called the underlying ``raw`` object must not be accessed again.

        *Note: Should not normally need to be called explicitly.*
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::content:
    name: content
    Module Path: ../src/requests/models.py
    Signature: content(self)
    Packages: ['io', 'urllib3']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError', 'from urllib3.fields import urllib3.fields.RequestField', 'from urllib3.filepost import urllib3.filepost.encode_multipart_formdata', 'from urllib3.util import urllib3.util.parse_url']
    function_exe_cmd: requests.models.Response.content()
    Arguments: ['self']
    Returns: None
    Start Line: 890
    End Line: 907
    Complexity: 8
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: Content of the response, in bytes.
    Description: 
    Description Embedding: 
    Comments: ['Read the contents.', "don't need to release the connection; that's been handled by urllib3", 'since we exhausted the data.']
    Runtime: python

  ../src/requests/models.py::copy:
    name: copy
    Module Path: ../src/requests/models.py
    Signature: copy(self)
    Packages: ['cookies', 'hooks', 'io']
    Imports: ['from cookies import cookies._copy_cookie_jar', 'from cookies import cookies.cookiejar_from_dict', 'from cookies import cookies.get_cookie_header', 'from hooks import hooks.default_hooks', 'from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.PreparedRequest.copy()
    Arguments: ['self']
    Returns: None
    Start Line: 382
    End Line: 391
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::deregister_hook:
    name: deregister_hook
    Module Path: ../src/requests/models.py
    Signature: deregister_hook(self, event, hook)
    Packages: ['io', 'hooks']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError', 'from hooks import hooks.default_hooks']
    function_exe_cmd: requests.models.RequestHooksMixin.deregister_hook()
    Arguments: ['self', 'event', 'hook']
    Returns: None
    Start Line: 218
    End Line: 227
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Deregister a previously registered hook.
        Returns True if the hook existed, False if not.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::is_permanent_redirect:
    name: is_permanent_redirect
    Module Path: ../src/requests/models.py
    Signature: is_permanent_redirect(self)
    Packages: ['io']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.Response.is_permanent_redirect()
    Arguments: ['self']
    Returns: None
    Start Line: 776
    End Line: 782
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: True if this Response one of the permanent versions of redirect.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::is_redirect:
    name: is_redirect
    Module Path: ../src/requests/models.py
    Signature: is_redirect(self)
    Packages: ['io']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.Response.is_redirect()
    Arguments: ['self']
    Returns: None
    Start Line: 769
    End Line: 774
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: True if this Response is a well-formed HTTP redirect that could have
        been processed automatically (by :meth:`Session.resolve_redirects`).
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::iter_content:
    name: iter_content
    Module Path: ../src/requests/models.py
    Signature: iter_content(self, chunk_size, decode_unicode)
    Packages: ['io', 'urllib3']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError', 'from urllib3.fields import urllib3.fields.RequestField', 'from urllib3.filepost import urllib3.filepost.encode_multipart_formdata', 'from urllib3.util import urllib3.util.parse_url']
    function_exe_cmd: requests.models.Response.iter_content()
    Arguments: ['self', 'chunk_size', 'decode_unicode']
    Returns: None
    Start Line: 799
    End Line: 855
    Complexity: 15
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Iterates over the response data.  When stream=True is set on the
        request, this avoids reading the content at once into memory for
        large responses.  The chunk size is the number of bytes it should
        read into memory.  This is not necessarily the length of each item
        returned as decoding can take place.

        chunk_size must be of type int or None. A value of None will
        function differently depending on the value of `stream`.
        stream=True will read data as it arrives in whatever size the
        chunks are received. If stream=False, data is returned as
        a single chunk.

        If decode_unicode is True, content will be decoded using the best
        available encoding based on the response.
    Description: 
    Description Embedding: 
    Comments: ['Special case for urllib3.', 'Standard file-like object.', 'simulate reading small chunks of the content']
    Runtime: python

  ../src/requests/models.py::iter_lines:
    name: iter_lines
    Module Path: ../src/requests/models.py
    Signature: iter_lines(self, chunk_size, decode_unicode, delimiter)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.iter_lines()
    Arguments: ['self', 'chunk_size', 'decode_unicode', 'delimiter']
    Returns: None
    Start Line: 857
    End Line: 888
    Complexity: 10
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Iterates over the response data, one line at a time.  When
        stream=True is set on the request, this avoids reading the
        content at once into memory for large responses.

        .. note:: This method is not reentrant safe.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::json:
    name: json
    Module Path: ../src/requests/models.py
    Signature: json(self)
    Packages: ['io', 'exceptions']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.Response.json()
    Arguments: ['self']
    Returns: None
    Start Line: 947
    End Line: 980
    Complexity: 9
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Decodes the JSON response body (if any) as a Python object.

        This may return a dictionary, list, etc. depending on what is in the response.

        :param \*\*kwargs: Optional arguments that ``json.loads`` takes.
        :raises requests.exceptions.JSONDecodeError: If the response body does not
            contain valid json.
    Description: 
    Description Embedding: 
    Comments: ['No encoding set. JSON RFC 4627 section 3 states we should expect', 'UTF-8, -16 or -32. Detect which one to use; If the detection or', 'decoding fails, fall back to `self.text` (using charset_normalizer to make', 'a best guess).', "Wrong UTF codec detected; usually because it's not UTF-8", 'but some other 8-bit codec.  This is an RFC violation,', "and the server didn't bother to tell us what codec *was*", 'used.', 'Catch JSON-related errors and raise as requests.JSONDecodeError', 'This aliases json.JSONDecodeError and simplejson.JSONDecodeError']
    Runtime: python

  ../src/requests/models.py::links:
    name: links
    Module Path: ../src/requests/models.py
    Signature: links(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.links()
    Arguments: ['self']
    Returns: None
    Start Line: 982
    End Line: 997
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: Returns the parsed header links of the response, if any.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::next:
    name: next
    Module Path: ../src/requests/models.py
    Signature: next(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.next()
    Arguments: ['self']
    Returns: None
    Start Line: 784
    End Line: 787
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: Returns a PreparedRequest for the next request in a redirect chain, if there is one.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::ok:
    name: ok
    Module Path: ../src/requests/models.py
    Signature: ok(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.ok()
    Arguments: ['self']
    Returns: None
    Start Line: 754
    End Line: 767
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: Returns True if :attr:`status_code` is less than 400, False if not.

        This attribute checks if the status code of the response is between
        400 and 600 to see if there was a client error or a server error. If
        the status code is between 200 and 400, this will return True. This
        is **not** a check to see if the response code is ``200 OK``.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::path_url:
    name: path_url
    Module Path: ../src/requests/models.py
    Signature: path_url(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.RequestEncodingMixin.path_url()
    Arguments: ['self']
    Returns: None
    Start Line: 85
    End Line: 104
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: Build the path URL to use.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::prepare:
    name: prepare
    Module Path: ../src/requests/models.py
    Signature: prepare(self, method, url, headers, files, data, params, auth, cookies, hooks, json)
    Packages: ['auth', 'cookies', 'hooks', 'io']
    Imports: ['from auth import auth.HTTPBasicAuth', 'from utils import utils.get_auth_from_url', 'from cookies import cookies._copy_cookie_jar', 'from cookies import cookies.cookiejar_from_dict', 'from cookies import cookies.get_cookie_header', 'from hooks import hooks.default_hooks', 'from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.PreparedRequest.prepare()
    Arguments: ['self', 'method', 'url', 'headers', 'files', 'data', 'params', 'auth', 'cookies', 'hooks', 'json']
    Returns: None
    Start Line: 351
    End Line: 377
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Prepares the entire request with the given parameters.
    Description: 
    Description Embedding: 
    Comments: ['Note that prepare_auth must be last to enable authentication schemes', 'such as OAuth to work on a fully prepared request.', 'This MUST go after prepare_auth. Authenticators could add a hook']
    Runtime: python

  ../src/requests/models.py::prepare_auth:
    name: prepare_auth
    Module Path: ../src/requests/models.py
    Signature: prepare_auth(self, auth, url)
    Packages: ['auth']
    Imports: ['from auth import auth.HTTPBasicAuth', 'from utils import utils.get_auth_from_url']
    function_exe_cmd: requests.models.PreparedRequest.prepare_auth()
    Arguments: ['self', 'auth', 'url']
    Returns: None
    Start Line: 588
    End Line: 608
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Prepares the given HTTP auth data.
    Description: 
    Description Embedding: 
    Comments: ['If no Auth is explicitly provided, extract it from the URL first.', 'special-case basic HTTP auth', 'Allow auth to make its changes.', 'Update self to reflect the auth changes.', 'Recompute Content-Length']
    Runtime: python

  ../src/requests/models.py::prepare_body:
    name: prepare_body
    Module Path: ../src/requests/models.py
    Signature: prepare_body(self, data, files, json)
    Packages: ['urllib3', 'io']
    Imports: ['from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from urllib3.fields import urllib3.fields.RequestField', 'from urllib3.filepost import urllib3.filepost.encode_multipart_formdata', 'from urllib3.util import urllib3.util.parse_url', 'from io import io.UnsupportedOperation', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.PreparedRequest.prepare_body()
    Arguments: ['self', 'data', 'files', 'json']
    Returns: None
    Start Line: 494
    End Line: 570
    Complexity: 20
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Prepares the given HTTP body data.
    Description: 
    Description Embedding: 
    Comments: ['Check if file, fo, generator, iterator.', 'If not, run through normal process.', "Nottin' on you.", "urllib3 requires a bytes-like body. Python 2's json.dumps", 'provides this natively, but Python 3 gives a Unicode string.', 'Record the current file position before reading.', 'This will allow us to rewind a file in the event', 'of a redirect.', 'This differentiates from None, allowing us to catch', 'a failed `tell()` later when trying to rewind the body', 'Multi-part file uploads.', "Add content-type if it wasn't explicitly provided."]
    Runtime: python

  ../src/requests/models.py::prepare_content_length:
    name: prepare_content_length
    Module Path: ../src/requests/models.py
    Signature: prepare_content_length(self, body)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.PreparedRequest.prepare_content_length()
    Arguments: ['self', 'body']
    Returns: None
    Start Line: 572
    End Line: 586
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Prepare Content-Length header based on request method and body
    Description: 
    Description Embedding: 
    Comments: ['If length exists, set it. Otherwise, we fallback', 'to Transfer-Encoding: chunked.', 'Set Content-Length to 0 for methods that can have a body', "but don't provide one. (i.e. not GET or HEAD)"]
    Runtime: python

  ../src/requests/models.py::prepare_cookies:
    name: prepare_cookies
    Module Path: ../src/requests/models.py
    Signature: prepare_cookies(self, cookies)
    Packages: ['cookies', 'io']
    Imports: ['from cookies import cookies._copy_cookie_jar', 'from cookies import cookies.cookiejar_from_dict', 'from cookies import cookies.get_cookie_header', 'from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.PreparedRequest.prepare_cookies()
    Arguments: ['self', 'cookies']
    Returns: None
    Start Line: 610
    End Line: 628
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Prepares the given HTTP cookie data.

        This function eventually generates a ``Cookie`` header from the
        given cookies using cookielib. Due to cookielib's design, the header
        will not be regenerated if it already exists, meaning this function
        can only be called once for the life of the
        :class:`PreparedRequest <PreparedRequest>` object. Any subsequent calls
        to ``prepare_cookies`` will have no actual effect, unless the "Cookie"
        header is removed beforehand.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::prepare_headers:
    name: prepare_headers
    Module Path: ../src/requests/models.py
    Signature: prepare_headers(self, headers)
    Packages: ['io']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError']
    function_exe_cmd: requests.models.PreparedRequest.prepare_headers()
    Arguments: ['self', 'headers']
    Returns: None
    Start Line: 483
    End Line: 492
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Prepares the given HTTP headers.
    Description: 
    Description Embedding: 
    Comments: ['Raise exception on invalid header value.']
    Runtime: python

  ../src/requests/models.py::prepare_hooks:
    name: prepare_hooks
    Module Path: ../src/requests/models.py
    Signature: prepare_hooks(self, hooks)
    Packages: ['hooks']
    Imports: ['from hooks import hooks.default_hooks']
    function_exe_cmd: requests.models.PreparedRequest.prepare_hooks()
    Arguments: ['self', 'hooks']
    Returns: None
    Start Line: 630
    End Line: 637
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Prepares the given hooks.
    Description: 
    Description Embedding: 
    Comments: ['hooks can be passed as None to the prepare method and to this', 'method. To prevent iterating over None, simply use an empty list', 'if hooks is False-y']
    Runtime: python

  ../src/requests/models.py::prepare_method:
    name: prepare_method
    Module Path: ../src/requests/models.py
    Signature: prepare_method(self, method)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.PreparedRequest.prepare_method()
    Arguments: ['self', 'method']
    Returns: None
    Start Line: 393
    End Line: 397
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Prepares the given HTTP method.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::prepare_url:
    name: prepare_url
    Module Path: ../src/requests/models.py
    Signature: prepare_url(self, url, params)
    Packages: ['io', 'exceptions', 'auth', 'idna']
    Imports: ['from io import io.UnsupportedOperation', 'from urllib3.exceptions import urllib3.exceptions.DecodeError', 'from urllib3.exceptions import urllib3.exceptions.LocationParseError', 'from urllib3.exceptions import urllib3.exceptions.ProtocolError', 'from urllib3.exceptions import urllib3.exceptions.ReadTimeoutError', 'from urllib3.exceptions import urllib3.exceptions.SSLError', 'from exceptions import exceptions.ChunkedEncodingError', 'from exceptions import exceptions.ConnectionError', 'from exceptions import exceptions.ContentDecodingError', 'from exceptions import exceptions.HTTPError', 'from exceptions import exceptions.InvalidJSONError', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.JSONDecodeError as RequestsJSONDecodeError', 'from exceptions import exceptions.MissingSchema', 'from exceptions import exceptions.SSLError as RequestsSSLError', 'from exceptions import exceptions.StreamConsumedError', 'from auth import auth.HTTPBasicAuth', 'from utils import utils.get_auth_from_url', 'import encodings.idna', 'import idna']
    function_exe_cmd: requests.models.PreparedRequest.prepare_url()
    Arguments: ['self', 'url', 'params']
    Returns: None
    Start Line: 409
    End Line: 481
    Complexity: 19
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Prepares the given HTTP URL.
    Description: 
    Description Embedding: 
    Comments: [': Accept objects that have string representations.', ": We're unable to blindly call unicode/str functions", ": as this will include the bytestring indicator (b'')", ': on python 3.x.', ': https://github.com/psf/requests/pull/2238', 'Remove leading whitespaces from url', "Don't do any URL preparation for non-HTTP schemes like `mailto`,", '`data` etc to work around exceptions from `url_parse`, which', 'handles RFC 3986 only.', 'Support for unicode domain names and paths.', 'In general, we want to try IDNA encoding the hostname if the string contains', 'non-ASCII characters. This allows users to automatically get the correct IDNA', 'behaviour. For strings containing only ASCII characters, we need to also verify', "it doesn't start with a wildcard (*), before allowing the unencoded hostname.", 'Carefully reconstruct the network location', "Bare domains aren't valid URLs."]
    Runtime: python

  ../src/requests/models.py::raise_for_status:
    name: raise_for_status
    Module Path: ../src/requests/models.py
    Signature: raise_for_status(self)
    Packages: ['encodings']
    Imports: ['import encodings.idna']
    function_exe_cmd: requests.models.Response.raise_for_status()
    Arguments: ['self']
    Returns: None
    Start Line: 999
    End Line: 1026
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Raises :class:`HTTPError`, if one occurred.
    Description: 
    Description Embedding: 
    Comments: ['We attempt to decode utf-8 first because some servers', 'choose to localize their reason strings. If the string', "isn't utf-8, we fall back to iso-8859-1 for all other", 'encodings. (See PR #3538)']
    Runtime: python

  ../src/requests/models.py::register_hook:
    name: register_hook
    Module Path: ../src/requests/models.py
    Signature: register_hook(self, event, hook)
    Packages: ['hooks']
    Imports: ['from hooks import hooks.default_hooks']
    function_exe_cmd: requests.models.RequestHooksMixin.register_hook()
    Arguments: ['self', 'event', 'hook']
    Returns: None
    Start Line: 207
    End Line: 216
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Properly register a hook.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/models.py::text:
    name: text
    Module Path: ../src/requests/models.py
    Signature: text(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.models.Response.text()
    Arguments: ['self']
    Returns: None
    Start Line: 909
    End Line: 945
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: property
    Docstring: Content of the response, in unicode.

        If Response.encoding is None, encoding will be guessed using
        ``charset_normalizer`` or ``chardet``.

        The encoding of the response content is determined based solely on HTTP
        headers, following RFC 2616 to the letter. If you can take advantage of
        non-HTTP knowledge to make a better guess at the encoding, you should
        set ``r.encoding`` appropriately before accessing this property.
    Description: 
    Description Embedding: 
    Comments: ['Try charset from content-type', 'Fallback to auto-detected encoding.', 'Decode unicode from given encoding.', 'A LookupError is raised if the encoding was not found which could', 'indicate a misspelling or similar mistake.', '', 'A TypeError can be raised if encoding is None', '', 'So we try blindly encoding.']
    Runtime: python

  ../src/requests/sessions.py::__enter__:
    name: __enter__
    Module Path: ../src/requests/sessions.py
    Signature: __enter__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.Session.__enter__()
    Arguments: ['self']
    Returns: None
    Start Line: 451
    End Line: 452
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::__exit__:
    name: __exit__
    Module Path: ../src/requests/sessions.py
    Signature: __exit__(self)
    Packages: ['os']
    Imports: ['import os']
    function_exe_cmd: requests.sessions.Session.__exit__()
    Arguments: ['self']
    Returns: None
    Start Line: 454
    End Line: 455
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::__getstate__:
    name: __getstate__
    Module Path: ../src/requests/sessions.py
    Signature: __getstate__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.Session.__getstate__()
    Arguments: ['self']
    Returns: None
    Start Line: 810
    End Line: 812
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::__init__:
    name: __init__
    Module Path: ../src/requests/sessions.py
    Signature: __init__(self)
    Packages: ['auth', 'os', 'hooks', 'models', 'cookies', 'compat', 'adapters']
    Imports: ['from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.get_netrc_auth', 'import os', 'from hooks import hooks.default_hooks', 'from hooks import hooks.dispatch_hook', 'from models import models.DEFAULT_REDIRECT_LIMIT', 'from models import models.REDIRECT_STATI', 'from models import models.PreparedRequest', 'from models import models.Request', 'from cookies import cookies.RequestsCookieJar', 'from cookies import cookies.cookiejar_from_dict', 'from cookies import cookies.extract_cookies_to_jar', 'from cookies import cookies.merge_cookies', 'from compat import compat.Mapping', 'from compat import compat.cookielib', 'from compat import compat.urljoin', 'from compat import compat.urlparse', 'from adapters import adapters.HTTPAdapter']
    function_exe_cmd: requests.sessions.Session.__init__()
    Arguments: ['self']
    Returns: None
    Start Line: 390
    End Line: 449
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: [': A case-insensitive dictionary of headers to be sent on each', ': :class:`Request <Request>` sent from this', ': :class:`Session <Session>`.', ': Default Authentication tuple or object to attach to', ': :class:`Request <Request>`.', ': Dictionary mapping protocol or protocol and host to the URL of the proxy', ": (e.g. {'http': 'foo.bar:3128', 'http://host.name': 'foo.bar:4012'}) to", ': be used on each :class:`Request <Request>`.', ': Event-handling hooks.', ': Dictionary of querystring data to attach to each', ': :class:`Request <Request>`. The dictionary values may be lists for', ': representing multivalued query parameters.', ': Stream response content default.', ': SSL Verification default.', ': Defaults to `True`, requiring requests to verify the TLS certificate at the', ': remote end.', ': If verify is set to `False`, requests will accept any TLS certificate', ': presented by the server, and will ignore hostname mismatches and/or', ': expired certificates, which will make your application vulnerable to', ': man-in-the-middle (MitM) attacks.', ': Only set this to `False` for testing.', ': SSL client certificate default, if String, path to ssl client', ": cert file (.pem). If Tuple, ('cert', 'key') pair.", ': Maximum number of redirects allowed. If the request exceeds this', ': limit, a :class:`TooManyRedirects` exception is raised.', ': This defaults to requests.models.DEFAULT_REDIRECT_LIMIT, which is', ': 30.', ': Trust environment settings for proxy configuration, default', ': authentication and similar.', ': A CookieJar containing all currently outstanding cookies set on this', ': session. By default it is a', ': :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but', ': may be any other ``cookielib.CookieJar`` compatible object.', 'Default connection adapters.']
    Runtime: python

  ../src/requests/sessions.py::__setstate__:
    name: __setstate__
    Module Path: ../src/requests/sessions.py
    Signature: __setstate__(self, state)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.Session.__setstate__()
    Arguments: ['self', 'state']
    Returns: None
    Start Line: 814
    End Line: 816
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::close:
    name: close
    Module Path: ../src/requests/sessions.py
    Signature: close(self)
    Packages: ['os', 'adapters']
    Imports: ['import os', 'from adapters import adapters.HTTPAdapter']
    function_exe_cmd: requests.sessions.Session.close()
    Arguments: ['self']
    Returns: None
    Start Line: 794
    End Line: 797
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Closes all adapters and as such the session
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::delete:
    name: delete
    Module Path: ../src/requests/sessions.py
    Signature: delete(self, url)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.Session.delete()
    Arguments: ['self', 'url']
    Returns: None
    Start Line: 663
    End Line: 671
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a DELETE request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::get:
    name: get
    Module Path: ../src/requests/sessions.py
    Signature: get(self, url)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.Session.get()
    Arguments: ['self', 'url']
    Returns: None
    Start Line: 593
    End Line: 602
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a GET request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::get_adapter:
    name: get_adapter
    Module Path: ../src/requests/sessions.py
    Signature: get_adapter(self, url)
    Packages: ['adapters']
    Imports: ['from adapters import adapters.HTTPAdapter']
    function_exe_cmd: requests.sessions.Session.get_adapter()
    Arguments: ['self', 'url']
    Returns: None
    Start Line: 781
    End Line: 792
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns the appropriate connection adapter for the given URL.

        :rtype: requests.adapters.BaseAdapter
    Description: 
    Description Embedding: 
    Comments: ['Nothing matches :-/']
    Runtime: python

  ../src/requests/sessions.py::get_redirect_target:
    name: get_redirect_target
    Module Path: ../src/requests/sessions.py
    Signature: get_redirect_target(self, resp)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.SessionRedirectMixin.get_redirect_target()
    Arguments: ['self', 'resp']
    Returns: None
    Start Line: 107
    End Line: 125
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Receives a Response. Returns a redirect URI or ``None``
    Description: 
    Description Embedding: 
    Comments: ['Due to the nature of how requests processes redirects this method will', 'be called at least once upon the original response and at least twice', 'on each subsequent redirect response (if any).', 'If a custom mixin is used to handle this logic, it may be advantageous', 'to cache the redirect location onto the response object as a private', 'attribute.', 'Currently the underlying http module on py3 decode headers', 'in latin1, but empirical evidence suggests that latin1 is very', 'rarely used with non-ASCII characters in HTTP headers.', 'It is more likely to get UTF8 header rather than latin1.', 'This causes incorrect handling of UTF8 encoded location headers.', 'To solve this, we re-encode the location in latin1.']
    Runtime: python

  ../src/requests/sessions.py::head:
    name: head
    Module Path: ../src/requests/sessions.py
    Signature: head(self, url)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.Session.head()
    Arguments: ['self', 'url']
    Returns: None
    Start Line: 615
    End Line: 624
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a HEAD request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::merge_environment_settings:
    name: merge_environment_settings
    Module Path: ../src/requests/sessions.py
    Signature: merge_environment_settings(self, url, proxies, stream, verify, cert)
    Packages: ['compat', 'os']
    Imports: ['from compat import compat.Mapping', 'from compat import compat.cookielib', 'from compat import compat.urljoin', 'from compat import compat.urlparse', 'import os']
    function_exe_cmd: requests.sessions.Session.merge_environment_settings()
    Arguments: ['self', 'url', 'proxies', 'stream', 'verify', 'cert']
    Returns: None
    Start Line: 750
    End Line: 779
    Complexity: 9
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Check the environment and merge it with some settings.

        :rtype: dict
    Description: 
    Description Embedding: 
    Comments: ['Gather clues from the surrounding environment.', "Set environment's proxies.", 'Look for requests environment configuration', 'and be compatible with cURL.', 'Merge all the kwargs.']
    Runtime: python

  ../src/requests/sessions.py::merge_hooks:
    name: merge_hooks
    Module Path: ../src/requests/sessions.py
    Signature: merge_hooks(request_hooks, session_hooks, dict_class)
    Packages: ['hooks']
    Imports: ['from hooks import hooks.default_hooks', 'from hooks import hooks.dispatch_hook']
    function_exe_cmd: requests.sessions.merge_hooks()
    Arguments: ['request_hooks', 'session_hooks', 'dict_class']
    Returns: None
    Start Line: 91
    End Line: 103
    Complexity: 7
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Properly merges both requests and session hooks.

    This is necessary because when request_hooks == {'response': []}, the
    merge breaks Session hooks entirely.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::merge_setting:
    name: merge_setting
    Module Path: ../src/requests/sessions.py
    Signature: merge_setting(request_setting, session_setting, dict_class)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.merge_setting()
    Arguments: ['request_setting', 'session_setting', 'dict_class']
    Returns: None
    Start Line: 61
    End Line: 88
    Complexity: 7
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Determines appropriate setting for a given request, taking into account
    the explicit setting on that request, and the setting in the session. If a
    setting is a dictionary, they will be merged together using `dict_class`
    Description: 
    Description Embedding: 
    Comments: ['Bypass if not a dictionary (e.g. verify)', 'Remove keys that are set to None. Extract keys first to avoid altering', 'the dictionary during iteration.']
    Runtime: python

  ../src/requests/sessions.py::mount:
    name: mount
    Module Path: ../src/requests/sessions.py
    Signature: mount(self, prefix, adapter)
    Packages: ['adapters']
    Imports: ['from adapters import adapters.HTTPAdapter']
    function_exe_cmd: requests.sessions.Session.mount()
    Arguments: ['self', 'prefix', 'adapter']
    Returns: None
    Start Line: 799
    End Line: 808
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Registers a connection adapter to a prefix.

        Adapters are sorted in descending order by prefix length.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::options:
    name: options
    Module Path: ../src/requests/sessions.py
    Signature: options(self, url)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.Session.options()
    Arguments: ['self', 'url']
    Returns: None
    Start Line: 604
    End Line: 613
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a OPTIONS request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::patch:
    name: patch
    Module Path: ../src/requests/sessions.py
    Signature: patch(self, url, data)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.Session.patch()
    Arguments: ['self', 'url', 'data']
    Returns: None
    Start Line: 651
    End Line: 661
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a PATCH request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param data: (optional) Dictionary, list of tuples, bytes, or file-like
            object to send in the body of the :class:`Request`.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::post:
    name: post
    Module Path: ../src/requests/sessions.py
    Signature: post(self, url, data, json)
    Packages: ['os']
    Imports: ['import os']
    function_exe_cmd: requests.sessions.Session.post()
    Arguments: ['self', 'url', 'data', 'json']
    Returns: None
    Start Line: 626
    End Line: 637
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a POST request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param data: (optional) Dictionary, list of tuples, bytes, or file-like
            object to send in the body of the :class:`Request`.
        :param json: (optional) json to send in the body of the :class:`Request`.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::prepare_request:
    name: prepare_request
    Module Path: ../src/requests/sessions.py
    Signature: prepare_request(self, request)
    Packages: ['os', 'cookies', 'auth', 'hooks']
    Imports: ['import os', 'from cookies import cookies.RequestsCookieJar', 'from cookies import cookies.cookiejar_from_dict', 'from cookies import cookies.extract_cookies_to_jar', 'from cookies import cookies.merge_cookies', 'from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.get_netrc_auth', 'from hooks import hooks.default_hooks', 'from hooks import hooks.dispatch_hook']
    function_exe_cmd: requests.sessions.Session.prepare_request()
    Arguments: ['self', 'request']
    Returns: None
    Start Line: 457
    End Line: 498
    Complexity: 8
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Constructs a :class:`PreparedRequest <PreparedRequest>` for
        transmission and returns it. The :class:`PreparedRequest` has settings
        merged from the :class:`Request <Request>` instance and those of the
        :class:`Session`.

        :param request: :class:`Request` instance to prepare with this
            session's settings.
        :rtype: requests.PreparedRequest
    Description: 
    Description Embedding: 
    Comments: ['Bootstrap CookieJar.', 'Merge with session cookies', "Set environment's basic authentication if not explicitly set."]
    Runtime: python

  ../src/requests/sessions.py::put:
    name: put
    Module Path: ../src/requests/sessions.py
    Signature: put(self, url, data)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.Session.put()
    Arguments: ['self', 'url', 'data']
    Returns: None
    Start Line: 639
    End Line: 649
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Sends a PUT request. Returns :class:`Response` object.

        :param url: URL for the new :class:`Request` object.
        :param data: (optional) Dictionary, list of tuples, bytes, or file-like
            object to send in the body of the :class:`Request`.
        :param \*\*kwargs: Optional arguments that ``request`` takes.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::rebuild_auth:
    name: rebuild_auth
    Module Path: ../src/requests/sessions.py
    Signature: rebuild_auth(self, prepared_request, response)
    Packages: ['auth', 'os']
    Imports: ['from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.get_netrc_auth', 'import os']
    function_exe_cmd: requests.sessions.SessionRedirectMixin.rebuild_auth()
    Arguments: ['self', 'prepared_request', 'response']
    Returns: None
    Start Line: 282
    End Line: 300
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: When being redirected we may want to strip authentication from the
        request to avoid leaking credentials. This method intelligently removes
        and reapplies authentication where possible to avoid credential loss.
    Description: 
    Description Embedding: 
    Comments: ['If we get redirected to a new host, we should strip out any', 'authentication headers.', '.netrc might have more auth for us on our new host.']
    Runtime: python

  ../src/requests/sessions.py::rebuild_method:
    name: rebuild_method
    Module Path: ../src/requests/sessions.py
    Signature: rebuild_method(self, prepared_request, response)
    Packages: []
    Imports: []
    function_exe_cmd: requests.sessions.SessionRedirectMixin.rebuild_method()
    Arguments: ['self', 'prepared_request', 'response']
    Returns: None
    Start Line: 333
    End Line: 353
    Complexity: 10
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: When being redirected we may want to change the method of the request
        based on certain specs or browser behavior.
    Description: 
    Description Embedding: 
    Comments: ['https://tools.ietf.org/html/rfc7231#section-6.4.4', 'Do what the browsers do, despite standards...', 'First, turn 302s into GETs.', 'Second, if a POST is responded to with a 301, turn it into a GET.', 'This bizarre behaviour is explained in Issue 1704.']
    Runtime: python

  ../src/requests/sessions.py::rebuild_proxies:
    name: rebuild_proxies
    Module Path: ../src/requests/sessions.py
    Signature: rebuild_proxies(self, prepared_request, proxies)
    Packages: ['auth']
    Imports: ['from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.get_netrc_auth']
    function_exe_cmd: requests.sessions.SessionRedirectMixin.rebuild_proxies()
    Arguments: ['self', 'prepared_request', 'proxies']
    Returns: None
    Start Line: 302
    End Line: 331
    Complexity: 7
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: This method re-evaluates the proxy configuration by considering the
        environment variables. If we are redirected to a URL covered by
        NO_PROXY, we strip the proxy configuration. Otherwise, we set missing
        proxy keys for this URL (in case they were stripped by a previous
        redirect).

        This method also replaces the Proxy-Authorization header where
        necessary.

        :rtype: dict
    Description: 
    Description Embedding: 
    Comments: ['urllib3 handles proxy authorization for us in the standard adapter.', 'Avoid appending this to TLS tunneled requests where it may be leaked.']
    Runtime: python

  ../src/requests/sessions.py::request:
    name: request
    Module Path: ../src/requests/sessions.py
    Signature: request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)
    Packages: ['cookies', 'auth', 'time', 'hooks', 'os']
    Imports: ['from cookies import cookies.RequestsCookieJar', 'from cookies import cookies.cookiejar_from_dict', 'from cookies import cookies.extract_cookies_to_jar', 'from cookies import cookies.merge_cookies', 'from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.get_netrc_auth', 'import time', 'from datetime import datetime.timedelta', 'from hooks import hooks.default_hooks', 'from hooks import hooks.dispatch_hook', 'import os']
    function_exe_cmd: requests.sessions.Session.request()
    Arguments: ['self', 'method', 'url', 'params', 'data', 'headers', 'cookies', 'files', 'auth', 'timeout', 'allow_redirects', 'proxies', 'hooks', 'stream', 'verify', 'cert', 'json']
    Returns: None
    Start Line: 500
    End Line: 591
    Complexity: 7
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Constructs a :class:`Request <Request>`, prepares it and sends it.
        Returns :class:`Response <Response>` object.

        :param method: method for the new :class:`Request` object.
        :param url: URL for the new :class:`Request` object.
        :param params: (optional) Dictionary or bytes to be sent in the query
            string for the :class:`Request`.
        :param data: (optional) Dictionary, list of tuples, bytes, or file-like
            object to send in the body of the :class:`Request`.
        :param json: (optional) json to send in the body of the
            :class:`Request`.
        :param headers: (optional) Dictionary of HTTP Headers to send with the
            :class:`Request`.
        :param cookies: (optional) Dict or CookieJar object to send with the
            :class:`Request`.
        :param files: (optional) Dictionary of ``'filename': file-like-objects``
            for multipart encoding upload.
        :param auth: (optional) Auth tuple or callable to enable
            Basic/Digest/Custom HTTP Auth.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) <timeouts>` tuple.
        :type timeout: float or tuple
        :param allow_redirects: (optional) Set to True by default.
        :type allow_redirects: bool
        :param proxies: (optional) Dictionary mapping protocol or protocol and
            hostname to the URL of the proxy.
        :param hooks: (optional) Dictionary mapping hook name to one event or
            list of events, event must be callable.
        :param stream: (optional) whether to immediately download the response
            content. Defaults to ``False``.
        :param verify: (optional) Either a boolean, in which case it controls whether we verify
            the server's TLS certificate, or a string, in which case it must be a path
            to a CA bundle to use. Defaults to ``True``. When set to
            ``False``, requests will accept any TLS certificate presented by
            the server, and will ignore hostname mismatches and/or expired
            certificates, which will make your application vulnerable to
            man-in-the-middle (MitM) attacks. Setting verify to ``False``
            may be useful during local development or testing.
        :param cert: (optional) if String, path to ssl client cert file (.pem).
            If Tuple, ('cert', 'key') pair.
        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: ['Create the Request.', 'Send the request.']
    Runtime: python

  ../src/requests/sessions.py::resolve_redirects:
    name: resolve_redirects
    Module Path: ../src/requests/sessions.py
    Signature: resolve_redirects(self, resp, req, stream, timeout, verify, cert, proxies, yield_requests)
    Packages: ['time', 'os', 'cookies', 'auth']
    Imports: ['import time', 'from datetime import datetime.timedelta', 'import os', 'from cookies import cookies.RequestsCookieJar', 'from cookies import cookies.cookiejar_from_dict', 'from cookies import cookies.extract_cookies_to_jar', 'from cookies import cookies.merge_cookies', 'from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.get_netrc_auth']
    function_exe_cmd: requests.sessions.SessionRedirectMixin.resolve_redirects()
    Arguments: ['self', 'resp', 'req', 'stream', 'timeout', 'verify', 'cert', 'proxies', 'yield_requests']
    Returns: None
    Start Line: 159
    End Line: 280
    Complexity: 18
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Receives a Response. Returns a generator of Responses or Requests.
    Description: 
    Description Embedding: 
    Comments: ['keep track of history', 'Update history and keep track of redirects.', 'resp.history must ignore the original request in this loop', 'Consume socket so it can be released', 'Release the connection back into the pool.', 'Handle redirection without scheme (see: RFC 1808 Section 4)', 'Normalize url case and attach previous fragment if needed (RFC 7231 7.1.2)', "Facilitate relative 'location' headers, as allowed by RFC 7231.", "(e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')", 'Compliant with RFC3986, we percent encode the url.', 'https://github.com/psf/requests/issues/1084', 'https://github.com/psf/requests/issues/3490', 'Extract any cookies sent on the response to the cookiejar', "in the new request. Because we've mutated our copied prepared", "request, use the old one that we haven't yet touched.", 'Rebuild auth and proxy information.', 'A failed tell() sets `_body_position` to `object()`. This non-None', 'value ensures `rewindable` will be True, allowing us to raise an', 'UnrewindableBodyError, instead of hanging the connection.', 'Attempt to rewind consumed file-like object.', 'Override the original request.', 'extract redirect url, if any, for the next loop']
    Runtime: python

  ../src/requests/sessions.py::send:
    name: send
    Module Path: ../src/requests/sessions.py
    Signature: send(self, request)
    Packages: ['hooks', 'os', 'time', 'cookies']
    Imports: ['from hooks import hooks.default_hooks', 'from hooks import hooks.dispatch_hook', 'import os', 'import time', 'from datetime import datetime.timedelta', 'from cookies import cookies.RequestsCookieJar', 'from cookies import cookies.cookiejar_from_dict', 'from cookies import cookies.extract_cookies_to_jar', 'from cookies import cookies.merge_cookies']
    function_exe_cmd: requests.sessions.Session.send()
    Arguments: ['self', 'request']
    Returns: None
    Start Line: 673
    End Line: 748
    Complexity: 10
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Send a given PreparedRequest.

        :rtype: requests.Response
    Description: 
    Description Embedding: 
    Comments: ['Set defaults that the hooks can utilize to ensure they always have', 'the correct parameters to reproduce the previous request.', "It's possible that users might accidentally send a Request object.", 'Guard against that specific failure case.', 'Set up variables needed for resolve_redirects and dispatching of hooks', 'Get the appropriate adapter to use', 'Start time (approximately) of the request', 'Send the request', 'Total elapsed time of the request (approximately)', 'Response manipulation hooks', 'Persist cookies', 'If the hooks create history then we want those cookies too', 'Resolve redirects if allowed.', 'Redirect resolving generator.', "Shuffle things around if there's history.", 'Insert the first (original) request at the start', 'Get the last request made', "If redirects aren't being followed, store the response on the Request for Response.next()."]
    Runtime: python

  ../src/requests/sessions.py::session:
    name: session
    Module Path: ../src/requests/sessions.py
    Signature: session()
    Packages: ['compat']
    Imports: ['from compat import compat.Mapping', 'from compat import compat.cookielib', 'from compat import compat.urljoin', 'from compat import compat.urlparse']
    function_exe_cmd: requests.sessions.session()
    Arguments: None
    Returns: None
    Start Line: 819
    End Line: 831
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns a :class:`Session` for context-management.

    .. deprecated:: 1.0.0

        This method has been deprecated since version 1.0.0 and is only kept for
        backwards compatibility. New code should use :class:`~requests.sessions.Session`
        to create a session. This may be removed at a future date.

    :rtype: Session
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/sessions.py::should_strip_auth:
    name: should_strip_auth
    Module Path: ../src/requests/sessions.py
    Signature: should_strip_auth(self, old_url, new_url)
    Packages: ['auth', 'os', 'compat']
    Imports: ['from auth import auth._basic_auth_str', 'from utils import utils.get_auth_from_url', 'from utils import utils.get_netrc_auth', 'import os', 'from compat import compat.Mapping', 'from compat import compat.cookielib', 'from compat import compat.urljoin', 'from compat import compat.urlparse']
    function_exe_cmd: requests.sessions.SessionRedirectMixin.should_strip_auth()
    Arguments: ['self', 'old_url', 'new_url']
    Returns: None
    Start Line: 127
    End Line: 157
    Complexity: 13
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Decide whether Authorization header should be removed when redirecting
    Description: 
    Description Embedding: 
    Comments: ['Special case: allow http -> https redirect when using the standard', "ports. This isn't specified by RFC 7235, but is kept to avoid", 'breaking backwards compatibility with older versions of requests', 'that allowed any redirects on the same host.', 'Handle default port usage corresponding to scheme.', 'Standard case: root URI must match']
    Runtime: python

  ../src/requests/structures.py::__delitem__:
    name: __delitem__
    Module Path: ../src/requests/structures.py
    Signature: __delitem__(self, key)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.CaseInsensitiveDict.__delitem__()
    Arguments: ['self', 'key']
    Returns: None
    Start Line: 54
    End Line: 55
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/structures.py::__eq__:
    name: __eq__
    Module Path: ../src/requests/structures.py
    Signature: __eq__(self, other)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.CaseInsensitiveDict.__eq__()
    Arguments: ['self', 'other']
    Returns: None
    Start Line: 67
    End Line: 73
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Compare insensitively']
    Runtime: python

  ../src/requests/structures.py::__getitem__:
    name: __getitem__
    Module Path: ../src/requests/structures.py
    Signature: __getitem__(self, key)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.LookupDict.__getitem__()
    Arguments: ['self', 'key']
    Returns: None
    Start Line: 93
    End Line: 96
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['We allow fall-through here, so values default to None']
    Runtime: python

  ../src/requests/structures.py::__init__:
    name: __init__
    Module Path: ../src/requests/structures.py
    Signature: __init__(self, name)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.LookupDict.__init__()
    Arguments: ['self', 'name']
    Returns: None
    Start Line: 86
    End Line: 88
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/structures.py::__iter__:
    name: __iter__
    Module Path: ../src/requests/structures.py
    Signature: __iter__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.CaseInsensitiveDict.__iter__()
    Arguments: ['self']
    Returns: None
    Start Line: 57
    End Line: 58
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/structures.py::__len__:
    name: __len__
    Module Path: ../src/requests/structures.py
    Signature: __len__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.CaseInsensitiveDict.__len__()
    Arguments: ['self']
    Returns: None
    Start Line: 60
    End Line: 61
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/structures.py::__repr__:
    name: __repr__
    Module Path: ../src/requests/structures.py
    Signature: __repr__(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.LookupDict.__repr__()
    Arguments: ['self']
    Returns: None
    Start Line: 90
    End Line: 91
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/structures.py::__setitem__:
    name: __setitem__
    Module Path: ../src/requests/structures.py
    Signature: __setitem__(self, key, value)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.CaseInsensitiveDict.__setitem__()
    Arguments: ['self', 'key', 'value']
    Returns: None
    Start Line: 46
    End Line: 49
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Use the lowercased key for lookups, but store the actual', 'key alongside the value.']
    Runtime: python

  ../src/requests/structures.py::copy:
    name: copy
    Module Path: ../src/requests/structures.py
    Signature: copy(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.CaseInsensitiveDict.copy()
    Arguments: ['self']
    Returns: None
    Start Line: 76
    End Line: 77
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/structures.py::get:
    name: get
    Module Path: ../src/requests/structures.py
    Signature: get(self, key, default)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.LookupDict.get()
    Arguments: ['self', 'key', 'default']
    Returns: None
    Start Line: 98
    End Line: 99
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/structures.py::lower_items:
    name: lower_items
    Module Path: ../src/requests/structures.py
    Signature: lower_items(self)
    Packages: []
    Imports: []
    function_exe_cmd: requests.structures.CaseInsensitiveDict.lower_items()
    Arguments: ['self']
    Returns: None
    Start Line: 63
    End Line: 65
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Like iteritems(), but with all lowercase keys.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::_parse_content_type_header:
    name: _parse_content_type_header
    Module Path: ../src/requests/utils.py
    Signature: _parse_content_type_header(header)
    Packages: ['io', 're']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils._parse_content_type_header()
    Arguments: ['header']
    Returns: None
    Start Line: 517
    End Line: 539
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns content type and parameters from given header

    :param header: string
    :return: tuple containing content type and dictionary of
         parameters
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::_validate_header_part:
    name: _validate_header_part
    Module Path: ../src/requests/utils.py
    Signature: _validate_header_part(header, header_part, header_validator_index)
    Packages: ['re']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils._validate_header_part()
    Arguments: ['header', 'header_part', 'header_validator_index']
    Returns: None
    Start Line: 1048
    End Line: 1064
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::add_dict_to_cookiejar:
    name: add_dict_to_cookiejar
    Module Path: ../src/requests/utils.py
    Signature: add_dict_to_cookiejar(cj, cookie_dict)
    Packages: ['io', 'cookies', 're']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'from cookies import cookies.cookiejar_from_dict', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.add_dict_to_cookiejar()
    Arguments: ['cj', 'cookie_dict']
    Returns: None
    Start Line: 481
    End Line: 489
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns a CookieJar from a key/value dictionary.

    :param cj: CookieJar to insert cookies into.
    :param cookie_dict: Dict of key/values to insert into CookieJar.
    :rtype: CookieJar
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::address_in_network:
    name: address_in_network
    Module Path: ../src/requests/utils.py
    Signature: address_in_network(ip, net)
    Packages: ['re', 'io', 'socket', 'struct']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'import socket', 'import struct']
    function_exe_cmd: requests.utils.address_in_network()
    Arguments: ['ip', 'net']
    Returns: None
    Start Line: 685
    End Line: 697
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: This function allows you to check if an IP belongs to a network subnet

    Example: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24
             returns False if ip = 192.168.1.1 and net = 192.168.100.0/24

    :rtype: bool
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::atomic_open:
    name: atomic_open
    Module Path: ../src/requests/utils.py
    Signature: atomic_open(filename)
    Packages: ['contextlib', 'io', 'os', 'tempfile', 're']
    Imports: ['import contextlib', 'import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import os', 'import tempfile', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.atomic_open()
    Arguments: ['filename']
    Returns: None
    Start Line: 308
    End Line: 318
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: contextlib.contextmanager
    Docstring: Write a file to the disk in an atomic fashion
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::check_header_validity:
    name: check_header_validity
    Module Path: ../src/requests/utils.py
    Signature: check_header_validity(header)
    Packages: ['re']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.check_header_validity()
    Arguments: ['header']
    Returns: None
    Start Line: 1037
    End Line: 1045
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Verifies that header parts don't contain leading whitespace
    reserved characters, or return characters.

    :param header: tuple, in the format (name, value).
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::default_headers:
    name: default_headers
    Module Path: ../src/requests/utils.py
    Signature: default_headers()
    Packages: ['re', 'struct', 'structures', 'io']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import struct', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL']
    function_exe_cmd: requests.utils.default_headers()
    Arguments: None
    Returns: None
    Start Line: 903
    End Line: 914
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: :rtype: requests.structures.CaseInsensitiveDict
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::default_user_agent:
    name: default_user_agent
    Module Path: ../src/requests/utils.py
    Signature: default_user_agent(name)
    Packages: ['re', 'io', '__version__']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL']
    function_exe_cmd: requests.utils.default_user_agent()
    Arguments: ['name']
    Returns: None
    Start Line: 894
    End Line: 900
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Return a string representing the default user agent.

    :rtype: str
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::dict_from_cookiejar:
    name: dict_from_cookiejar
    Module Path: ../src/requests/utils.py
    Signature: dict_from_cookiejar(cj)
    Packages: ['io', 'cookies', 're']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'from cookies import cookies.cookiejar_from_dict', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.dict_from_cookiejar()
    Arguments: ['cj']
    Returns: None
    Start Line: 470
    End Line: 478
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns a key/value dictionary from a CookieJar.

    :param cj: CookieJar object to extract cookies from.
    :rtype: dict
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::dict_to_sequence:
    name: dict_to_sequence
    Module Path: ../src/requests/utils.py
    Signature: dict_to_sequence(d)
    Packages: ['io', 're']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.dict_to_sequence()
    Arguments: ['d']
    Returns: None
    Start Line: 127
    End Line: 133
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns an internal sequence dictionary update.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::dotted_netmask:
    name: dotted_netmask
    Module Path: ../src/requests/utils.py
    Signature: dotted_netmask(mask)
    Packages: ['io', 're', 'socket', 'struct']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import socket', 'import struct']
    function_exe_cmd: requests.utils.dotted_netmask()
    Arguments: ['mask']
    Returns: None
    Start Line: 700
    End Line: 708
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Converts mask from /xx format to xxx.xxx.xxx.xxx

    Example: if mask is 24 function returns 255.255.255.0

    :rtype: str
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::extract_zipped_paths:
    name: extract_zipped_paths
    Module Path: ../src/requests/utils.py
    Signature: extract_zipped_paths(path)
    Packages: ['re', 'io', 'os', 'zipfile', 'tempfile']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'import os', 'import zipfile', 'import tempfile']
    function_exe_cmd: requests.utils.extract_zipped_paths()
    Arguments: ['path']
    Returns: None
    Start Line: 271
    End Line: 305
    Complexity: 10
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Replace nonexistent paths that look like they refer to a member of a zip
    archive with the location of an extracted copy of the target, or else
    just return the provided path unchanged.
    Description: 
    Description Embedding: 
    Comments: ['this is already a valid path, no need to do anything further', 'find the first valid part of the provided path and treat that as a zip archive', 'assume the rest of the path is the name of a member in the archive', "If we don't check for an empty prefix after the split (in other words, archive remains unchanged after the split),", 'we _can_ end up in an infinite loop on a rare corner case affecting a small number of users', 'we have a valid zip archive and a valid member of that archive', 'use read + write to avoid the creating nested folders, we only want the file, avoids mkdir racing condition']
    Runtime: python

  ../src/requests/utils.py::from_key_val_list:
    name: from_key_val_list
    Module Path: ../src/requests/utils.py
    Signature: from_key_val_list(value)
    Packages: ['re', 'io', 'os']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'import os']
    function_exe_cmd: requests.utils.from_key_val_list()
    Arguments: ['value']
    Returns: None
    Start Line: 321
    End Line: 345
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Take an object and test to see if it can be represented as a
    dictionary. Unless it can not be represented as such, return an
    OrderedDict, e.g.,

    ::

        >>> from_key_val_list([('key', 'val')])
        OrderedDict([('key', 'val')])
        >>> from_key_val_list('string')
        Traceback (most recent call last):
        ...
        ValueError: cannot encode objects that are not 2-tuples
        >>> from_key_val_list({'key': 'val'})
        OrderedDict([('key', 'val')])

    :rtype: OrderedDict
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::get_auth_from_url:
    name: get_auth_from_url
    Module Path: ../src/requests/utils.py
    Signature: get_auth_from_url(url)
    Packages: ['io', 're']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.get_auth_from_url()
    Arguments: ['url']
    Returns: None
    Start Line: 1021
    End Line: 1034
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Given a url with authentication components, extract them into a tuple of
    username,password.

    :rtype: (str,str)
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::get_encoding_from_headers:
    name: get_encoding_from_headers
    Module Path: ../src/requests/utils.py
    Signature: get_encoding_from_headers(headers)
    Packages: ['io', 're']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.get_encoding_from_headers()
    Arguments: ['headers']
    Returns: None
    Start Line: 542
    End Line: 564
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns encodings from given HTTP Header Dict.

    :param headers: dictionary to extract encoding from.
    :rtype: str
    Description: 
    Description Embedding: 
    Comments: ['Assume UTF-8 based on RFC 4627: https://www.ietf.org/rfc/rfc4627.txt since the charset was unset']
    Runtime: python

  ../src/requests/utils.py::get_encodings_from_content:
    name: get_encodings_from_content
    Module Path: ../src/requests/utils.py
    Signature: get_encodings_from_content(content)
    Packages: ['warnings', 're', 'io']
    Imports: ['import warnings', 'import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL']
    function_exe_cmd: requests.utils.get_encodings_from_content()
    Arguments: ['content']
    Returns: None
    Start Line: 492
    End Line: 514
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns encodings from given content string.

    :param content: bytestring to extract encodings from.
    Description: 
    Description Embedding: 
    Comments: ['2266. (This"']
    Runtime: python

  ../src/requests/utils.py::get_environ_proxies:
    name: get_environ_proxies
    Module Path: ../src/requests/utils.py
    Signature: get_environ_proxies(url, no_proxy)
    Packages: ['re']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.get_environ_proxies()
    Arguments: ['url', 'no_proxy']
    Returns: None
    Start Line: 829
    End Line: 838
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Return a dict of environment proxies.

    :rtype: dict
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::get_netrc_auth:
    name: get_netrc_auth
    Module Path: ../src/requests/utils.py
    Signature: get_netrc_auth(url, raise_errors)
    Packages: ['netrc', 'os', 'io', 're']
    Imports: ['from netrc import netrc.NetrcParseError', 'from netrc import netrc.netrc', 'import os', 'import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.get_netrc_auth()
    Arguments: ['url', 'raise_errors']
    Returns: None
    Start Line: 207
    End Line: 261
    Complexity: 11
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns the Requests tuple auth for a given url from netrc.
    Description: 
    Description Embedding: 
    Comments: ['os.path.expanduser can fail when $HOME is undefined and', 'getpwuid fails. See https://bugs.python.org/issue20164 &', 'https://github.com/psf/requests/issues/1846', "Abort early if there isn't one.", 'Strip port numbers from netloc. This weird `if...encode`` dance is', "used for Python 3.2, which doesn't support unicode literals.", 'Return with login / password', 'If there was a parsing error or a permissions issue reading the file,', "we'll just skip netrc auth unless explicitly asked to raise errors.", 'App Engine hackiness.']
    Runtime: python

  ../src/requests/utils.py::get_unicode_from_response:
    name: get_unicode_from_response
    Module Path: ../src/requests/utils.py
    Signature: get_unicode_from_response(r)
    Packages: ['re', 'warnings', 'io']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import warnings', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL']
    function_exe_cmd: requests.utils.get_unicode_from_response()
    Arguments: ['r']
    Returns: None
    Start Line: 594
    End Line: 630
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns the requested content back in unicode.

    :param r: Response object to get unicode content from.

    Tried:

    1. charset from content-type
    2. fall back and replace all unicode characters

    :rtype: str
    Description: 
    Description Embedding: 
    Comments: ['2266. (This"', 'Try charset from content-type', 'Fall back:']
    Runtime: python

  ../src/requests/utils.py::guess_filename:
    name: guess_filename
    Module Path: ../src/requests/utils.py
    Signature: guess_filename(obj)
    Packages: ['os', 're']
    Imports: ['import os', 'import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.guess_filename()
    Arguments: ['obj']
    Returns: None
    Start Line: 264
    End Line: 268
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Tries to guess the filename of the given object.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::guess_json_utf:
    name: guess_json_utf
    Module Path: ../src/requests/utils.py
    Signature: guess_json_utf(data)
    Packages: ['io', 're', 'codecs']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import codecs']
    function_exe_cmd: requests.utils.guess_json_utf()
    Arguments: ['data']
    Returns: None
    Start Line: 960
    End Line: 989
    Complexity: 11
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: :rtype: str
    Description: 
    Description Embedding: 
    Comments: ['JSON always starts with two ASCII characters, so detection is as', 'easy as counting the nulls and from their location and count', 'determine the encoding. Also detect a BOM, if present.', 'BOM included', 'BOM included, MS style (discouraged)', 'BOM included', '1st and 3rd are null', '2nd and 4th are null', 'Did not detect 2 valid UTF-16 ascii-range characters', 'Did not detect a valid UTF-32 ascii-range character']
    Runtime: python

  ../src/requests/utils.py::is_ipv4_address:
    name: is_ipv4_address
    Module Path: ../src/requests/utils.py
    Signature: is_ipv4_address(string_ip)
    Packages: ['re', 'socket']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import socket']
    function_exe_cmd: requests.utils.is_ipv4_address()
    Arguments: ['string_ip']
    Returns: None
    Start Line: 711
    End Line: 719
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: :rtype: bool
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::is_valid_cidr:
    name: is_valid_cidr
    Module Path: ../src/requests/utils.py
    Signature: is_valid_cidr(string_network)
    Packages: ['re', 'socket']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import socket']
    function_exe_cmd: requests.utils.is_valid_cidr()
    Arguments: ['string_network']
    Returns: None
    Start Line: 722
    End Line: 743
    Complexity: 7
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Very simple check of the cidr format in no_proxy variable.

    :rtype: bool
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::iter_slices:
    name: iter_slices
    Module Path: ../src/requests/utils.py
    Signature: iter_slices(string, slice_length)
    Packages: ['os']
    Imports: ['import os']
    function_exe_cmd: requests.utils.iter_slices()
    Arguments: ['string', 'slice_length']
    Returns: None
    Start Line: 584
    End Line: 591
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Iterate over slices of a string.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::parse_dict_header:
    name: parse_dict_header
    Module Path: ../src/requests/utils.py
    Signature: parse_dict_header(value)
    Packages: ['io', 're']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.parse_dict_header()
    Arguments: ['value']
    Returns: None
    Start Line: 410
    End Line: 441
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Parse lists of key, value pairs as described by RFC 2068 Section 2 and
    convert them into a python dict:

    >>> d = parse_dict_header('foo="is a fish", bar="as well"')
    >>> type(d) is dict
    True
    >>> sorted(d.items())
    [('bar', 'as well'), ('foo', 'is a fish')]

    If there is no value for a key it will be `None`:

    >>> parse_dict_header('key_without_value')
    {'key_without_value': None}

    To create a header from the :class:`dict` again, use the
    :func:`dump_header` function.

    :param value: a string with a dict header.
    :return: :class:`dict`
    :rtype: dict
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::parse_header_links:
    name: parse_header_links
    Module Path: ../src/requests/utils.py
    Signature: parse_header_links(value)
    Packages: ['re']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.parse_header_links()
    Arguments: ['value']
    Returns: None
    Start Line: 917
    End Line: 951
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Return a list of parsed link headers proxies.

    i.e. Link: <http:/.../front.jpeg>; rel=front; type="image/jpeg",<http://.../back.jpeg>; rel=back;type="image/jpeg"

    :rtype: list
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::parse_list_header:
    name: parse_list_header
    Module Path: ../src/requests/utils.py
    Signature: parse_list_header(value)
    Packages: ['io', 're']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.parse_list_header()
    Arguments: ['value']
    Returns: None
    Start Line: 378
    End Line: 406
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Parse lists as described by RFC 2068 Section 2.

    In particular, parse comma-separated lists where the elements of
    the list may include quoted-strings.  A quoted-string could
    contain a comma.  A non-quoted string could have quotes in the
    middle.  Quotes are removed automatically after parsing.

    It basically works like :func:`parse_set_header` just that items
    may appear multiple times and case sensitivity is preserved.

    The return value is a standard :class:`list`:

    >>> parse_list_header('token, "quoted value"')
    ['token', 'quoted value']

    To create a header from the :class:`list` again, use the
    :func:`dump_header` function.

    :param value: a string with a list header.
    :return: :class:`list`
    :rtype: list
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::prepend_scheme_if_needed:
    name: prepend_scheme_if_needed
    Module Path: ../src/requests/utils.py
    Signature: prepend_scheme_if_needed(url, new_scheme)
    Packages: ['re', 'os', 'io', 'compat']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import os', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from compat import compat.Mapping', 'from compat import compat.basestring', 'from compat import compat.bytes', 'from compat import compat.getproxies', 'from compat import compat.getproxies_environment', 'from compat import compat.integer_types', 'from compat import compat.is_urllib3_1', 'from compat import compat.parse_http_list as _parse_list_header', 'from compat import compat.proxy_bypass', 'from compat import compat.proxy_bypass_environment', 'from compat import compat.quote', 'from compat import compat.str', 'from compat import compat.unquote', 'from compat import compat.urlparse', 'from compat import compat.urlunparse']
    function_exe_cmd: requests.utils.prepend_scheme_if_needed()
    Arguments: ['url', 'new_scheme']
    Returns: None
    Start Line: 992
    End Line: 1018
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Given a URL that may or may not have a scheme, prepend the given scheme.
    Does not replace a present scheme with the one provided as an argument.

    :rtype: str
    Description: 
    Description Embedding: 
    Comments: ["A defect in urlparse determines that there isn't a netloc present in some", 'urls. We previously assumed parsing was overly cautious, and swapped the', 'netloc and path. Due to a lack of tests on the original defect, this is', 'maintained with parse_url for backwards compatibility.', "parse_url doesn't provide the netloc with auth", "so we'll add it ourselves."]
    Runtime: python

  ../src/requests/utils.py::requote_uri:
    name: requote_uri
    Module Path: ../src/requests/utils.py
    Signature: requote_uri(uri)
    Packages: ['re', 'io']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL']
    function_exe_cmd: requests.utils.requote_uri()
    Arguments: ['uri']
    Returns: None
    Start Line: 663
    End Line: 682
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Re-quote the given URI.

    This function passes the given URI through an unquote/quote cycle to
    ensure that it is fully and consistently quoted.

    :rtype: str
    Description: 
    Description Embedding: 
    Comments: ['$%&\'()*+,/:;=?@[]~"', '$&\'()*+,/:;=?@[]~"', 'Unquote only the unreserved characters', 'Then quote only illegal characters (do not quote reserved,', "unreserved, or '%')", "We couldn't unquote the given URI, so let's try quoting it, but", "there may be unquoted '%'s in the URI. We need to make sure they're", 'properly quoted so they do not cause issues elsewhere.']
    Runtime: python

  ../src/requests/utils.py::resolve_proxies:
    name: resolve_proxies
    Module Path: ../src/requests/utils.py
    Signature: resolve_proxies(request, proxies, trust_env)
    Packages: ['re', 'io', 'os']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'import os']
    function_exe_cmd: requests.utils.resolve_proxies()
    Arguments: ['request', 'proxies', 'trust_env']
    Returns: None
    Start Line: 867
    End Line: 891
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: This method takes proxy information from a request and configuration
    input to resolve a mapping of target proxies. This will consider settings
    such as NO_PROXY to strip proxy configurations.

    :param request: Request or PreparedRequest
    :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs
    :param trust_env: Boolean declaring whether to trust environment configs

    :rtype: dict
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::rewind_body:
    name: rewind_body
    Module Path: ../src/requests/utils.py
    Signature: rewind_body(prepared_request)
    Packages: ['re', 'io', 'os']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'import os']
    function_exe_cmd: requests.utils.rewind_body()
    Arguments: ['prepared_request']
    Returns: None
    Start Line: 1084
    End Line: 1099
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Move file pointer back to its recorded starting position
    so it can be read again on redirect.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::select_proxy:
    name: select_proxy
    Module Path: ../src/requests/utils.py
    Signature: select_proxy(url, proxies)
    Packages: ['re', 'io', 'os']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'import os']
    function_exe_cmd: requests.utils.select_proxy()
    Arguments: ['url', 'proxies']
    Returns: None
    Start Line: 841
    End Line: 864
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Select a proxy for the url, if applicable.

    :param url: The url being for the request
    :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::set_environ:
    name: set_environ
    Module Path: ../src/requests/utils.py
    Signature: set_environ(env_name, value)
    Packages: ['contextlib', 'io', 're', 'os']
    Imports: ['import contextlib', 'import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import os']
    function_exe_cmd: requests.utils.set_environ()
    Arguments: ['env_name', 'value']
    Returns: None
    Start Line: 746
    End Line: 765
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: contextlib.contextmanager
    Docstring: Set the environment variable 'env_name' to 'value'

    Save previous value, yield, and then restore the previous value stored in
    the environment variable 'env_name'.

    If 'value' is None, do nothing
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::should_bypass_proxies:
    name: should_bypass_proxies
    Module Path: ../src/requests/utils.py
    Signature: should_bypass_proxies(url, no_proxy)
    Packages: ['io', 'os', 're', 'socket']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import os', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import socket']
    function_exe_cmd: requests.utils.should_bypass_proxies()
    Arguments: ['url', 'no_proxy']
    Returns: None
    Start Line: 768
    End Line: 826
    Complexity: 19
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Returns whether we should bypass proxies or not.

    :rtype: bool
    Description: 
    Description Embedding: 
    Comments: ['Prioritize lowercase environment variables over uppercase', 'to keep a consistent behaviour with other http projects (curl, wget).', 'First check whether no_proxy is defined. If it is, check that the URL', "we're getting isn't in the no_proxy list.", "URLs don't always have hostnames, e.g. file:/// urls.", 'We need to check whether we match here. We need to see if we match', 'the end of the hostname, both with and without the port.', 'If no_proxy ip was defined in plain IP notation instead of cidr notation &', 'matches the IP of the index', "The URL does match something in no_proxy, so we don't want", 'to apply the proxies on this URL.', 'parsed.hostname can be `None` in cases such as a file URI.']
    Runtime: python

  ../src/requests/utils.py::stream_decode_response_unicode:
    name: stream_decode_response_unicode
    Module Path: ../src/requests/utils.py
    Signature: stream_decode_response_unicode(iterator, r)
    Packages: ['re', 'codecs']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import codecs']
    function_exe_cmd: requests.utils.stream_decode_response_unicode()
    Arguments: ['iterator', 'r']
    Returns: None
    Start Line: 567
    End Line: 581
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Stream decodes an iterator.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::super_len:
    name: super_len
    Module Path: ../src/requests/utils.py
    Signature: super_len(o)
    Packages: ['io', 'os', 're', 'urllib3', 'warnings']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import os', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'from urllib3.util import urllib3.util.make_headers', 'from urllib3.util import urllib3.util.parse_url', 'from compat import compat.is_urllib3_1', 'import warnings']
    function_exe_cmd: requests.utils.super_len()
    Arguments: ['o']
    Returns: None
    Start Line: 136
    End Line: 204
    Complexity: 19
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['urllib3 2.x+ treats all strings as utf-8 instead', 'of latin-1 (iso-8859-1) like http.client.', "AttributeError is a surprising exception, seeing as how we've just checked", "that `hasattr(o, 'fileno')`.  It happens for objects obtained via", '`Tarfile.extractfile()`, per issue 5229.', 'Having used fstat to determine the file length, we need to', 'confirm that this file was opened up in binary mode.', 'This can happen in some weird situations, such as when the file', 'is actually a special file descriptor like stdin. In this', "instance, we don't know what the length is, so set it to zero and", 'let requests chunk it instead.', 'StringIO and BytesIO have seek but no usable fileno', 'seek to end of file', 'seek back to current position to support', 'partially read file-like objects']
    Runtime: python

  ../src/requests/utils.py::to_key_val_list:
    name: to_key_val_list
    Module Path: ../src/requests/utils.py
    Signature: to_key_val_list(value)
    Packages: ['re', 'io', 'os']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg', 'import io', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'import os']
    function_exe_cmd: requests.utils.to_key_val_list()
    Arguments: ['value']
    Returns: None
    Start Line: 348
    End Line: 374
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Take an object and test to see if it can be represented as a
    dictionary. If it can be, return a list of tuples, e.g.,

    ::

        >>> to_key_val_list([('key', 'val')])
        [('key', 'val')]
        >>> to_key_val_list({'key': 'val'})
        [('key', 'val')]
        >>> to_key_val_list('string')
        Traceback (most recent call last):
        ...
        ValueError: cannot encode objects that are not 2-tuples

    :rtype: list
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::unquote_header_value:
    name: unquote_header_value
    Module Path: ../src/requests/utils.py
    Signature: unquote_header_value(value, is_filename)
    Packages: ['re']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.unquote_header_value()
    Arguments: ['value', 'is_filename']
    Returns: None
    Start Line: 445
    End Line: 467
    Complexity: 7
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Unquotes a header value.  (Reversal of :func:`quote_header_value`).
    This does not use the real unquoting but what browsers are actually
    using for quoting.

    :param value: the header value to unquote.
    :rtype: str
    Description: 
    Description Embedding: 
    Comments: ['this is not the real unquoting, but fixing this so that the', 'RFC is met will result in bugs with internet explorer and', 'probably some other browsers as well.  IE for example is', 'uploading files with "C:\\foo\\bar.txt" as filename', 'if this is a filename and the starting characters look like', 'a UNC path, then just return the value without quotes.  Using the', 'replace sequence below on a UNC path has the effect of turning', 'the leading double slash into a single slash and then', "_fix_ie_filename() doesn't work correctly.  See #458."]
    Runtime: python

  ../src/requests/utils.py::unquote_unreserved:
    name: unquote_unreserved
    Module Path: ../src/requests/utils.py
    Signature: unquote_unreserved(uri)
    Packages: ['re']
    Imports: ['import re', 'from collections import collections.OrderedDict', 'from current_package import certs', 'from exceptions import exceptions.UnrewindableBodyError', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.unquote_unreserved()
    Arguments: ['uri']
    Returns: None
    Start Line: 639
    End Line: 660
    Complexity: 7
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Un-escape any percent-escape sequences in a URI that are unreserved
    characters. This leaves all reserved, illegal and non-ASCII bytes encoded.

    :rtype: str
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  ../src/requests/utils.py::urldefragauth:
    name: urldefragauth
    Module Path: ../src/requests/utils.py
    Signature: urldefragauth(url)
    Packages: ['io', 're']
    Imports: ['import io', 'from collections import collections.OrderedDict', 'from __version__ import __version__.__version__', 'from exceptions import exceptions.FileModeWarning', 'from exceptions import exceptions.InvalidHeader', 'from exceptions import exceptions.InvalidURL', 'from exceptions import exceptions.UnrewindableBodyError', 'import re', 'from current_package import certs', 'from structures import structures.CaseInsensitiveDict', 'import winreg']
    function_exe_cmd: requests.utils.urldefragauth()
    Arguments: ['url']
    Returns: None
    Start Line: 1067
    End Line: 1081
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Given a url remove the fragment and the authentication part.

    :rtype: str
    Description: 
    Description Embedding: 
    Comments: ['see func:`prepend_scheme_if_needed`']
    Runtime: python

  compat.py::u:
    name: u
    Module Path: compat.py
    Signature: u(s)
    Packages: ['warnings', 'io']
    Imports: ['import warnings', 'import io as StringIO']
    function_exe_cmd: requests.u()
    Arguments: ['s']
    Returns: None
    Start Line: 14
    End Line: 23
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  conftest.py::httpbin:
    name: httpbin
    Module Path: conftest.py
    Signature: httpbin(httpbin)
    Packages: ['pytest', 'http']
    Imports: ['import pytest', 'from http.server import http.server.HTTPServer', 'from http.server import http.server.SimpleHTTPRequestHandler']
    function_exe_cmd: requests.httpbin()
    Arguments: ['httpbin']
    Returns: None
    Start Line: 25
    End Line: 27
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.fixture
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  conftest.py::httpbin_secure:
    name: httpbin_secure
    Module Path: conftest.py
    Signature: httpbin_secure(httpbin_secure)
    Packages: ['pytest', 'http']
    Imports: ['import pytest', 'from http.server import http.server.HTTPServer', 'from http.server import http.server.SimpleHTTPRequestHandler']
    function_exe_cmd: requests.httpbin_secure()
    Arguments: ['httpbin_secure']
    Returns: None
    Start Line: 30
    End Line: 32
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.fixture
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  conftest.py::nosan_server:
    name: nosan_server
    Module Path: conftest.py
    Signature: nosan_server(tmp_path_factory)
    Packages: ['pytest', 'trustme', 'ssl', 'threading']
    Imports: ['import pytest', 'import trustme', 'import ssl', 'import threading']
    function_exe_cmd: requests.nosan_server()
    Arguments: ['tmp_path_factory']
    Returns: None
    Start Line: 35
    End Line: 58
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.fixture
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['delay importing until the fixture in order to make it possible', 'to deselect the test via command-line when trustme is not available', 'only commonName, no subjectAltName']
    Runtime: python

  conftest.py::prepare_url:
    name: prepare_url
    Module Path: conftest.py
    Signature: prepare_url(value)
    Packages: ['http']
    Imports: ['from http.server import http.server.HTTPServer', 'from http.server import http.server.SimpleHTTPRequestHandler']
    function_exe_cmd: requests.prepare_url()
    Arguments: ['value']
    Returns: None
    Start Line: 15
    End Line: 22
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Issue #1483: Make sure the URL always has a trailing slash']
    Runtime: python

  utils.py::override_environ:
    name: override_environ
    Module Path: utils.py
    Signature: override_environ()
    Packages: ['contextlib', 'os']
    Imports: ['import contextlib', 'import os']
    function_exe_cmd: requests.override_environ()
    Arguments: None
    Returns: None
    Start Line: 5
    End Line: 17
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: contextlib.contextmanager
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

APIs:

Tests:

  test_adapters.py::test_request_url_trims_leading_path_separators:
    name: test_request_url_trims_leading_path_separators
    Module Path: None
    Signature: test_request_url_trims_leading_path_separators()
    test_exe_cmd: .test_request_url_trims_leading_path_separators()
    Arguments: None
    Returns: None
    Start Line: 4
    End Line: 8
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: See also https://github.com/psf/requests/issues/6643.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_help.py::test_idna_with_version_attribute:
    name: test_idna_with_version_attribute
    Module Path: None
    Signature: test_idna_with_version_attribute()
    test_exe_cmd: .test_idna_with_version_attribute()
    Arguments: None
    Returns: None
    Start Line: 24
    End Line: 27
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Verify we're actually setting idna version when it should be available.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_help.py::test_idna_without_version_attribute:
    name: test_idna_without_version_attribute
    Module Path: None
    Signature: test_idna_without_version_attribute()
    test_exe_cmd: .test_idna_without_version_attribute()
    Arguments: None
    Returns: None
    Start Line: 16
    End Line: 21
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Older versions of IDNA don't provide a __version__ attribute, verify
    that if we have such a package, we don't blow up.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_help.py::test_system_ssl:
    name: test_system_ssl
    Module Path: None
    Signature: test_system_ssl()
    test_exe_cmd: .test_system_ssl()
    Arguments: None
    Returns: None
    Start Line: 6
    End Line: 8
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Verify we're actually setting system_ssl when it should be available.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_hooks.py::hook:
    name: hook
    Module Path: None
    Signature: hook(value)
    test_exe_cmd: .hook(value)
    Arguments: ['value']
    Returns: None
    Start Line: 6
    End Line: 7
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_hooks.py::test_default_hooks:
    name: test_default_hooks
    Module Path: None
    Signature: test_default_hooks()
    test_exe_cmd: .test_default_hooks()
    Arguments: None
    Returns: None
    Start Line: 21
    End Line: 22
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_hooks.py::test_hooks:
    name: test_hooks
    Module Path: None
    Signature: test_hooks(hooks_list, result)
    test_exe_cmd: .test_hooks(hooks_list, result)
    Arguments: ['hooks_list', 'result']
    Returns: None
    Start Line: 10
    End Line: 18
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('hooks_list, result', ((hook, 'ata'), ([hook, lambda x: None, hook], 'ta')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_lowlevel.py::echo_response_handler:
    name: echo_response_handler
    Module Path: None
    Signature: echo_response_handler(sock)
    test_exe_cmd: .echo_response_handler(sock)
    Arguments: ['sock']
    Returns: None
    Start Line: 12
    End Line: 21
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Simple handler that will take request and echo it back to requester.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_lowlevel.py::test_chunked_encoding_error:
    name: test_chunked_encoding_error
    Module Path: None
    Signature: test_chunked_encoding_error()
    test_exe_cmd: .test_chunked_encoding_error()
    Arguments: None
    Returns: None
    Start Line: 39
    End Line: 60
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: get a ChunkedEncodingError if the server returns a bad response
    Description: 
    Description Embedding: 
    Comments: ["The server never ends the request and doesn't provide any valid chunks", 'release server block']
    Runtime: python

  test_lowlevel.py::test_chunked_upload:
    name: test_chunked_upload
    Module Path: None
    Signature: test_chunked_upload()
    test_exe_cmd: .test_chunked_upload()
    Arguments: None
    Returns: None
    Start Line: 24
    End Line: 36
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: can safely send generators
    Description: 
    Description Embedding: 
    Comments: ['release server block']
    Runtime: python

  test_lowlevel.py::test_chunked_upload_doesnt_skip_host_header:
    name: test_chunked_upload_doesnt_skip_host_header
    Module Path: None
    Signature: test_chunked_upload_doesnt_skip_host_header()
    test_exe_cmd: .test_chunked_upload_doesnt_skip_host_header()
    Arguments: None
    Returns: None
    Start Line: 81
    End Line: 96
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure we don't omit all Host headers with chunked requests.
    Description: 
    Description Embedding: 
    Comments: ['release server block']
    Runtime: python

  test_lowlevel.py::test_chunked_upload_uses_only_specified_host_header:
    name: test_chunked_upload_uses_only_specified_host_header
    Module Path: None
    Signature: test_chunked_upload_uses_only_specified_host_header()
    test_exe_cmd: .test_chunked_upload_uses_only_specified_host_header()
    Arguments: None
    Returns: None
    Start Line: 63
    End Line: 78
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure we use only the specified Host header for chunked requests.
    Description: 
    Description Embedding: 
    Comments: ['release server block']
    Runtime: python

  test_lowlevel.py::test_conflicting_content_lengths:
    name: test_conflicting_content_lengths
    Module Path: None
    Signature: test_conflicting_content_lengths()
    test_exe_cmd: .test_conflicting_content_lengths()
    Arguments: None
    Returns: None
    Start Line: 99
    End Line: 124
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure we correctly throw an InvalidHeader error if multiple
    conflicting Content-Length headers are returned.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_lowlevel.py::test_digestauth_401_count_reset_on_redirect:
    name: test_digestauth_401_count_reset_on_redirect
    Module Path: None
    Signature: test_digestauth_401_count_reset_on_redirect()
    test_exe_cmd: .test_digestauth_401_count_reset_on_redirect()
    Arguments: None
    Returns: None
    Start Line: 127
    End Line: 189
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure we correctly reset num_401_calls after a successful digest auth,
    followed by a 302 redirect to another digest auth prompt.

    See https://github.com/psf/requests/issues/1979.
    Description: 
    Description Embedding: 
    Comments: ['Respond to initial GET with a challenge.', 'Verify we receive an Authorization header in response, then redirect.', "Verify Authorization isn't sent to the redirected host,", 'then send another challenge.', 'Verify Authorization is sent correctly again, and return 200 OK.', 'Verify server succeeded in authenticating.', 'Verify Authorization was sent in final request.', 'Verify redirect happened as we expected.']
    Runtime: python

  test_lowlevel.py::test_digestauth_401_only_sent_once:
    name: test_digestauth_401_only_sent_once
    Module Path: None
    Signature: test_digestauth_401_only_sent_once()
    test_exe_cmd: .test_digestauth_401_only_sent_once()
    Arguments: None
    Returns: None
    Start Line: 192
    End Line: 235
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure we correctly respond to a 401 challenge once, and then
    stop responding if challenged again.
    Description: 
    Description Embedding: 
    Comments: ['Respond to initial GET with a challenge.', 'Verify we receive an Authorization header in response, then', 'challenge again.', "Verify the client didn't respond to second challenge.", "Verify server didn't authenticate us."]
    Runtime: python

  test_lowlevel.py::test_digestauth_only_on_4xx:
    name: test_digestauth_only_on_4xx
    Module Path: None
    Signature: test_digestauth_only_on_4xx()
    test_exe_cmd: .test_digestauth_only_on_4xx()
    Arguments: None
    Returns: None
    Start Line: 238
    End Line: 272
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure we only send digestauth on 4xx challenges.

    See https://github.com/psf/requests/issues/3772.
    Description: 
    Description Embedding: 
    Comments: ['Respond to GET with a 200 containing www-authenticate header.', "Verify the client didn't respond with auth.", "Verify server didn't receive auth from us."]
    Runtime: python

  test_lowlevel.py::test_fragment_not_sent_with_request:
    name: test_fragment_not_sent_with_request
    Module Path: None
    Signature: test_fragment_not_sent_with_request()
    test_exe_cmd: .test_fragment_not_sent_with_request()
    Arguments: None
    Returns: None
    Start Line: 342
    End Line: 361
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Verify that the fragment portion of a URI isn't sent to the server.
    Description: 
    Description Embedding: 
    Comments: ["view=edit&token=hunter2'"]
    Runtime: python

  test_lowlevel.py::test_fragment_update_on_redirect:
    name: test_fragment_update_on_redirect
    Module Path: None
    Signature: test_fragment_update_on_redirect()
    test_exe_cmd: .test_fragment_update_on_redirect()
    Arguments: None
    Returns: None
    Start Line: 364
    End Line: 404
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Verify we only append previous fragment if one doesn't exist on new
    location. If a new fragment is encountered in a Location header, it should
    be added to all subsequent requests.
    Description: 
    Description Embedding: 
    Comments: ["relevant-section\\r\\n\\r\\n'", "view=edit&token=hunter2'", "Verify we haven't overwritten the location with our previous fragment.", "relevant-section'", 'Verify previous fragment is used and not the original.', "relevant-section'"]
    Runtime: python

  test_lowlevel.py::test_json_decode_compatibility_for_alt_utf_encodings:
    name: test_json_decode_compatibility_for_alt_utf_encodings
    Module Path: None
    Signature: test_json_decode_compatibility_for_alt_utf_encodings()
    test_exe_cmd: .test_json_decode_compatibility_for_alt_utf_encodings()
    Arguments: None
    Returns: None
    Start Line: 407
    End Line: 428
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_lowlevel.py::test_redirect_rfc1808_to_non_ascii_location:
    name: test_redirect_rfc1808_to_non_ascii_location
    Module Path: None
    Signature: test_redirect_rfc1808_to_non_ascii_location()
    test_exe_cmd: .test_redirect_rfc1808_to_non_ascii_location()
    Arguments: None
    Returns: None
    Start Line: 308
    End Line: 339
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['stores the second request to the server']
    Runtime: python

  test_lowlevel.py::test_use_proxy_from_environment:
    name: test_use_proxy_from_environment
    Module Path: None
    Signature: test_use_proxy_from_environment(httpbin, var, scheme)
    test_exe_cmd: .test_use_proxy_from_environment(httpbin, var, scheme)
    Arguments: ['httpbin', 'var', 'scheme']
    Returns: None
    Start Line: 289
    End Line: 305
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('var,scheme', _proxy_combos)
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['do nothing with the requests; just close the socket', "fake proxy's lack of response will cause a ConnectionError", 'the fake proxy received a request', 'it had actual content (not checking for SOCKS protocol for now)']
    Runtime: python

  test_packages.py::test_can_access_chardet_attribute:
    name: test_can_access_chardet_attribute
    Module Path: None
    Signature: test_can_access_chardet_attribute()
    test_exe_cmd: .test_can_access_chardet_attribute()
    Arguments: None
    Returns: None
    Start Line: 12
    End Line: 13
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_packages.py::test_can_access_idna_attribute:
    name: test_can_access_idna_attribute
    Module Path: None
    Signature: test_can_access_idna_attribute()
    test_exe_cmd: .test_can_access_idna_attribute()
    Arguments: None
    Returns: None
    Start Line: 8
    End Line: 9
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_packages.py::test_can_access_urllib3_attribute:
    name: test_can_access_urllib3_attribute
    Module Path: None
    Signature: test_can_access_urllib3_attribute()
    test_exe_cmd: .test_can_access_urllib3_attribute()
    Arguments: None
    Returns: None
    Start Line: 4
    End Line: 5
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::build_response:
    name: build_response
    Module Path: None
    Signature: build_response(self)
    test_exe_cmd: .RedirectSession.build_response(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2510
    End Line: 2522
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::send:
    name: send
    Module Path: None
    Signature: send(self)
    test_exe_cmd: .RedirectSession.send(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2506
    End Line: 2508
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_BASICAUTH_TUPLE_HTTP_200_OK_GET:
    name: test_BASICAUTH_TUPLE_HTTP_200_OK_GET
    Module Path: None
    Signature: test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin)
    test_exe_cmd: .TestRequests.test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 528
    End Line: 541
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_DIGESTAUTH_QUOTES_QOP_VALUE:
    name: test_DIGESTAUTH_QUOTES_QOP_VALUE
    Module Path: None
    Signature: test_DIGESTAUTH_QUOTES_QOP_VALUE(self, httpbin)
    test_exe_cmd: .TestRequests.test_DIGESTAUTH_QUOTES_QOP_VALUE(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 769
    End Line: 775
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_DIGESTAUTH_WRONG_HTTP_401_GET:
    name: test_DIGESTAUTH_WRONG_HTTP_401_GET
    Module Path: None
    Signature: test_DIGESTAUTH_WRONG_HTTP_401_GET(self, httpbin)
    test_exe_cmd: .TestRequests.test_DIGESTAUTH_WRONG_HTTP_401_GET(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 753
    End Line: 767
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_DIGEST_AUTH_RETURNS_COOKIE:
    name: test_DIGEST_AUTH_RETURNS_COOKIE
    Module Path: None
    Signature: test_DIGEST_AUTH_RETURNS_COOKIE(self, httpbin)
    test_exe_cmd: .TestRequests.test_DIGEST_AUTH_RETURNS_COOKIE(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 724
    End Line: 732
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_DIGEST_AUTH_SETS_SESSION_COOKIES:
    name: test_DIGEST_AUTH_SETS_SESSION_COOKIES
    Module Path: None
    Signature: test_DIGEST_AUTH_SETS_SESSION_COOKIES(self, httpbin)
    test_exe_cmd: .TestRequests.test_DIGEST_AUTH_SETS_SESSION_COOKIES(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 734
    End Line: 740
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_DIGEST_HTTP_200_OK_GET:
    name: test_DIGEST_HTTP_200_OK_GET
    Module Path: None
    Signature: test_DIGEST_HTTP_200_OK_GET(self, httpbin)
    test_exe_cmd: .TestRequests.test_DIGEST_HTTP_200_OK_GET(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 707
    End Line: 722
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_DIGEST_STREAM:
    name: test_DIGEST_STREAM
    Module Path: None
    Signature: test_DIGEST_STREAM(self, httpbin)
    test_exe_cmd: .TestRequests.test_DIGEST_STREAM(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 742
    End Line: 751
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_200_OK_GET_ALTERNATIVE:
    name: test_HTTP_200_OK_GET_ALTERNATIVE
    Module Path: None
    Signature: test_HTTP_200_OK_GET_ALTERNATIVE(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_200_OK_GET_ALTERNATIVE(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 202
    End Line: 209
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_200_OK_GET_WITH_MIXED_PARAMS:
    name: test_HTTP_200_OK_GET_WITH_MIXED_PARAMS
    Module Path: None
    Signature: test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 365
    End Line: 371
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_200_OK_GET_WITH_PARAMS:
    name: test_HTTP_200_OK_GET_WITH_PARAMS
    Module Path: None
    Signature: test_HTTP_200_OK_GET_WITH_PARAMS(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_200_OK_GET_WITH_PARAMS(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 357
    End Line: 363
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_200_OK_HEAD:
    name: test_HTTP_200_OK_HEAD
    Module Path: None
    Signature: test_HTTP_200_OK_HEAD(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_200_OK_HEAD(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 520
    End Line: 522
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_200_OK_PUT:
    name: test_HTTP_200_OK_PUT
    Module Path: None
    Signature: test_HTTP_200_OK_PUT(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_200_OK_PUT(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 524
    End Line: 526
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_302_ALLOW_REDIRECT_GET:
    name: test_HTTP_302_ALLOW_REDIRECT_GET
    Module Path: None
    Signature: test_HTTP_302_ALLOW_REDIRECT_GET(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_302_ALLOW_REDIRECT_GET(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 211
    End Line: 215
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_302_TOO_MANY_REDIRECTS:
    name: test_HTTP_302_TOO_MANY_REDIRECTS
    Module Path: None
    Signature: test_HTTP_302_TOO_MANY_REDIRECTS(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 240
    End Line: 249
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS:
    name: test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS
    Module Path: None
    Signature: test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 251
    End Line: 264
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_307_ALLOW_REDIRECT_POST:
    name: test_HTTP_307_ALLOW_REDIRECT_POST
    Module Path: None
    Signature: test_HTTP_307_ALLOW_REDIRECT_POST(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 217
    End Line: 226
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE:
    name: test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE
    Module Path: None
    Signature: test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE(self, httpbin)
    test_exe_cmd: .TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 228
    End Line: 238
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_POSTBIN_GET_POST_FILES:
    name: test_POSTBIN_GET_POST_FILES
    Module Path: None
    Signature: test_POSTBIN_GET_POST_FILES(self, httpbin)
    test_exe_cmd: .TestRequests.test_POSTBIN_GET_POST_FILES(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 777
    End Line: 792
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_POSTBIN_GET_POST_FILES_WITH_DATA:
    name: test_POSTBIN_GET_POST_FILES_WITH_DATA
    Module Path: None
    Signature: test_POSTBIN_GET_POST_FILES_WITH_DATA(self, httpbin)
    test_exe_cmd: .TestRequests.test_POSTBIN_GET_POST_FILES_WITH_DATA(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 841
    End Line: 856
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER:
    name: test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER
    Module Path: None
    Signature: test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER(self, httpbin)
    test_exe_cmd: .TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 800
    End Line: 839
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_auth_is_retained_for_redirect_on_host:
    name: test_auth_is_retained_for_redirect_on_host
    Module Path: None
    Signature: test_auth_is_retained_for_redirect_on_host(self, httpbin)
    test_exe_cmd: .TestRequests.test_auth_is_retained_for_redirect_on_host(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1837
    End Line: 1842
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_auth_is_stripped_on_http_downgrade:
    name: test_auth_is_stripped_on_http_downgrade
    Module Path: None
    Signature: test_auth_is_stripped_on_http_downgrade(self, httpbin, httpbin_secure, httpbin_ca_bundle)
    test_exe_cmd: .TestRequests.test_auth_is_stripped_on_http_downgrade(self, httpbin, httpbin_secure, httpbin_ca_bundle)
    Arguments: ['self', 'httpbin', 'httpbin_secure', 'httpbin_ca_bundle']
    Returns: None
    Start Line: 1825
    End Line: 1835
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_autoset_header_values_are_native:
    name: test_autoset_header_values_are_native
    Module Path: None
    Signature: test_autoset_header_values_are_native(self, httpbin)
    test_exe_cmd: .TestRequests.test_autoset_header_values_are_native(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1806
    End Line: 1812
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_basic_auth_str_is_always_native:
    name: test_basic_auth_str_is_always_native
    Module Path: None
    Signature: test_basic_auth_str_is_always_native(self, username, password, auth_str)
    test_exe_cmd: .TestRequests.test_basic_auth_str_is_always_native(self, username, password, auth_str)
    Arguments: ['self', 'username', 'password', 'auth_str']
    Returns: None
    Start Line: 2026
    End Line: 2040
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('username, password, auth_str', (('test', 'test', 'Basic dGVzdDp0ZXN0'), ('имя'.encode(), 'пароль'.encode(), 'Basic 0LjQvNGPOtC/0LDRgNC+0LvRjA==')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_basic_building:
    name: test_basic_building
    Module Path: None
    Signature: test_basic_building(self)
    test_exe_cmd: .TestRequests.test_basic_building(self)
    Arguments: ['self']
    Returns: None
    Start Line: 112
    End Line: 119
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_basicauth_encodes_byte_strings:
    name: test_basicauth_encodes_byte_strings
    Module Path: None
    Signature: test_basicauth_encodes_byte_strings(self)
    test_exe_cmd: .TestRequests.test_basicauth_encodes_byte_strings(self)
    Arguments: ['self']
    Returns: None
    Start Line: 561
    End Line: 569
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure b'test' formats as the byte string "test" rather
        than the unicode string "b'test'" in Python 3.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_basicauth_with_netrc:
    name: test_basicauth_with_netrc
    Module Path: None
    Signature: test_basicauth_with_netrc(self, httpbin)
    test_exe_cmd: .TestRequests.test_basicauth_with_netrc(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 672
    End Line: 705
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Should use netrc and work.', 'Given auth should override and fail.', 'Should use netrc and work.', 'Given auth should override and fail.']
    Runtime: python

  test_requests.py::test_binary_put:
    name: test_binary_put
    Module Path: None
    Signature: test_binary_put(self)
    test_exe_cmd: .TestRequests.test_binary_put(self)
    Arguments: ['self']
    Returns: None
    Start Line: 181
    End Line: 185
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_can_send_file_object_with_non_string_filename:
    name: test_can_send_file_object_with_non_string_filename
    Module Path: None
    Signature: test_can_send_file_object_with_non_string_filename(self, httpbin)
    test_exe_cmd: .TestRequests.test_can_send_file_object_with_non_string_filename(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1798
    End Line: 1804
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_can_send_objects_with_files:
    name: test_can_send_objects_with_files
    Module Path: None
    Signature: test_can_send_objects_with_files(self, httpbin, files)
    test_exe_cmd: .TestRequests.test_can_send_objects_with_files(self, httpbin, files)
    Arguments: ['self', 'httpbin', 'files']
    Returns: None
    Start Line: 1790
    End Line: 1796
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('files', ('foo', b'foo', bytearray(b'foo')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cannot_send_unprepared_requests:
    name: test_cannot_send_unprepared_requests
    Module Path: None
    Signature: test_cannot_send_unprepared_requests(self, httpbin)
    test_exe_cmd: .TestRequests.test_cannot_send_unprepared_requests(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1539
    End Line: 1542
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_certificate_failure:
    name: test_certificate_failure
    Module Path: None
    Signature: test_certificate_failure(self, httpbin_secure)
    test_exe_cmd: .TestRequests.test_certificate_failure(self, httpbin_secure)
    Arguments: ['self', 'httpbin_secure']
    Returns: None
    Start Line: 1020
    End Line: 1027
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: When underlying SSL problems occur, an SSLError is raised.
    Description: 
    Description Embedding: 
    Comments: ['Our local httpbin does not have a trusted CA, so this call will', 'fail if we use our default trust bundle.']
    Runtime: python

  test_requests.py::test_chunked_upload_does_not_set_content_length_header:
    name: test_chunked_upload_does_not_set_content_length_header
    Module Path: None
    Signature: test_chunked_upload_does_not_set_content_length_header(self, httpbin)
    test_exe_cmd: .TestRequests.test_chunked_upload_does_not_set_content_length_header(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2164
    End Line: 2173
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure that requests with a generator body stream using
        Transfer-Encoding: chunked, not a Content-Length header.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_conflicting_post_params:
    name: test_conflicting_post_params
    Module Path: None
    Signature: test_conflicting_post_params(self, httpbin)
    test_exe_cmd: .TestRequests.test_conflicting_post_params(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 883
    End Line: 887
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_connect_timeout:
    name: test_connect_timeout
    Module Path: None
    Signature: test_connect_timeout(self, timeout)
    test_exe_cmd: .TestTimeout.test_connect_timeout(self, timeout)
    Arguments: ['self', 'timeout']
    Returns: None
    Start Line: 2468
    End Line: 2477
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('timeout', ((0.1, None), Urllib3Timeout(connect=0.1, read=None)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_contains:
    name: test_contains
    Module Path: None
    Signature: test_contains(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_contains(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2268
    End Line: 2275
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_content_length_for_bytes_data:
    name: test_content_length_for_bytes_data
    Module Path: None
    Signature: test_content_length_for_bytes_data(httpbin)
    test_exe_cmd: .test_content_length_for_bytes_data(httpbin)
    Arguments: ['httpbin']
    Returns: None
    Start Line: 2953
    End Line: 2960
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_content_length_for_string_data_counts_bytes:
    name: test_content_length_for_string_data_counts_bytes
    Module Path: None
    Signature: test_content_length_for_string_data_counts_bytes(httpbin)
    test_exe_cmd: .test_content_length_for_string_data_counts_bytes(httpbin)
    Arguments: ['httpbin']
    Returns: None
    Start Line: 2963
    End Line: 2973
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.skipif(is_urllib3_1, reason='urllib3 2.x encodes all strings to utf-8, urllib3 1.x uses latin-1')
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cookie_as_dict_items:
    name: test_cookie_as_dict_items
    Module Path: None
    Signature: test_cookie_as_dict_items(self)
    test_exe_cmd: .TestRequests.test_cookie_as_dict_items(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1322
    End Line: 1336
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['make sure one can use items multiple times']
    Runtime: python

  test_requests.py::test_cookie_as_dict_keeps_items:
    name: test_cookie_as_dict_keeps_items
    Module Path: None
    Signature: test_cookie_as_dict_keeps_items(self)
    test_exe_cmd: .TestRequests.test_cookie_as_dict_keeps_items(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1271
    End Line: 1288
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cookie_as_dict_keeps_len:
    name: test_cookie_as_dict_keeps_len
    Module Path: None
    Signature: test_cookie_as_dict_keeps_len(self)
    test_exe_cmd: .TestRequests.test_cookie_as_dict_keeps_len(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1251
    End Line: 1269
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cookie_as_dict_keys:
    name: test_cookie_as_dict_keys
    Module Path: None
    Signature: test_cookie_as_dict_keys(self)
    test_exe_cmd: .TestRequests.test_cookie_as_dict_keys(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1290
    End Line: 1304
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['make sure one can use keys multiple times']
    Runtime: python

  test_requests.py::test_cookie_as_dict_values:
    name: test_cookie_as_dict_values
    Module Path: None
    Signature: test_cookie_as_dict_values(self)
    test_exe_cmd: .TestRequests.test_cookie_as_dict_values(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1306
    End Line: 1320
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['make sure one can use values multiple times']
    Runtime: python

  test_requests.py::test_cookie_duplicate_names_different_domains:
    name: test_cookie_duplicate_names_different_domains
    Module Path: None
    Signature: test_cookie_duplicate_names_different_domains(self)
    test_exe_cmd: .TestRequests.test_cookie_duplicate_names_different_domains(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1338
    End Line: 1357
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Verify that CookieConflictError is raised if domain is not specified', 'Verify that CookieConflictError is not raised if domain is specified']
    Runtime: python

  test_requests.py::test_cookie_duplicate_names_raises_cookie_conflict_error:
    name: test_cookie_duplicate_names_raises_cookie_conflict_error
    Module Path: None
    Signature: test_cookie_duplicate_names_raises_cookie_conflict_error(self)
    test_exe_cmd: .TestRequests.test_cookie_duplicate_names_raises_cookie_conflict_error(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1359
    End Line: 1368
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cookie_parameters:
    name: test_cookie_parameters
    Module Path: None
    Signature: test_cookie_parameters(self)
    test_exe_cmd: .TestRequests.test_cookie_parameters(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1233
    End Line: 1249
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cookie_persists_via_api:
    name: test_cookie_persists_via_api
    Module Path: None
    Signature: test_cookie_persists_via_api(self, httpbin)
    test_exe_cmd: .TestRequests.test_cookie_persists_via_api(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 400
    End Line: 404
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cookie_policy_copy:
    name: test_cookie_policy_copy
    Module Path: None
    Signature: test_cookie_policy_copy(self)
    test_exe_cmd: .TestRequests.test_cookie_policy_copy(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1370
    End Line: 1376
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cookie_quote_wrapped:
    name: test_cookie_quote_wrapped
    Module Path: None
    Signature: test_cookie_quote_wrapped(self, httpbin)
    test_exe_cmd: .TestRequests.test_cookie_quote_wrapped(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 395
    End Line: 398
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cookie_removed_on_expire:
    name: test_cookie_removed_on_expire
    Module Path: None
    Signature: test_cookie_removed_on_expire(self, httpbin)
    test_exe_cmd: .TestRequests.test_cookie_removed_on_expire(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 385
    End Line: 393
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_cookie_sent_on_redirect:
    name: test_cookie_sent_on_redirect
    Module Path: None
    Signature: test_cookie_sent_on_redirect(self, httpbin)
    test_exe_cmd: .TestRequests.test_cookie_sent_on_redirect(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 379
    End Line: 383
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ["redirects to httpbin('get')"]
    Runtime: python

  test_requests.py::test_cookielib_cookiejar_on_redirect:
    name: test_cookielib_cookiejar_on_redirect
    Module Path: None
    Signature: test_cookielib_cookiejar_on_redirect(self, httpbin)
    test_exe_cmd: .TestRequests.test_cookielib_cookiejar_on_redirect(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 439
    End Line: 469
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Tests resolve_redirect doesn't fail when merging cookies
        with non-RequestsCookieJar cookiejar.

        See GH #3579
    Description: 
    Description Embedding: 
    Comments: ['3579', 'Prepare request without using Session', 'Send request and simulate redirect', "Verify CookieJar isn't being converted to RequestsCookieJar"]
    Runtime: python

  test_requests.py::test_copy:
    name: test_copy
    Module Path: None
    Signature: test_copy(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_copy(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2358
    End Line: 2368
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_custom_content_type:
    name: test_custom_content_type
    Module Path: None
    Signature: test_custom_content_type(self, httpbin)
    test_exe_cmd: .TestRequests.test_custom_content_type(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1113
    End Line: 1123
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_custom_redirect_mixin:
    name: test_custom_redirect_mixin
    Module Path: None
    Signature: test_custom_redirect_mixin(self, httpbin)
    test_exe_cmd: .TestRequests.test_custom_redirect_mixin(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2175
    End Line: 2217
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Tests a custom mixin to overwrite ``get_redirect_target``.

        Ensures a subclassed ``requests.Session`` can handle a certain type of
        malformed redirect responses.

        1. original request receives a proper response: 302 redirect
        2. following the redirect, a malformed response is given:
            status code = HTTP 200
            location = alternate url
        3. the custom session catches the edge case and follows the redirect
    Description: 
    Description Embedding: 
    Comments: ['default behavior', "edge case - check to see if 'location' is in headers anyways"]
    Runtime: python

  test_requests.py::test_data_argument_accepts_tuples:
    name: test_data_argument_accepts_tuples
    Module Path: None
    Signature: test_data_argument_accepts_tuples(data)
    test_exe_cmd: .test_data_argument_accepts_tuples(data)
    Arguments: ['data']
    Returns: None
    Start Line: 2581
    End Line: 2597
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('data', ((('a', 'b'), ('c', 'd')), (('c', 'd'), ('a', 'b')), (('a', 'b'), ('c', 'd'), ('e', 'f'))))
    Docstring: Ensure that the data argument will accept tuples of strings
    and properly encode them.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_decompress_gzip:
    name: test_decompress_gzip
    Module Path: None
    Signature: test_decompress_gzip(self, httpbin)
    test_exe_cmd: .TestRequests.test_decompress_gzip(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 901
    End Line: 903
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_delitem:
    name: test_delitem
    Module Path: None
    Signature: test_delitem(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_delitem(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2261
    End Line: 2266
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_different_connection_pool_for_mtls_settings:
    name: test_different_connection_pool_for_mtls_settings
    Module Path: None
    Signature: test_different_connection_pool_for_mtls_settings(self)
    test_exe_cmd: .TestPreparingURLs.test_different_connection_pool_for_mtls_settings(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2913
    End Line: 2950
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_different_connection_pool_for_tls_settings_verify_True:
    name: test_different_connection_pool_for_tls_settings_verify_True
    Module Path: None
    Signature: test_different_connection_pool_for_tls_settings_verify_True(self)
    test_exe_cmd: .TestPreparingURLs.test_different_connection_pool_for_tls_settings_verify_True(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2817
    End Line: 2846
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Cannot verify self-signed certificate']
    Runtime: python

  test_requests.py::test_different_connection_pool_for_tls_settings_verify_bundle_expired_cert:
    name: test_different_connection_pool_for_tls_settings_verify_bundle_expired_cert
    Module Path: None
    Signature: test_different_connection_pool_for_tls_settings_verify_bundle_expired_cert(self)
    test_exe_cmd: .TestPreparingURLs.test_different_connection_pool_for_tls_settings_verify_bundle_expired_cert(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2848
    End Line: 2879
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Has right trust bundle, but certificate expired']
    Runtime: python

  test_requests.py::test_different_connection_pool_for_tls_settings_verify_bundle_unexpired_cert:
    name: test_different_connection_pool_for_tls_settings_verify_bundle_unexpired_cert
    Module Path: None
    Signature: test_different_connection_pool_for_tls_settings_verify_bundle_unexpired_cert(self)
    test_exe_cmd: .TestPreparingURLs.test_different_connection_pool_for_tls_settings_verify_bundle_unexpired_cert(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2881
    End Line: 2911
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_different_encodings_dont_break_post:
    name: test_different_encodings_dont_break_post
    Module Path: None
    Signature: test_different_encodings_dont_break_post(self, httpbin)
    test_exe_cmd: .TestRequests.test_different_encodings_dont_break_post(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1041
    End Line: 1049
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_docstring_example:
    name: test_docstring_example
    Module Path: None
    Signature: test_docstring_example(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_docstring_example(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2234
    End Line: 2238
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_empty_content_length:
    name: test_empty_content_length
    Module Path: None
    Signature: test_empty_content_length(self, httpbin, method)
    test_exe_cmd: .TestRequests.test_empty_content_length(self, httpbin, method)
    Arguments: ['self', 'httpbin', 'method']
    Returns: None
    Start Line: 131
    End Line: 134
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('method', ('POST', 'PUT', 'PATCH', 'OPTIONS'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_empty_response_has_content_none:
    name: test_empty_response_has_content_none
    Module Path: None
    Signature: test_empty_response_has_content_none(self)
    test_exe_cmd: .TestRequests.test_empty_response_has_content_none(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1386
    End Line: 1388
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_empty_stream_with_auth_does_not_set_content_length_header:
    name: test_empty_stream_with_auth_does_not_set_content_length_header
    Module Path: None
    Signature: test_empty_stream_with_auth_does_not_set_content_length_header(self, httpbin)
    test_exe_cmd: .TestRequests.test_empty_stream_with_auth_does_not_set_content_length_header(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2140
    End Line: 2150
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure that a byte stream with size 0 will not set both a Content-Length
        and Transfer-Encoding header.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_encoded_methods:
    name: test_encoded_methods
    Module Path: None
    Signature: test_encoded_methods(self, httpbin)
    test_exe_cmd: .TestTimeout.test_encoded_methods(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2489
    End Line: 2492
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: See: https://github.com/psf/requests/issues/2316
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_entry_points:
    name: test_entry_points
    Module Path: None
    Signature: test_entry_points(self)
    test_exe_cmd: .TestRequests.test_entry_points(self)
    Arguments: ['self']
    Returns: None
    Start Line: 84
    End Line: 94
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Not really an entry point, but people rely on it.', 'noqa:F401']
    Runtime: python

  test_requests.py::test_env_cert_bundles:
    name: test_env_cert_bundles
    Module Path: None
    Signature: test_env_cert_bundles(self, httpbin, env, expected)
    test_exe_cmd: .TestRequests.test_env_cert_bundles(self, httpbin, env, expected)
    Arguments: ['self', 'httpbin', 'env', 'expected']
    Returns: None
    Start Line: 954
    End Line: 985
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('env, expected', (({}, True), ({'REQUESTS_CA_BUNDLE': '/some/path'}, '/some/path'), ({'REQUESTS_CA_BUNDLE': ''}, True), ({'CURL_CA_BUNDLE': '/some/path'}, '/some/path'), ({'CURL_CA_BUNDLE': ''}, True), ({'REQUESTS_CA_BUNDLE': '', 'CURL_CA_BUNDLE': ''}, True), ({'REQUESTS_CA_BUNDLE': '/some/path', 'CURL_CA_BUNDLE': '/curl/path'}, '/some/path'), ({'REQUESTS_CA_BUNDLE': '', 'CURL_CA_BUNDLE': '/curl/path'}, '/curl/path')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_equality:
    name: test_equality
    Module Path: None
    Signature: test_equality(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_equality(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2307
    End Line: 2314
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_errors:
    name: test_errors
    Module Path: None
    Signature: test_errors(self, url, exception)
    test_exe_cmd: .TestRequests.test_errors(self, url, exception)
    Arguments: ['self', 'url', 'exception']
    Returns: None
    Start Line: 571
    End Line: 584
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, exception', (('http://doesnotexist.google.com', ConnectionError), ('http://localhost:1', ConnectionError), ('http://fe80::5054:ff:fe5a:fc0', InvalidURL)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Connecting to an unknown domain should raise a ConnectionError', 'Connecting to an invalid port should raise a ConnectionError', 'Inputing a URL that cannot be parsed should raise an InvalidURL error']
    Runtime: python

  test_requests.py::test_expires_invalid_int:
    name: test_expires_invalid_int
    Module Path: None
    Signature: test_expires_invalid_int(self, value, exception)
    test_exe_cmd: .TestMorselToCookieExpires.test_expires_invalid_int(self, value, exception)
    Arguments: ['self', 'value', 'exception']
    Returns: None
    Start Line: 2382
    End Line: 2394
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, exception', ((100, TypeError), ('woops', ValueError)))
    Docstring: Test case where an invalid type is passed for expires.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_expires_none:
    name: test_expires_none
    Module Path: None
    Signature: test_expires_none(self)
    test_exe_cmd: .TestMorselToCookieExpires.test_expires_none(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2396
    End Line: 2402
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Test case where expires is None.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_expires_valid_str:
    name: test_expires_valid_str
    Module Path: None
    Signature: test_expires_valid_str(self)
    test_exe_cmd: .TestMorselToCookieExpires.test_expires_valid_str(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2374
    End Line: 2380
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Test case where we convert expires from string time.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_fixes_1329:
    name: test_fixes_1329
    Module Path: None
    Signature: test_fixes_1329(self, httpbin)
    test_exe_cmd: .TestRequests.test_fixes_1329(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1564
    End Line: 1573
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure that header updates are done case-insensitively.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_fixes_649:
    name: test_fixes_649
    Module Path: None
    Signature: test_fixes_649(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_fixes_649(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2250
    End Line: 2259
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: __setitem__ should behave case-insensitively.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_form_encoded_post_query_multivalued_element:
    name: test_form_encoded_post_query_multivalued_element
    Module Path: None
    Signature: test_form_encoded_post_query_multivalued_element(self, httpbin)
    test_exe_cmd: .TestRequests.test_form_encoded_post_query_multivalued_element(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1034
    End Line: 1039
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_fragment_maintained_on_redirect:
    name: test_fragment_maintained_on_redirect
    Module Path: None
    Signature: test_fragment_maintained_on_redirect(self, httpbin)
    test_exe_cmd: .TestRequests.test_fragment_maintained_on_redirect(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 349
    End Line: 355
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['view=edit&token=hunter2"']
    Runtime: python

  test_requests.py::test_generic_cookiejar_works:
    name: test_generic_cookiejar_works
    Module Path: None
    Signature: test_generic_cookiejar_works(self, httpbin)
    test_exe_cmd: .TestRequests.test_generic_cookiejar_works(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 420
    End Line: 429
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Make sure the cookie was sent', 'Make sure the session cj is still the custom one']
    Runtime: python

  test_requests.py::test_get:
    name: test_get
    Module Path: None
    Signature: test_get(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_get(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2277
    End Line: 2284
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_getitem:
    name: test_getitem
    Module Path: None
    Signature: test_getitem(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_getitem(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2245
    End Line: 2248
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_header_and_body_removal_on_redirect:
    name: test_header_and_body_removal_on_redirect
    Module Path: None
    Signature: test_header_and_body_removal_on_redirect(self, httpbin)
    test_exe_cmd: .TestRequests.test_header_and_body_removal_on_redirect(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 309
    End Line: 324
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Mimic a redirect response', 'Run request through resolve_redirects']
    Runtime: python

  test_requests.py::test_header_keys_are_native:
    name: test_header_keys_are_native
    Module Path: None
    Signature: test_header_keys_are_native(self, httpbin)
    test_exe_cmd: .TestRequests.test_header_keys_are_native(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1688
    End Line: 1696
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['This is testing that they are builtin strings. A bit weird, but there', 'we go.']
    Runtime: python

  test_requests.py::test_header_no_leading_space:
    name: test_header_no_leading_space
    Module Path: None
    Signature: test_header_no_leading_space(self, httpbin, invalid_header)
    test_exe_cmd: .TestRequests.test_header_no_leading_space(self, httpbin, invalid_header)
    Arguments: ['self', 'httpbin', 'invalid_header']
    Returns: None
    Start Line: 1746
    End Line: 1763
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('invalid_header', ({' foo': 'bar'}, {'\tfoo': 'bar'}, {'    foo': 'bar'}, {'foo': ' bar'}, {'foo': '    bar'}, {'foo': '\tbar'}, {' ': 'bar'}))
    Docstring: Ensure headers containing leading whitespace raise
        InvalidHeader Error before sending.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_header_no_return_chars:
    name: test_header_no_return_chars
    Module Path: None
    Signature: test_header_no_return_chars(self, httpbin, invalid_header)
    test_exe_cmd: .TestRequests.test_header_no_return_chars(self, httpbin, invalid_header)
    Arguments: ['self', 'httpbin', 'invalid_header']
    Returns: None
    Start Line: 1726
    End Line: 1744
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('invalid_header', ({'foo': 'bar\r\nbaz: qux'}, {'foo': 'bar\n\rbaz: qux'}, {'foo': 'bar\nbaz: qux'}, {'foo': 'bar\rbaz: qux'}, {'fo\ro': 'bar'}, {'fo\r\no': 'bar'}, {'fo\n\ro': 'bar'}, {'fo\no': 'bar'}))
    Docstring: Ensure that a header containing return character sequences raise an
        exception. Otherwise, multiple headers are created from single string.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_header_remove_is_case_insensitive:
    name: test_header_remove_is_case_insensitive
    Module Path: None
    Signature: test_header_remove_is_case_insensitive(self, httpbin)
    test_exe_cmd: .TestRequests.test_header_remove_is_case_insensitive(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1666
    End Line: 1671
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['From issue #1321']
    Runtime: python

  test_requests.py::test_header_validation:
    name: test_header_validation
    Module Path: None
    Signature: test_header_validation(self, httpbin)
    test_exe_cmd: .TestRequests.test_header_validation(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1698
    End Line: 1708
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure prepare_headers regex isn't flagging valid header contents.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_header_value_not_str:
    name: test_header_value_not_str
    Module Path: None
    Signature: test_header_value_not_str(self, httpbin, invalid_header, key)
    test_exe_cmd: .TestRequests.test_header_value_not_str(self, httpbin, invalid_header, key)
    Arguments: ['self', 'httpbin', 'invalid_header', 'key']
    Returns: None
    Start Line: 1710
    End Line: 1724
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('invalid_header, key', (({'foo': 3}, 'foo'), ({'bar': {'foo': 'bar'}}, 'bar'), ({'baz': ['foo', 'bar']}, 'baz')))
    Docstring: Ensure the header value is of type string or bytes as
        per discussion in GH issue #3386
    Description: 
    Description Embedding: 
    Comments: ['3386']
    Runtime: python

  test_requests.py::test_header_with_subclass_types:
    name: test_header_with_subclass_types
    Module Path: None
    Signature: test_header_with_subclass_types(self, httpbin)
    test_exe_cmd: .TestRequests.test_header_with_subclass_types(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1765
    End Line: 1788
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: If the subclasses does not behave *exactly* like
        the base bytes/str classes, this is not supported.
        This test is for backwards compatibility.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_headers_on_session_with_None_are_not_sent:
    name: test_headers_on_session_with_None_are_not_sent
    Module Path: None
    Signature: test_headers_on_session_with_None_are_not_sent(self, httpbin)
    test_exe_cmd: .TestRequests.test_headers_on_session_with_None_are_not_sent(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 485
    End Line: 491
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Do not send headers in Session.headers with None values.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_headers_preserve_order:
    name: test_headers_preserve_order
    Module Path: None
    Signature: test_headers_preserve_order(self, httpbin)
    test_exe_cmd: .TestRequests.test_headers_preserve_order(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 493
    End Line: 511
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Preserve order when headers provided as OrderedDict.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_history_is_always_a_list:
    name: test_history_is_always_a_list
    Module Path: None
    Signature: test_history_is_always_a_list(self, httpbin)
    test_exe_cmd: .TestRequests.test_history_is_always_a_list(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 477
    End Line: 483
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Show that even with redirects, Response.history is always a list.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_hook_receives_request_arguments:
    name: test_hook_receives_request_arguments
    Module Path: None
    Signature: test_hook_receives_request_arguments(self, httpbin)
    test_exe_cmd: .TestRequests.test_hook_receives_request_arguments(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1125
    End Line: 1133
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_http_301_changes_post_to_get:
    name: test_http_301_changes_post_to_get
    Module Path: None
    Signature: test_http_301_changes_post_to_get(self, httpbin)
    test_exe_cmd: .TestRequests.test_http_301_changes_post_to_get(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 266
    End Line: 271
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_http_301_doesnt_change_head_to_get:
    name: test_http_301_doesnt_change_head_to_get
    Module Path: None
    Signature: test_http_301_doesnt_change_head_to_get(self, httpbin)
    test_exe_cmd: .TestRequests.test_http_301_doesnt_change_head_to_get(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 273
    End Line: 279
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_http_302_changes_post_to_get:
    name: test_http_302_changes_post_to_get
    Module Path: None
    Signature: test_http_302_changes_post_to_get(self, httpbin)
    test_exe_cmd: .TestRequests.test_http_302_changes_post_to_get(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 281
    End Line: 286
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_http_302_doesnt_change_head_to_get:
    name: test_http_302_doesnt_change_head_to_get
    Module Path: None
    Signature: test_http_302_doesnt_change_head_to_get(self, httpbin)
    test_exe_cmd: .TestRequests.test_http_302_doesnt_change_head_to_get(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 288
    End Line: 293
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_http_303_changes_post_to_get:
    name: test_http_303_changes_post_to_get
    Module Path: None
    Signature: test_http_303_changes_post_to_get(self, httpbin)
    test_exe_cmd: .TestRequests.test_http_303_changes_post_to_get(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 295
    End Line: 300
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_http_303_doesnt_change_head_to_get:
    name: test_http_303_doesnt_change_head_to_get
    Module Path: None
    Signature: test_http_303_doesnt_change_head_to_get(self, httpbin)
    test_exe_cmd: .TestRequests.test_http_303_doesnt_change_head_to_get(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 302
    End Line: 307
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_http_error:
    name: test_http_error
    Module Path: None
    Signature: test_http_error(self)
    test_exe_cmd: .TestRequests.test_http_error(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1544
    End Line: 1552
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_http_with_certificate:
    name: test_http_with_certificate
    Module Path: None
    Signature: test_http_with_certificate(self, httpbin)
    test_exe_cmd: .TestRequests.test_http_with_certificate(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 987
    End Line: 989
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_https_warnings:
    name: test_https_warnings
    Module Path: None
    Signature: test_https_warnings(self, nosan_server)
    test_exe_cmd: .TestRequests.test_https_warnings(self, nosan_server)
    Arguments: ['self', 'nosan_server']
    Returns: None
    Start Line: 991
    End Line: 1018
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.skipif(SNIMissingWarning is None, reason='urllib3 2.0 removed that warning and errors out instead')
    Docstring: warnings are emitted with requests.get
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_init:
    name: test_init
    Module Path: None
    Signature: test_init(self, cid)
    test_exe_cmd: .TestCaseInsensitiveDict.test_init(self, cid)
    Arguments: ['self', 'cid']
    Returns: None
    Start Line: 2221
    End Line: 2232
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('cid', (CaseInsensitiveDict({'Foo': 'foo', 'BAr': 'bar'}), CaseInsensitiveDict([('Foo', 'foo'), ('BAr', 'bar')]), CaseInsensitiveDict(FOO='foo', BAr='bar')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_invalid_ca_certificate_path:
    name: test_invalid_ca_certificate_path
    Module Path: None
    Signature: test_invalid_ca_certificate_path(self, httpbin_secure)
    test_exe_cmd: .TestRequests.test_invalid_ca_certificate_path(self, httpbin_secure)
    Arguments: ['self', 'httpbin_secure']
    Returns: None
    Start Line: 928
    End Line: 936
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_invalid_files_input:
    name: test_invalid_files_input
    Module Path: None
    Signature: test_invalid_files_input(self, httpbin)
    test_exe_cmd: .TestRequests.test_invalid_files_input(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 794
    End Line: 798
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_invalid_ssl_certificate_files:
    name: test_invalid_ssl_certificate_files
    Module Path: None
    Signature: test_invalid_ssl_certificate_files(self, httpbin_secure)
    test_exe_cmd: .TestRequests.test_invalid_ssl_certificate_files(self, httpbin_secure)
    Arguments: ['self', 'httpbin_secure']
    Returns: None
    Start Line: 938
    End Line: 952
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_invalid_timeout:
    name: test_invalid_timeout
    Module Path: None
    Signature: test_invalid_timeout(self, httpbin, timeout, error_text)
    test_exe_cmd: .TestTimeout.test_invalid_timeout(self, httpbin, timeout, error_text)
    Arguments: ['self', 'httpbin', 'timeout', 'error_text']
    Returns: None
    Start Line: 2433
    End Line: 2443
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('timeout, error_text', (((3, 4, 5), '(connect, read)'), ('foo', 'must be an int, float or None')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_invalid_url:
    name: test_invalid_url
    Module Path: None
    Signature: test_invalid_url(self, exception, url)
    test_exe_cmd: .TestRequests.test_invalid_url(self, exception, url)
    Arguments: ['self', 'exception', 'url']
    Returns: None
    Start Line: 96
    End Line: 110
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('exception, url', ((MissingSchema, 'hiwpefhipowhefopw'), (InvalidSchema, 'localhost:3128'), (InvalidSchema, 'localhost.localdomain:3128/'), (InvalidSchema, '10.122.1.1:3128/'), (InvalidURL, 'http://'), (InvalidURL, 'http://*example.com'), (InvalidURL, 'http://.example.com')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_iter:
    name: test_iter
    Module Path: None
    Signature: test_iter(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_iter(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2302
    End Line: 2305
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_iter_content_wraps_exceptions:
    name: test_iter_content_wraps_exceptions
    Module Path: None
    Signature: test_iter_content_wraps_exceptions(self, httpbin, exception, args, expected)
    test_exe_cmd: .TestRequests.test_iter_content_wraps_exceptions(self, httpbin, exception, args, expected)
    Arguments: ['self', 'httpbin', 'exception', 'args', 'expected']
    Returns: None
    Start Line: 1462
    End Line: 1479
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('exception, args, expected', ((urllib3.exceptions.ProtocolError, tuple(), ChunkedEncodingError), (urllib3.exceptions.DecodeError, tuple(), ContentDecodingError), (urllib3.exceptions.ReadTimeoutError, (None, '', ''), ConnectionError), (urllib3.exceptions.SSLError, tuple(), RequestsSSLError)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ["ReadTimeoutError can't be initialized by mock", "so we'll manually create the instance with args"]
    Runtime: python

  test_requests.py::test_json_decode_compatibility:
    name: test_json_decode_compatibility
    Module Path: None
    Signature: test_json_decode_compatibility(self, httpbin)
    test_exe_cmd: .TestPreparingURLs.test_json_decode_compatibility(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2788
    End Line: 2794
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_json_decode_errors_are_serializable_deserializable:
    name: test_json_decode_errors_are_serializable_deserializable
    Module Path: None
    Signature: test_json_decode_errors_are_serializable_deserializable()
    test_exe_cmd: .test_json_decode_errors_are_serializable_deserializable()
    Arguments: None
    Returns: None
    Start Line: 2976
    End Line: 2983
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_json_decode_persists_doc_attr:
    name: test_json_decode_persists_doc_attr
    Module Path: None
    Signature: test_json_decode_persists_doc_attr(self, httpbin)
    test_exe_cmd: .TestPreparingURLs.test_json_decode_persists_doc_attr(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2796
    End Line: 2800
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_json_encodes_as_bytes:
    name: test_json_encodes_as_bytes
    Module Path: None
    Signature: test_json_encodes_as_bytes()
    test_exe_cmd: .test_json_encodes_as_bytes()
    Arguments: None
    Returns: None
    Start Line: 2530
    End Line: 2535
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['urllib3 expects bodies as bytes-like objects']
    Runtime: python

  test_requests.py::test_json_param_post_content_type_works:
    name: test_json_param_post_content_type_works
    Module Path: None
    Signature: test_json_param_post_content_type_works(self, httpbin)
    test_exe_cmd: .TestRequests.test_json_param_post_content_type_works(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2050
    End Line: 2054
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_json_param_post_should_not_override_data_param:
    name: test_json_param_post_should_not_override_data_param
    Module Path: None
    Signature: test_json_param_post_should_not_override_data_param(self, httpbin)
    test_exe_cmd: .TestRequests.test_json_param_post_should_not_override_data_param(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2056
    End Line: 2064
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_len:
    name: test_len
    Module Path: None
    Signature: test_len(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_len(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2240
    End Line: 2243
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_links:
    name: test_links
    Module Path: None
    Signature: test_links(self)
    test_exe_cmd: .TestRequests.test_links(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1207
    End Line: 1231
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_long_authinfo_in_url:
    name: test_long_authinfo_in_url
    Module Path: None
    Signature: test_long_authinfo_in_url(self)
    test_exe_cmd: .TestRequests.test_long_authinfo_in_url(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1679
    End Line: 1686
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['frag".format(']
    Runtime: python

  test_requests.py::test_lower_items:
    name: test_lower_items
    Module Path: None
    Signature: test_lower_items(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_lower_items(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2321
    End Line: 2330
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_manual_redirect_with_partial_body_read:
    name: test_manual_redirect_with_partial_body_read
    Module Path: None
    Signature: test_manual_redirect_with_partial_body_read(self, httpbin)
    test_exe_cmd: .TestRequests.test_manual_redirect_with_partial_body_read(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1892
    End Line: 1909
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['read only the first eight bytes of the response body,', 'then follow the redirect', 'read all of the response via iter_content,', 'then follow the redirect']
    Runtime: python

  test_requests.py::test_max_age_invalid_str:
    name: test_max_age_invalid_str
    Module Path: None
    Signature: test_max_age_invalid_str(self)
    test_exe_cmd: .TestMorselToCookieMaxAge.test_max_age_invalid_str(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2417
    End Line: 2423
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Test case where a invalid max age is passed.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_max_age_valid_int:
    name: test_max_age_valid_int
    Module Path: None
    Signature: test_max_age_valid_int(self)
    test_exe_cmd: .TestMorselToCookieMaxAge.test_max_age_valid_int(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2409
    End Line: 2415
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Test case where a valid max age in seconds is passed.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_mixed_case_scheme_acceptable:
    name: test_mixed_case_scheme_acceptable
    Module Path: None
    Signature: test_mixed_case_scheme_acceptable(self, httpbin, scheme)
    test_exe_cmd: .TestRequests.test_mixed_case_scheme_acceptable(self, httpbin, scheme)
    Arguments: ['self', 'httpbin', 'scheme']
    Returns: None
    Start Line: 192
    End Line: 200
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('scheme', ('http://', 'HTTP://', 'hTTp://', 'HttP://'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_no_body_content_length:
    name: test_no_body_content_length
    Module Path: None
    Signature: test_no_body_content_length(self, httpbin, method)
    test_exe_cmd: .TestRequests.test_no_body_content_length(self, httpbin, method)
    Arguments: ['self', 'httpbin', 'method']
    Returns: None
    Start Line: 126
    End Line: 129
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('method', ('POST', 'PUT', 'PATCH', 'OPTIONS'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_no_content_length:
    name: test_no_content_length
    Module Path: None
    Signature: test_no_content_length(self, httpbin, method)
    test_exe_cmd: .TestRequests.test_no_content_length(self, httpbin, method)
    Arguments: ['self', 'httpbin', 'method']
    Returns: None
    Start Line: 121
    End Line: 124
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('method', ('GET', 'HEAD'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_non_prepared_request_error:
    name: test_non_prepared_request_error
    Module Path: None
    Signature: test_non_prepared_request_error(self)
    test_exe_cmd: .TestRequests.test_non_prepared_request_error(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1105
    End Line: 1111
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_none_timeout:
    name: test_none_timeout
    Module Path: None
    Signature: test_none_timeout(self, httpbin, timeout)
    test_exe_cmd: .TestTimeout.test_none_timeout(self, httpbin, timeout)
    Arguments: ['self', 'httpbin', 'timeout']
    Returns: None
    Start Line: 2445
    End Line: 2456
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('timeout', (None, Urllib3Timeout(connect=None, read=None)))
    Docstring: Check that you can set None as a valid timeout value.

        To actually test this behavior, we'd want to check that setting the
        timeout to None actually lets the request block past the system default
        timeout. However, this would make the test suite unbearably slow.
        Instead we verify that setting the timeout to None does not prevent the
        request from succeeding.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_nonhttp_schemes_dont_check_URLs:
    name: test_nonhttp_schemes_dont_check_URLs
    Module Path: None
    Signature: test_nonhttp_schemes_dont_check_URLs(self)
    test_exe_cmd: .TestRequests.test_nonhttp_schemes_dont_check_URLs(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1814
    End Line: 1823
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_override_content_length:
    name: test_override_content_length
    Module Path: None
    Signature: test_override_content_length(self, httpbin)
    test_exe_cmd: .TestRequests.test_override_content_length(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 136
    End Line: 140
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_param_cookiejar_works:
    name: test_param_cookiejar_works
    Module Path: None
    Signature: test_param_cookiejar_works(self, httpbin)
    test_exe_cmd: .TestRequests.test_param_cookiejar_works(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 431
    End Line: 437
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Make sure the cookie was sent']
    Runtime: python

  test_requests.py::test_parameters_for_nonstandard_schemes:
    name: test_parameters_for_nonstandard_schemes
    Module Path: None
    Signature: test_parameters_for_nonstandard_schemes(self, input, params, expected)
    test_exe_cmd: .TestPreparingURLs.test_parameters_for_nonstandard_schemes(self, input, params, expected)
    Arguments: ['self', 'input', 'params', 'expected']
    Returns: None
    Start Line: 2749
    End Line: 2781
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('input, params, expected', ((b'http+unix://%2Fvar%2Frun%2Fsocket/path', {'key': 'value'}, 'http+unix://%2Fvar%2Frun%2Fsocket/path?key=value'), ('http+unix://%2Fvar%2Frun%2Fsocket/path', {'key': 'value'}, 'http+unix://%2Fvar%2Frun%2Fsocket/path?key=value'), (b'mailto:user@example.org', {'key': 'value'}, 'mailto:user@example.org'), ('mailto:user@example.org', {'key': 'value'}, 'mailto:user@example.org')))
    Docstring: Setting parameters for nonstandard schemes is allowed if those schemes
        begin with "http", and is forbidden otherwise.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_params_are_added_before_fragment:
    name: test_params_are_added_before_fragment
    Module Path: None
    Signature: test_params_are_added_before_fragment(self, url, expected)
    test_exe_cmd: .TestRequests.test_params_are_added_before_fragment(self, url, expected)
    Arguments: ['self', 'url', 'expected']
    Returns: None
    Start Line: 147
    End Line: 162
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, expected', (('http://example.com/path#fragment', 'http://example.com/path?a=b#fragment'), ('http://example.com/path?key=value#fragment', 'http://example.com/path?key=value&a=b#fragment')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['fragment",', 'fragment",', 'fragment",', 'fragment",']
    Runtime: python

  test_requests.py::test_params_are_merged_case_sensitive:
    name: test_params_are_merged_case_sensitive
    Module Path: None
    Signature: test_params_are_merged_case_sensitive(self, httpbin)
    test_exe_cmd: .TestRequests.test_params_are_merged_case_sensitive(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1673
    End Line: 1677
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_params_bytes_are_encoded:
    name: test_params_bytes_are_encoded
    Module Path: None
    Signature: test_params_bytes_are_encoded(self)
    test_exe_cmd: .TestRequests.test_params_bytes_are_encoded(self)
    Arguments: ['self']
    Returns: None
    Start Line: 175
    End Line: 179
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_params_original_order_is_preserved_by_default:
    name: test_params_original_order_is_preserved_by_default
    Module Path: None
    Signature: test_params_original_order_is_preserved_by_default(self)
    test_exe_cmd: .TestRequests.test_params_original_order_is_preserved_by_default(self)
    Arguments: ['self']
    Returns: None
    Start Line: 164
    End Line: 173
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_path_is_not_double_encoded:
    name: test_path_is_not_double_encoded
    Module Path: None
    Signature: test_path_is_not_double_encoded(self)
    test_exe_cmd: .TestRequests.test_path_is_not_double_encoded(self)
    Arguments: ['self']
    Returns: None
    Start Line: 142
    End Line: 145
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_post_json_nan:
    name: test_post_json_nan
    Module Path: None
    Signature: test_post_json_nan(self, httpbin)
    test_exe_cmd: .TestPreparingURLs.test_post_json_nan(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2783
    End Line: 2786
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_post_with_custom_mapping:
    name: test_post_with_custom_mapping
    Module Path: None
    Signature: test_post_with_custom_mapping(self, httpbin)
    test_exe_cmd: .TestRequests.test_post_with_custom_mapping(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 858
    End Line: 881
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_prepare_body_position_non_stream:
    name: test_prepare_body_position_non_stream
    Module Path: None
    Signature: test_prepare_body_position_non_stream(self)
    test_exe_cmd: .TestRequests.test_prepare_body_position_non_stream(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1911
    End Line: 1914
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_prepare_request_with_bytestring_url:
    name: test_prepare_request_with_bytestring_url
    Module Path: None
    Signature: test_prepare_request_with_bytestring_url(self)
    test_exe_cmd: .TestRequests.test_prepare_request_with_bytestring_url(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1191
    End Line: 1195
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_prepared_copy:
    name: test_prepared_copy
    Module Path: None
    Signature: test_prepared_copy(kwargs)
    test_exe_cmd: .test_prepared_copy(kwargs)
    Arguments: ['kwargs']
    Returns: None
    Start Line: 2600
    End Line: 2626
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('kwargs', (None, {'method': 'GET', 'url': 'http://www.example.com', 'data': 'foo=bar', 'hooks': default_hooks()}, {'method': 'GET', 'url': 'http://www.example.com', 'data': 'foo=bar', 'hooks': default_hooks(), 'cookies': {'foo': 'bar'}}, {'method': 'GET', 'url': 'http://www.example.com/üniçø∂é'}))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_prepared_from_session:
    name: test_prepared_from_session
    Module Path: None
    Signature: test_prepared_from_session(self, httpbin)
    test_exe_cmd: .TestRequests.test_prepared_from_session(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1174
    End Line: 1189
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_prepared_request_hook:
    name: test_prepared_request_hook
    Module Path: None
    Signature: test_prepared_request_hook(self, httpbin)
    test_exe_cmd: .TestRequests.test_prepared_request_hook(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1160
    End Line: 1172
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_prepared_request_is_pickleable:
    name: test_prepared_request_is_pickleable
    Module Path: None
    Signature: test_prepared_request_is_pickleable(self, httpbin)
    test_exe_cmd: .TestRequests.test_prepared_request_is_pickleable(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1493
    End Line: 1505
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Verify PreparedRequest can be pickled and unpickled', 'Verify unpickled PreparedRequest sends properly']
    Runtime: python

  test_requests.py::test_prepared_request_with_file_is_pickleable:
    name: test_prepared_request_with_file_is_pickleable
    Module Path: None
    Signature: test_prepared_request_with_file_is_pickleable(self, httpbin)
    test_exe_cmd: .TestRequests.test_prepared_request_with_file_is_pickleable(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1507
    End Line: 1521
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Verify PreparedRequest can be pickled and unpickled', 'Verify unpickled PreparedRequest sends properly']
    Runtime: python

  test_requests.py::test_prepared_request_with_hook_is_pickleable:
    name: test_prepared_request_with_hook_is_pickleable
    Module Path: None
    Signature: test_prepared_request_with_hook_is_pickleable(self, httpbin)
    test_exe_cmd: .TestRequests.test_prepared_request_with_hook_is_pickleable(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1523
    End Line: 1537
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Verify PreparedRequest can be pickled', 'Verify unpickled PreparedRequest sends properly']
    Runtime: python

  test_requests.py::test_preparing_bad_url:
    name: test_preparing_bad_url
    Module Path: None
    Signature: test_preparing_bad_url(self, url)
    test_exe_cmd: .TestPreparingURLs.test_preparing_bad_url(self, url)
    Arguments: ['self', 'url']
    Returns: None
    Start Line: 2693
    End Line: 2706
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url', (b'http://*.google.com', b'http://*', 'http://*.google.com', 'http://*', 'http://☃.net/'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_preparing_url:
    name: test_preparing_url
    Module Path: None
    Signature: test_preparing_url(self, url, expected)
    test_exe_cmd: .TestPreparingURLs.test_preparing_url(self, url, expected)
    Arguments: ['self', 'url', 'expected']
    Returns: None
    Start Line: 2650
    End Line: 2691
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url,expected', (('http://google.com', 'http://google.com/'), ('http://ジェーピーニック.jp', 'http://xn--hckqz9bzb1cyrb.jp/'), ('http://xn--n3h.net/', 'http://xn--n3h.net/'), ('http://ジェーピーニック.jp'.encode(), 'http://xn--hckqz9bzb1cyrb.jp/'), ('http://straße.de/straße', 'http://xn--strae-oqa.de/stra%C3%9Fe'), ('http://straße.de/straße'.encode(), 'http://xn--strae-oqa.de/stra%C3%9Fe'), ('http://Königsgäßchen.de/straße', 'http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe'), ('http://Königsgäßchen.de/straße'.encode(), 'http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe'), (b'http://xn--n3h.net/', 'http://xn--n3h.net/'), (b'http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/', 'http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/'), ('http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/', 'http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Helper function that normalizes equivalent', 'percent-encoded bytes before comparisons']
    Runtime: python

  test_requests.py::test_preserve_key_case:
    name: test_preserve_key_case
    Module Path: None
    Signature: test_preserve_key_case(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_preserve_key_case(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2332
    End Line: 2342
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_preserve_last_key_case:
    name: test_preserve_last_key_case
    Module Path: None
    Signature: test_preserve_last_key_case(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_preserve_last_key_case(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2344
    End Line: 2356
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_proxy_auth:
    name: test_proxy_auth
    Module Path: None
    Signature: test_proxy_auth(self)
    test_exe_cmd: .TestRequests.test_proxy_auth(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2109
    End Line: 2112
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_proxy_auth_empty_pass:
    name: test_proxy_auth_empty_pass
    Module Path: None
    Signature: test_proxy_auth_empty_pass(self)
    test_exe_cmd: .TestRequests.test_proxy_auth_empty_pass(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2114
    End Line: 2117
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_proxy_authorization_not_appended_to_https_request:
    name: test_proxy_authorization_not_appended_to_https_request
    Module Path: None
    Signature: test_proxy_authorization_not_appended_to_https_request(self, url, has_proxy_auth)
    test_exe_cmd: .TestRequests.test_proxy_authorization_not_appended_to_https_request(self, url, has_proxy_auth)
    Arguments: ['self', 'url', 'has_proxy_auth']
    Returns: None
    Start Line: 651
    End Line: 670
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url,has_proxy_auth', (('http://example.com', True), ('https://example.com', False)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_proxy_authorization_preserved_on_request:
    name: test_proxy_authorization_preserved_on_request
    Module Path: None
    Signature: test_proxy_authorization_preserved_on_request(self, httpbin)
    test_exe_cmd: .TestRequests.test_proxy_authorization_preserved_on_request(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 642
    End Line: 649
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_proxy_env_vars_override_default:
    name: test_proxy_env_vars_override_default
    Module Path: None
    Signature: test_proxy_env_vars_override_default(var, url, proxy)
    test_exe_cmd: .test_proxy_env_vars_override_default(var, url, proxy)
    Arguments: ['var', 'url', 'proxy']
    Returns: None
    Start Line: 2559
    End Line: 2578
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('var,url,proxy', [('http_proxy', 'http://example.com', 'socks5://proxy.com:9876'), ('https_proxy', 'https://example.com', 'socks5://proxy.com:9876'), ('all_proxy', 'http://example.com', 'socks5://proxy.com:9876'), ('all_proxy', 'https://example.com', 'socks5://proxy.com:9876')])
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_proxy_error:
    name: test_proxy_error
    Module Path: None
    Signature: test_proxy_error(self)
    test_exe_cmd: .TestRequests.test_proxy_error(self)
    Arguments: ['self']
    Returns: None
    Start Line: 586
    End Line: 591
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['any proxy related error (address resolution, no route to host, etc) should result in a ProxyError']
    Runtime: python

  test_requests.py::test_proxy_error_on_bad_url:
    name: test_proxy_error_on_bad_url
    Module Path: None
    Signature: test_proxy_error_on_bad_url(self, httpbin, httpbin_secure)
    test_exe_cmd: .TestRequests.test_proxy_error_on_bad_url(self, httpbin, httpbin_secure)
    Arguments: ['self', 'httpbin', 'httpbin_secure']
    Returns: None
    Start Line: 593
    End Line: 604
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_pyopenssl_redirect:
    name: test_pyopenssl_redirect
    Module Path: None
    Signature: test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle)
    test_exe_cmd: .TestRequests.test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle)
    Arguments: ['self', 'httpbin_secure', 'httpbin_ca_bundle']
    Returns: None
    Start Line: 925
    End Line: 926
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_read_timeout:
    name: test_read_timeout
    Module Path: None
    Signature: test_read_timeout(self, httpbin, timeout)
    test_exe_cmd: .TestTimeout.test_read_timeout(self, httpbin, timeout)
    Arguments: ['self', 'httpbin', 'timeout']
    Returns: None
    Start Line: 2458
    End Line: 2466
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('timeout', ((None, 0.1), Urllib3Timeout(connect=None, read=0.1)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_redirect_with_wrong_gzipped_header:
    name: test_redirect_with_wrong_gzipped_header
    Module Path: None
    Signature: test_redirect_with_wrong_gzipped_header(self, httpbin)
    test_exe_cmd: .TestRequests.test_redirect_with_wrong_gzipped_header(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2020
    End Line: 2024
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_redirecting_to_bad_url:
    name: test_redirecting_to_bad_url
    Module Path: None
    Signature: test_redirecting_to_bad_url(self, httpbin, url, exception)
    test_exe_cmd: .TestPreparingURLs.test_redirecting_to_bad_url(self, httpbin, url, exception)
    Arguments: ['self', 'httpbin', 'url', 'exception']
    Returns: None
    Start Line: 2708
    End Line: 2711
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, exception', (('http://:1', InvalidURL), ))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_request_and_response_are_pickleable:
    name: test_request_and_response_are_pickleable
    Module Path: None
    Signature: test_request_and_response_are_pickleable(self, httpbin)
    test_exe_cmd: .TestRequests.test_request_and_response_are_pickleable(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1481
    End Line: 1491
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['verify we can pickle the original request', 'verify we can pickle the response and that we have access to', 'the original request.']
    Runtime: python

  test_requests.py::test_request_cookie_overrides_session_cookie:
    name: test_request_cookie_overrides_session_cookie
    Module Path: None
    Signature: test_request_cookie_overrides_session_cookie(self, httpbin)
    test_exe_cmd: .TestRequests.test_request_cookie_overrides_session_cookie(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 406
    End Line: 412
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Session cookie should not be modified']
    Runtime: python

  test_requests.py::test_request_cookies_not_persisted:
    name: test_request_cookies_not_persisted
    Module Path: None
    Signature: test_request_cookies_not_persisted(self, httpbin)
    test_exe_cmd: .TestRequests.test_request_cookies_not_persisted(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 414
    End Line: 418
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Sending a request with cookies should not add cookies to the session']
    Runtime: python

  test_requests.py::test_request_ok_set:
    name: test_request_ok_set
    Module Path: None
    Signature: test_request_ok_set(self, httpbin)
    test_exe_cmd: .TestRequests.test_request_ok_set(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 889
    End Line: 891
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_request_with_bytestring_host:
    name: test_request_with_bytestring_host
    Module Path: None
    Signature: test_request_with_bytestring_host(self, httpbin)
    test_exe_cmd: .TestRequests.test_request_with_bytestring_host(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1197
    End Line: 1205
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_requests_are_updated_each_time:
    name: test_requests_are_updated_each_time
    Module Path: None
    Signature: test_requests_are_updated_each_time(httpbin)
    test_exe_cmd: .test_requests_are_updated_each_time(httpbin)
    Arguments: ['httpbin']
    Returns: None
    Start Line: 2538
    End Line: 2556
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_requests_history_is_saved:
    name: test_requests_history_is_saved
    Module Path: None
    Signature: test_requests_history_is_saved(self, httpbin)
    test_exe_cmd: .TestRequests.test_requests_history_is_saved(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2042
    End Line: 2048
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_requests_in_history_are_not_overridden:
    name: test_requests_in_history_are_not_overridden
    Module Path: None
    Signature: test_requests_in_history_are_not_overridden(self, httpbin)
    test_exe_cmd: .TestRequests.test_requests_in_history_are_not_overridden(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 471
    End Line: 475
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_respect_proxy_env_on_get:
    name: test_respect_proxy_env_on_get
    Module Path: None
    Signature: test_respect_proxy_env_on_get(self, httpbin)
    test_exe_cmd: .TestRequests.test_respect_proxy_env_on_get(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 630
    End Line: 634
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_respect_proxy_env_on_request:
    name: test_respect_proxy_env_on_request
    Module Path: None
    Signature: test_respect_proxy_env_on_request(self, httpbin)
    test_exe_cmd: .TestRequests.test_respect_proxy_env_on_request(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 636
    End Line: 640
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_respect_proxy_env_on_send_self_prepared_request:
    name: test_respect_proxy_env_on_send_self_prepared_request
    Module Path: None
    Signature: test_respect_proxy_env_on_send_self_prepared_request(self, httpbin)
    test_exe_cmd: .TestRequests.test_respect_proxy_env_on_send_self_prepared_request(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 606
    End Line: 611
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_respect_proxy_env_on_send_session_prepared_request:
    name: test_respect_proxy_env_on_send_session_prepared_request
    Module Path: None
    Signature: test_respect_proxy_env_on_send_session_prepared_request(self, httpbin)
    test_exe_cmd: .TestRequests.test_respect_proxy_env_on_send_session_prepared_request(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 613
    End Line: 619
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_respect_proxy_env_on_send_with_redirects:
    name: test_respect_proxy_env_on_send_with_redirects
    Module Path: None
    Signature: test_respect_proxy_env_on_send_with_redirects(self, httpbin)
    test_exe_cmd: .TestRequests.test_respect_proxy_env_on_send_with_redirects(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 621
    End Line: 628
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_response_chunk_size_type:
    name: test_response_chunk_size_type
    Module Path: None
    Signature: test_response_chunk_size_type(self)
    test_exe_cmd: .TestRequests.test_response_chunk_size_type(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1443
    End Line: 1460
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure that chunk_size is passed as None or an integer, otherwise
        raise a TypeError.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_response_context_manager:
    name: test_response_context_manager
    Module Path: None
    Signature: test_response_context_manager(self, httpbin)
    test_exe_cmd: .TestRequests.test_response_context_manager(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2074
    End Line: 2078
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_response_decode_unicode:
    name: test_response_decode_unicode
    Module Path: None
    Signature: test_response_decode_unicode(self)
    test_exe_cmd: .TestRequests.test_response_decode_unicode(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1403
    End Line: 1420
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: When called with decode_unicode, Response.iter_content should always
        return unicode.
    Description: 
    Description Embedding: 
    Comments: ['also for streaming']
    Runtime: python

  test_requests.py::test_response_is_iterable:
    name: test_response_is_iterable
    Module Path: None
    Signature: test_response_is_iterable(self)
    test_exe_cmd: .TestRequests.test_response_is_iterable(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1390
    End Line: 1401
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_response_iter_lines:
    name: test_response_iter_lines
    Module Path: None
    Signature: test_response_iter_lines(self, httpbin)
    test_exe_cmd: .TestRequests.test_response_iter_lines(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2066
    End Line: 2072
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_response_iter_lines_reentrant:
    name: test_response_iter_lines_reentrant
    Module Path: None
    Signature: test_response_iter_lines_reentrant(self, httpbin)
    test_exe_cmd: .TestRequests.test_response_iter_lines_reentrant(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2089
    End Line: 2096
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.xfail
    Docstring: Response.iter_lines() is not reentrant safe
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_response_json_when_content_is_None:
    name: test_response_json_when_content_is_None
    Module Path: None
    Signature: test_response_json_when_content_is_None(self, httpbin)
    test_exe_cmd: .TestRequests.test_response_json_when_content_is_None(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2119
    End Line: 2128
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Make sure r.content is None']
    Runtime: python

  test_requests.py::test_response_reason_unicode:
    name: test_response_reason_unicode
    Module Path: None
    Signature: test_response_reason_unicode(self)
    test_exe_cmd: .TestRequests.test_response_reason_unicode(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1422
    End Line: 1429
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['check for unicode HTTP status', 'old behaviour - crashes here']
    Runtime: python

  test_requests.py::test_response_reason_unicode_fallback:
    name: test_response_reason_unicode_fallback
    Module Path: None
    Signature: test_response_reason_unicode_fallback(self)
    test_exe_cmd: .TestRequests.test_response_reason_unicode_fallback(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1431
    End Line: 1441
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['check raise_status falls back to ISO-8859-1']
    Runtime: python

  test_requests.py::test_response_without_release_conn:
    name: test_response_without_release_conn
    Module Path: None
    Signature: test_response_without_release_conn(self)
    test_exe_cmd: .TestRequests.test_response_without_release_conn(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2130
    End Line: 2138
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Test `close` call for non-urllib3-like raw objects.
        Should work when `release_conn` attr doesn't exist on `response.raw`.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_rewind_body:
    name: test_rewind_body
    Module Path: None
    Signature: test_rewind_body(self)
    test_exe_cmd: .TestRequests.test_rewind_body(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1916
    End Line: 1927
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['the data has all been read', 'rewind it back']
    Runtime: python

  test_requests.py::test_rewind_body_failed_seek:
    name: test_rewind_body_failed_seek
    Module Path: None
    Signature: test_rewind_body_failed_seek(self)
    test_exe_cmd: .TestRequests.test_rewind_body_failed_seek(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1963
    End Line: 1984
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_rewind_body_failed_tell:
    name: test_rewind_body_failed_tell
    Module Path: None
    Signature: test_rewind_body_failed_tell(self)
    test_exe_cmd: .TestRequests.test_rewind_body_failed_tell(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1986
    End Line: 2004
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_rewind_body_no_seek:
    name: test_rewind_body_no_seek
    Module Path: None
    Signature: test_rewind_body_no_seek(self)
    test_exe_cmd: .TestRequests.test_rewind_body_no_seek(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1943
    End Line: 1961
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_rewind_partially_read_body:
    name: test_rewind_partially_read_body
    Module Path: None
    Signature: test_rewind_partially_read_body(self)
    test_exe_cmd: .TestRequests.test_rewind_partially_read_body(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1929
    End Line: 1941
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['read some data', 'the data has all been read', 'rewind it back']
    Runtime: python

  test_requests.py::test_session_close_proxy_clear:
    name: test_session_close_proxy_clear
    Module Path: None
    Signature: test_session_close_proxy_clear(self)
    test_exe_cmd: .TestRequests.test_session_close_proxy_clear(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2098
    End Line: 2107
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_session_get_adapter_prefix_matching:
    name: test_session_get_adapter_prefix_matching
    Module Path: None
    Signature: test_session_get_adapter_prefix_matching(self)
    test_exe_cmd: .TestRequests.test_session_get_adapter_prefix_matching(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1620
    End Line: 1642
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_session_get_adapter_prefix_matching_is_case_insensitive:
    name: test_session_get_adapter_prefix_matching_is_case_insensitive
    Module Path: None
    Signature: test_session_get_adapter_prefix_matching_is_case_insensitive(self)
    test_exe_cmd: .TestRequests.test_session_get_adapter_prefix_matching_is_case_insensitive(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1654
    End Line: 1664
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_session_get_adapter_prefix_matching_mixed_case:
    name: test_session_get_adapter_prefix_matching_mixed_case
    Module Path: None
    Signature: test_session_get_adapter_prefix_matching_mixed_case(self)
    test_exe_cmd: .TestRequests.test_session_get_adapter_prefix_matching_mixed_case(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1644
    End Line: 1652
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_session_hooks_are_overridden_by_request_hooks:
    name: test_session_hooks_are_overridden_by_request_hooks
    Module Path: None
    Signature: test_session_hooks_are_overridden_by_request_hooks(self, httpbin)
    test_exe_cmd: .TestRequests.test_session_hooks_are_overridden_by_request_hooks(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1146
    End Line: 1158
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_session_hooks_are_used_with_no_request_hooks:
    name: test_session_hooks_are_used_with_no_request_hooks
    Module Path: None
    Signature: test_session_hooks_are_used_with_no_request_hooks(self, httpbin)
    test_exe_cmd: .TestRequests.test_session_hooks_are_used_with_no_request_hooks(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1135
    End Line: 1144
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_session_pickling:
    name: test_session_pickling
    Module Path: None
    Signature: test_session_pickling(self, httpbin)
    test_exe_cmd: .TestRequests.test_session_pickling(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1554
    End Line: 1562
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_set_basicauth:
    name: test_set_basicauth
    Module Path: None
    Signature: test_set_basicauth(self, httpbin, username, password)
    test_exe_cmd: .TestRequests.test_set_basicauth(self, httpbin, username, password)
    Arguments: ['self', 'httpbin', 'username', 'password']
    Returns: None
    Start Line: 543
    End Line: 559
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('username, password', (('user', 'pass'), ('имя'.encode(), 'пароль'.encode()), (42, 42), (None, None)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_set_cookie_on_301:
    name: test_set_cookie_on_301
    Module Path: None
    Signature: test_set_cookie_on_301(self, httpbin)
    test_exe_cmd: .TestRequests.test_set_cookie_on_301(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 373
    End Line: 377
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_setdefault:
    name: test_setdefault
    Module Path: None
    Signature: test_setdefault(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_setdefault(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2316
    End Line: 2319
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_should_strip_auth_default_port:
    name: test_should_strip_auth_default_port
    Module Path: None
    Signature: test_should_strip_auth_default_port(self, old_uri, new_uri)
    test_exe_cmd: .TestRequests.test_should_strip_auth_default_port(self, old_uri, new_uri)
    Arguments: ['self', 'old_uri', 'new_uri']
    Returns: None
    Start Line: 1879
    End Line: 1890
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('old_uri, new_uri', (('https://example.com:443/foo', 'https://example.com/bar'), ('http://example.com:80/foo', 'http://example.com/bar'), ('https://example.com/foo', 'https://example.com:443/bar'), ('http://example.com/foo', 'http://example.com:80/bar')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_should_strip_auth_host_change:
    name: test_should_strip_auth_host_change
    Module Path: None
    Signature: test_should_strip_auth_host_change(self)
    test_exe_cmd: .TestRequests.test_should_strip_auth_host_change(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1844
    End Line: 1848
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_should_strip_auth_http_downgrade:
    name: test_should_strip_auth_http_downgrade
    Module Path: None
    Signature: test_should_strip_auth_http_downgrade(self)
    test_exe_cmd: .TestRequests.test_should_strip_auth_http_downgrade(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1850
    End Line: 1852
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_should_strip_auth_https_upgrade:
    name: test_should_strip_auth_https_upgrade
    Module Path: None
    Signature: test_should_strip_auth_https_upgrade(self)
    test_exe_cmd: .TestRequests.test_should_strip_auth_https_upgrade(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1854
    End Line: 1871
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Non-standard ports should trigger stripping']
    Runtime: python

  test_requests.py::test_should_strip_auth_port_change:
    name: test_should_strip_auth_port_change
    Module Path: None
    Signature: test_should_strip_auth_port_change(self)
    test_exe_cmd: .TestRequests.test_should_strip_auth_port_change(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1873
    End Line: 1877
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_status_code_425:
    name: test_status_code_425
    Module Path: None
    Signature: test_status_code_425(self)
    test_exe_cmd: .TestPreparingURLs.test_status_code_425(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2802
    End Line: 2815
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_status_raising:
    name: test_status_raising
    Module Path: None
    Signature: test_status_raising(self, httpbin)
    test_exe_cmd: .TestRequests.test_status_raising(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 893
    End Line: 899
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_stream_timeout:
    name: test_stream_timeout
    Module Path: None
    Signature: test_stream_timeout(self, httpbin)
    test_exe_cmd: .TestTimeout.test_stream_timeout(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2427
    End Line: 2431
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_stream_with_auth_does_not_set_transfer_encoding_header:
    name: test_stream_with_auth_does_not_set_transfer_encoding_header
    Module Path: None
    Signature: test_stream_with_auth_does_not_set_transfer_encoding_header(self, httpbin)
    test_exe_cmd: .TestRequests.test_stream_with_auth_does_not_set_transfer_encoding_header(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2152
    End Line: 2162
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure that a byte stream with size > 0 will not set both a Content-Length
        and Transfer-Encoding header.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_time_elapsed_blank:
    name: test_time_elapsed_blank
    Module Path: None
    Signature: test_time_elapsed_blank(self, httpbin)
    test_exe_cmd: .TestRequests.test_time_elapsed_blank(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1378
    End Line: 1384
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_total_timeout_connect:
    name: test_total_timeout_connect
    Module Path: None
    Signature: test_total_timeout_connect(self, timeout)
    test_exe_cmd: .TestTimeout.test_total_timeout_connect(self, timeout)
    Arguments: ['self', 'timeout']
    Returns: None
    Start Line: 2479
    End Line: 2487
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('timeout', ((0.1, 0.1), Urllib3Timeout(connect=0.1, read=0.1)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_transfer_enc_removal_on_redirect:
    name: test_transfer_enc_removal_on_redirect
    Module Path: None
    Signature: test_transfer_enc_removal_on_redirect(self, httpbin)
    test_exe_cmd: .TestRequests.test_transfer_enc_removal_on_redirect(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 326
    End Line: 347
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Create Response to avoid https://github.com/kevin1024/pytest-httpbin/issues/33', 'Mimic a redirect response', 'Run request through resolve_redirect']
    Runtime: python

  test_requests.py::test_transport_adapter_ordering:
    name: test_transport_adapter_ordering
    Module Path: None
    Signature: test_transport_adapter_ordering(self)
    test_exe_cmd: .TestRequests.test_transport_adapter_ordering(self)
    Arguments: ['self']
    Returns: None
    Start Line: 1582
    End Line: 1618
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_unconsumed_session_response_closes_connection:
    name: test_unconsumed_session_response_closes_connection
    Module Path: None
    Signature: test_unconsumed_session_response_closes_connection(self, httpbin)
    test_exe_cmd: .TestRequests.test_unconsumed_session_response_closes_connection(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 2080
    End Line: 2087
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_unicode_get:
    name: test_unicode_get
    Module Path: None
    Signature: test_unicode_get(self, httpbin, url, params)
    test_exe_cmd: .TestRequests.test_unicode_get(self, httpbin, url, params)
    Arguments: ['self', 'httpbin', 'url', 'params']
    Returns: None
    Start Line: 905
    End Line: 916
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, params', (('/get', {'foo': 'føø'}), ('/get', {'føø': 'føø'}), ('/get', {'føø': 'føø'}), ('/get', {'foo': 'foo'}), ('ø', {'foo': 'foo'})))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_unicode_header_name:
    name: test_unicode_header_name
    Module Path: None
    Signature: test_unicode_header_name(self, httpbin)
    test_exe_cmd: .TestRequests.test_unicode_header_name(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 918
    End Line: 923
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['compat.str is unicode.']
    Runtime: python

  test_requests.py::test_unicode_method_name:
    name: test_unicode_method_name
    Module Path: None
    Signature: test_unicode_method_name(self, httpbin)
    test_exe_cmd: .TestRequests.test_unicode_method_name(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1083
    End Line: 1091
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_unicode_method_name_with_request_object:
    name: test_unicode_method_name_with_request_object
    Module Path: None
    Signature: test_unicode_method_name_with_request_object(self, httpbin)
    test_exe_cmd: .TestRequests.test_unicode_method_name_with_request_object(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1093
    End Line: 1103
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_unicode_multipart_post:
    name: test_unicode_multipart_post
    Module Path: None
    Signature: test_unicode_multipart_post(self, httpbin, data)
    test_exe_cmd: .TestRequests.test_unicode_multipart_post(self, httpbin, data)
    Arguments: ['self', 'httpbin', 'data']
    Returns: None
    Start Line: 1051
    End Line: 1067
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('data', ({'stuff': 'ëlïxr'}, {'stuff': 'ëlïxr'.encode()}, {'stuff': 'elixr'}, {'stuff': b'elixr'}))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_unicode_multipart_post_fieldnames:
    name: test_unicode_multipart_post_fieldnames
    Module Path: None
    Signature: test_unicode_multipart_post_fieldnames(self, httpbin)
    test_exe_cmd: .TestRequests.test_unicode_multipart_post_fieldnames(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1069
    End Line: 1081
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_update:
    name: test_update
    Module Path: None
    Signature: test_update(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_update(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2286
    End Line: 2295
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_update_retains_unchanged:
    name: test_update_retains_unchanged
    Module Path: None
    Signature: test_update_retains_unchanged(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_update_retains_unchanged(self)
    Arguments: ['self']
    Returns: None
    Start Line: 2297
    End Line: 2300
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_uppercase_scheme_redirect:
    name: test_uppercase_scheme_redirect
    Module Path: None
    Signature: test_uppercase_scheme_redirect(self, httpbin)
    test_exe_cmd: .TestRequests.test_uppercase_scheme_redirect(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1575
    End Line: 1580
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_url_mutation:
    name: test_url_mutation
    Module Path: None
    Signature: test_url_mutation(self, input, expected)
    test_exe_cmd: .TestPreparingURLs.test_url_mutation(self, input, expected)
    Arguments: ['self', 'input', 'expected']
    Returns: None
    Start Line: 2713
    End Line: 2747
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('input, expected', ((b'http+unix://%2Fvar%2Frun%2Fsocket/path%7E', 'http+unix://%2Fvar%2Frun%2Fsocket/path~'), ('http+unix://%2Fvar%2Frun%2Fsocket/path%7E', 'http+unix://%2Fvar%2Frun%2Fsocket/path~'), (b'mailto:user@example.org', 'mailto:user@example.org'), ('mailto:user@example.org', 'mailto:user@example.org'), (b'data:SSDimaUgUHl0aG9uIQ==', 'data:SSDimaUgUHl0aG9uIQ==')))
    Docstring: This test validates that we correctly exclude some URLs from
        preparation, and that we handle others. Specifically, it tests that
        any URL whose scheme doesn't begin with "http" is left alone, and
        those whose scheme *does* begin with "http" are mutated.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_urlencoded_get_query_multivalued_param:
    name: test_urlencoded_get_query_multivalued_param
    Module Path: None
    Signature: test_urlencoded_get_query_multivalued_param(self, httpbin)
    test_exe_cmd: .TestRequests.test_urlencoded_get_query_multivalued_param(self, httpbin)
    Arguments: ['self', 'httpbin']
    Returns: None
    Start Line: 1029
    End Line: 1032
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_urllib3_pool_connection_closed:
    name: test_urllib3_pool_connection_closed
    Module Path: None
    Signature: test_urllib3_pool_connection_closed(httpbin)
    test_exe_cmd: .test_urllib3_pool_connection_closed(httpbin)
    Arguments: ['httpbin']
    Returns: None
    Start Line: 2639
    End Line: 2646
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_urllib3_retries:
    name: test_urllib3_retries
    Module Path: None
    Signature: test_urllib3_retries(httpbin)
    test_exe_cmd: .test_urllib3_retries(httpbin)
    Arguments: ['httpbin']
    Returns: None
    Start Line: 2629
    End Line: 2636
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_user_agent_transfers:
    name: test_user_agent_transfers
    Module Path: None
    Signature: test_user_agent_transfers(self, httpbin, key)
    test_exe_cmd: .TestRequests.test_user_agent_transfers(self, httpbin, key)
    Arguments: ['self', 'httpbin', 'key']
    Returns: None
    Start Line: 513
    End Line: 518
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('key', ('User-agent', 'user-agent'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_requests.py::test_whitespaces_are_removed_from_url:
    name: test_whitespaces_are_removed_from_url
    Module Path: None
    Signature: test_whitespaces_are_removed_from_url(self)
    test_exe_cmd: .TestRequests.test_whitespaces_are_removed_from_url(self)
    Arguments: ['self']
    Returns: None
    Start Line: 187
    End Line: 190
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Test for issue #3696']
    Runtime: python

  test_structures.py::setup:
    name: setup
    Module Path: None
    Signature: setup(self)
    test_exe_cmd: .TestLookupDict.setup(self)
    Arguments: ['self']
    Returns: None
    Start Line: 55
    End Line: 59
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.fixture(autouse=True)
    Docstring: LookupDict instance with "bad_gateway" attribute.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_structures.py::test_copy:
    name: test_copy
    Module Path: None
    Signature: test_copy(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_copy(self)
    Arguments: ['self']
    Returns: None
    Start Line: 37
    End Line: 40
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_structures.py::test_delitem:
    name: test_delitem
    Module Path: None
    Signature: test_delitem(self, key)
    test_exe_cmd: .TestCaseInsensitiveDict.test_delitem(self, key)
    Arguments: ['self', 'key']
    Returns: None
    Start Line: 24
    End Line: 27
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: possible_keys
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_structures.py::test_get:
    name: test_get
    Module Path: None
    Signature: test_get(self, key, value)
    test_exe_cmd: .TestLookupDict.test_get(self, key, value)
    Arguments: ['self', 'key', 'value']
    Returns: None
    Start Line: 76
    End Line: 78
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: get_item_parameters
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_structures.py::test_getitem:
    name: test_getitem
    Module Path: None
    Signature: test_getitem(self, key, value)
    test_exe_cmd: .TestLookupDict.test_getitem(self, key, value)
    Arguments: ['self', 'key', 'value']
    Returns: None
    Start Line: 72
    End Line: 74
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: get_item_parameters
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_structures.py::test_instance_equality:
    name: test_instance_equality
    Module Path: None
    Signature: test_instance_equality(self, other, result)
    test_exe_cmd: .TestCaseInsensitiveDict.test_instance_equality(self, other, result)
    Arguments: ['self', 'other', 'result']
    Returns: None
    Start Line: 42
    End Line: 51
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('other, result', (({'AccePT': 'application/json'}, True), ({}, False), (None, False)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_structures.py::test_list:
    name: test_list
    Module Path: None
    Signature: test_list(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_list(self)
    Arguments: ['self']
    Returns: None
    Start Line: 13
    End Line: 14
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_structures.py::test_lower_items:
    name: test_lower_items
    Module Path: None
    Signature: test_lower_items(self)
    test_exe_cmd: .TestCaseInsensitiveDict.test_lower_items(self)
    Arguments: ['self']
    Returns: None
    Start Line: 29
    End Line: 32
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_structures.py::test_repr:
    name: test_repr
    Module Path: None
    Signature: test_repr(self)
    test_exe_cmd: .TestLookupDict.test_repr(self)
    Arguments: ['self']
    Returns: None
    Start Line: 61
    End Line: 62
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_testserver.py::test_basic:
    name: test_basic
    Module Path: None
    Signature: test_basic(self)
    test_exe_cmd: .TestTestServer.test_basic(self)
    Arguments: ['self']
    Returns: None
    Start Line: 12
    End Line: 28
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: messages are sent and received properly
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_testserver.py::test_basic_response:
    name: test_basic_response
    Module Path: None
    Signature: test_basic_response(self)
    test_exe_cmd: .TestTestServer.test_basic_response(self)
    Arguments: ['self']
    Returns: None
    Start Line: 55
    End Line: 61
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: the basic response server returns an empty http response
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_testserver.py::test_basic_waiting_server:
    name: test_basic_waiting_server
    Module Path: None
    Signature: test_basic_waiting_server(self)
    test_exe_cmd: .TestTestServer.test_basic_waiting_server(self)
    Arguments: ['self']
    Returns: None
    Start Line: 63
    End Line: 76
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: the server waits for the block_server event to be set before closing
    Description: 
    Description Embedding: 
    Comments: ['release server block']
    Runtime: python

  test_testserver.py::test_multiple_requests:
    name: test_multiple_requests
    Module Path: None
    Signature: test_multiple_requests(self)
    test_exe_cmd: .TestTestServer.test_multiple_requests(self)
    Arguments: ['self']
    Returns: None
    Start Line: 78
    End Line: 92
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: multiple requests can be served
    Description: 
    Description Embedding: 
    Comments: ['the (n+1)th request fails']
    Runtime: python

  test_testserver.py::test_request_recovery:
    name: test_request_recovery
    Module Path: None
    Signature: test_request_recovery(self)
    test_exe_cmd: .TestTestServer.test_request_recovery(self)
    Arguments: ['self']
    Returns: None
    Start Line: 94
    End Line: 115
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.skip(reason='this fails non-deterministically under pytest-xdist')
    Docstring: can check the requests content
    Description: 
    Description Embedding: 
    Comments: ['TODO: figure out why this sometimes fails when using pytest-xdist.']
    Runtime: python

  test_testserver.py::test_request_recovery_with_bigger_timeout:
    name: test_request_recovery_with_bigger_timeout
    Module Path: None
    Signature: test_request_recovery_with_bigger_timeout(self)
    test_exe_cmd: .TestTestServer.test_request_recovery_with_bigger_timeout(self)
    Arguments: ['self']
    Returns: None
    Start Line: 130
    End Line: 142
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: a biggest timeout can be specified
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_testserver.py::test_requests_after_timeout_are_not_received:
    name: test_requests_after_timeout_are_not_received
    Module Path: None
    Signature: test_requests_after_timeout_are_not_received(self)
    test_exe_cmd: .TestTestServer.test_requests_after_timeout_are_not_received(self)
    Arguments: ['self']
    Returns: None
    Start Line: 117
    End Line: 128
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: the basic response handler times out when receiving requests
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_testserver.py::test_server_closes:
    name: test_server_closes
    Module Path: None
    Signature: test_server_closes(self)
    test_exe_cmd: .TestTestServer.test_server_closes(self)
    Arguments: ['self']
    Returns: None
    Start Line: 30
    End Line: 40
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: the server closes when leaving the context manager
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_testserver.py::test_server_finishes_on_error:
    name: test_server_finishes_on_error
    Module Path: None
    Signature: test_server_finishes_on_error(self)
    test_exe_cmd: .TestTestServer.test_server_finishes_on_error(self)
    Arguments: ['self']
    Returns: None
    Start Line: 144
    End Line: 151
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: the server thread exits even if an exception exits the context manager
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_testserver.py::test_server_finishes_when_no_connections:
    name: test_server_finishes_when_no_connections
    Module Path: None
    Signature: test_server_finishes_when_no_connections(self)
    test_exe_cmd: .TestTestServer.test_server_finishes_when_no_connections(self)
    Arguments: ['self']
    Returns: None
    Start Line: 156
    End Line: 162
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: the server thread exits even if there are no connections
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_testserver.py::test_text_response:
    name: test_text_response
    Module Path: None
    Signature: test_text_response(self)
    test_exe_cmd: .TestTestServer.test_text_response(self)
    Arguments: ['self']
    Returns: None
    Start Line: 42
    End Line: 53
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: the text_response_server sends the given text
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::no_proxy:
    name: no_proxy
    Module Path: None
    Signature: no_proxy(self, request, monkeypatch)
    test_exe_cmd: .TestGetEnvironProxies.no_proxy(self, request, monkeypatch)
    Arguments: ['self', 'request', 'monkeypatch']
    Returns: None
    Start Line: 196
    End Line: 200
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.fixture(autouse=True, params=['no_proxy', 'NO_PROXY'])
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test__parse_content_type_header:
    name: test__parse_content_type_header
    Module Path: None
    Signature: test__parse_content_type_header(value, expected)
    test_exe_cmd: .test__parse_content_type_header(value, expected)
    Arguments: ['value', 'expected']
    Returns: None
    Start Line: 547
    End Line: 608
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, expected', (('application/xml', ('application/xml', {})), ('application/json ; charset=utf-8', ('application/json', {'charset': 'utf-8'})), ('application/json ; Charset=utf-8', ('application/json', {'charset': 'utf-8'})), ('text/plain', ('text/plain', {})), ("multipart/form-data; boundary = something ; boundary2='something_else' ; no_equals ", ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})), ('multipart/form-data; boundary = something ; boundary2="something_else" ; no_equals ', ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})), ("multipart/form-data; boundary = something ; 'boundary2=something_else' ; no_equals ", ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})), ('multipart/form-data; boundary = something ; "boundary2=something_else" ; no_equals ', ('multipart/form-data', {'boundary': 'something', 'boundary2': 'something_else', 'no_equals': True})), ('application/json ; ; ', ('application/json', {}))))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_add_dict_to_cookiejar:
    name: test_add_dict_to_cookiejar
    Module Path: None
    Signature: test_add_dict_to_cookiejar(cookiejar)
    test_exe_cmd: .test_add_dict_to_cookiejar(cookiejar)
    Arguments: ['cookiejar']
    Returns: None
    Start Line: 764
    End Line: 778
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('cookiejar', (compat.cookielib.CookieJar(), RequestsCookieJar()))
    Docstring: Ensure add_dict_to_cookiejar works for
    non-RequestsCookieJar CookieJars
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_bad_utf_like_encoding:
    name: test_bad_utf_like_encoding
    Module Path: None
    Signature: test_bad_utf_like_encoding(self)
    test_exe_cmd: .TestGuessJSONUTF.test_bad_utf_like_encoding(self)
    Arguments: ['self']
    Returns: None
    Start Line: 394
    End Line: 395
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_bypass:
    name: test_bypass
    Module Path: None
    Signature: test_bypass(self, url)
    test_exe_cmd: .TestGetEnvironProxies.test_bypass(self, url)
    Arguments: ['self', 'url']
    Returns: None
    Start Line: 202
    End Line: 213
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url', ('http://192.168.0.1:5000/', 'http://192.168.0.1/', 'http://172.16.1.1/', 'http://172.16.1.1:5000/', 'http://localhost.localdomain:5000/v1.0/'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_bypass_no_proxy_keyword:
    name: test_bypass_no_proxy_keyword
    Module Path: None
    Signature: test_bypass_no_proxy_keyword(self, url)
    test_exe_cmd: .TestGetEnvironProxies.test_bypass_no_proxy_keyword(self, url)
    Arguments: ['self', 'url']
    Returns: None
    Start Line: 226
    End Line: 236
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url', ('http://192.168.1.1:5000/', 'http://192.168.1.1/', 'http://www.requests.com/'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_dotted_netmask:
    name: test_dotted_netmask
    Module Path: None
    Signature: test_dotted_netmask(mask, expected)
    test_exe_cmd: .test_dotted_netmask(mask, expected)
    Arguments: ['mask', 'expected']
    Returns: None
    Start Line: 483
    End Line: 492
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('mask, expected', ((8, '255.0.0.0'), (24, '255.255.255.0'), (25, '255.255.255.128')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_encoded:
    name: test_encoded
    Module Path: None
    Signature: test_encoded(self, encoding)
    test_exe_cmd: .TestGuessJSONUTF.test_encoded(self, encoding)
    Arguments: ['self', 'encoding']
    Returns: None
    Start Line: 377
    End Line: 392
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('encoding', ('utf-32', 'utf-8-sig', 'utf-16', 'utf-8', 'utf-16-be', 'utf-16-le', 'utf-32-be', 'utf-32-le'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_file:
    name: test_file
    Module Path: None
    Signature: test_file(self, tmpdir, mode, warnings_num, recwarn)
    test_exe_cmd: .TestSuperLen.test_file(self, tmpdir, mode, warnings_num, recwarn)
    Arguments: ['self', 'tmpdir', 'mode', 'warnings_num', 'recwarn']
    Returns: None
    Start Line: 100
    End Line: 112
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('mode, warnings_num', (('r', 1), ('rb', 0)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_get_auth_from_url:
    name: test_get_auth_from_url
    Module Path: None
    Signature: test_get_auth_from_url(url, auth)
    test_exe_cmd: .test_get_auth_from_url(url, auth)
    Arguments: ['url', 'auth']
    Returns: None
    Start Line: 416
    End Line: 441
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, auth', ((f'http://{ENCODED_USER}:{ENCODED_PASSWORD}@request.com/url.html#test', (USER, PASSWORD)), ('http://user:pass@complex.url.com/path?query=yes', ('user', 'pass')), ('http://user:pass%20pass@complex.url.com/path?query=yes', ('user', 'pass pass')), ('http://user:pass pass@complex.url.com/path?query=yes', ('user', 'pass pass')), ('http://user%25user:pass@complex.url.com/path?query=yes', ('user%user', 'pass')), ('http://user:pass%23pass@complex.url.com/path?query=yes', ('user', 'pass#pass')), ('http://complex.url.com/path?query=yes', ('', ''))))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['test",', 'pass"),']
    Runtime: python

  test_utils.py::test_get_encoding_from_headers:
    name: test_get_encoding_from_headers
    Module Path: None
    Signature: test_get_encoding_from_headers(value, expected)
    test_exe_cmd: .test_get_encoding_from_headers(value, expected)
    Arguments: ['value', 'expected']
    Returns: None
    Start Line: 611
    End Line: 623
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, expected', ((CaseInsensitiveDict(), None), (CaseInsensitiveDict({'content-type': 'application/json; charset=utf-8'}), 'utf-8'), (CaseInsensitiveDict({'content-type': 'text/plain'}), 'ISO-8859-1')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_guess_by_bom:
    name: test_guess_by_bom
    Module Path: None
    Signature: test_guess_by_bom(self, encoding, expected)
    test_exe_cmd: .TestGuessJSONUTF.test_guess_by_bom(self, encoding, expected)
    Arguments: ['self', 'encoding', 'expected']
    Returns: None
    Start Line: 397
    End Line: 408
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize(('encoding', 'expected'), (('utf-16-be', 'utf-16'), ('utf-16-le', 'utf-16'), ('utf-32-be', 'utf-32'), ('utf-32-le', 'utf-32')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_guess_filename_invalid:
    name: test_guess_filename_invalid
    Module Path: None
    Signature: test_guess_filename_invalid(self, value)
    test_exe_cmd: .TestGuessFilename.test_guess_filename_invalid(self, value)
    Arguments: ['self', 'value']
    Returns: None
    Start Line: 292
    End Line: 297
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value', (1, type('Fake', (object, ), {'name': 1})()))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_guess_filename_valid:
    name: test_guess_filename_valid
    Module Path: None
    Signature: test_guess_filename_valid(self, value, expected_type)
    test_exe_cmd: .TestGuessFilename.test_guess_filename_valid(self, value, expected_type)
    Arguments: ['self', 'value', 'expected_type']
    Returns: None
    Start Line: 299
    End Line: 310
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, expected_type', ((b'value', compat.bytes), (b'value'.decode('utf-8'), compat.str)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_invalid:
    name: test_invalid
    Module Path: None
    Signature: test_invalid(self)
    test_exe_cmd: .TestAddressInNetwork.test_invalid(self)
    Arguments: ['self']
    Returns: None
    Start Line: 287
    End Line: 288
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_invalid_unc_path:
    name: test_invalid_unc_path
    Module Path: None
    Signature: test_invalid_unc_path(self)
    test_exe_cmd: .TestExtractZippedPaths.test_invalid_unc_path(self)
    Arguments: ['self']
    Returns: None
    Start Line: 339
    End Line: 341
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_io_streams:
    name: test_io_streams
    Module Path: None
    Signature: test_io_streams(self, stream, value)
    test_exe_cmd: .TestSuperLen.test_io_streams(self, stream, value)
    Arguments: ['self', 'stream', 'value']
    Returns: None
    Start Line: 50
    End Line: 63
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('stream, value', ((StringIO.StringIO, 'Test'), (BytesIO, b'Test'), pytest.param(cStringIO, 'Test', marks=pytest.mark.skipif('cStringIO is None'))))
    Docstring: Ensures that we properly deal with different kinds of IO streams.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_is_filename:
    name: test_is_filename
    Module Path: None
    Signature: test_is_filename(self)
    test_exe_cmd: .TestUnquoteHeaderValue.test_is_filename(self)
    Arguments: ['self']
    Returns: None
    Start Line: 187
    End Line: 188
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_iter_slices:
    name: test_iter_slices
    Module Path: None
    Signature: test_iter_slices(value, length)
    test_exe_cmd: .test_iter_slices(value, length)
    Arguments: ['value', 'length']
    Returns: None
    Start Line: 626
    End Line: 642
    Complexity: 6
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, length', (('', 0), ('T', 1), ('Test', 4), ('Cont', 0), ('Other', -5), ('Content', None)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Reads all content at once']
    Runtime: python

  test_utils.py::test_none:
    name: test_none
    Module Path: None
    Signature: test_none(self)
    test_exe_cmd: .TestContentEncodingDetection.test_none(self)
    Arguments: ['self']
    Returns: None
    Start Line: 345
    End Line: 347
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_not_bypass:
    name: test_not_bypass
    Module Path: None
    Signature: test_not_bypass(self, url)
    test_exe_cmd: .TestGetEnvironProxies.test_not_bypass(self, url)
    Arguments: ['self', 'url']
    Returns: None
    Start Line: 215
    End Line: 224
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url', ('http://192.168.1.1:5000/', 'http://192.168.1.1/', 'http://www.requests.com/'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_not_bypass_no_proxy_keyword:
    name: test_not_bypass_no_proxy_keyword
    Module Path: None
    Signature: test_not_bypass_no_proxy_keyword(self, url, monkeypatch)
    test_exe_cmd: .TestGetEnvironProxies.test_not_bypass_no_proxy_keyword(self, url, monkeypatch)
    Arguments: ['self', 'url', 'monkeypatch']
    Returns: None
    Start Line: 238
    End Line: 253
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url', ('http://192.168.0.1:5000/', 'http://192.168.0.1/', 'http://172.16.1.1/', 'http://172.16.1.1:5000/', 'http://localhost.localdomain:5000/v1.0/'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ["This is testing that the 'no_proxy' argument overrides the", "environment variable 'no_proxy'"]
    Runtime: python

  test_utils.py::test_parse_dict_header:
    name: test_parse_dict_header
    Module Path: None
    Signature: test_parse_dict_header(value, expected)
    test_exe_cmd: .test_parse_dict_header(value, expected)
    Arguments: ['value', 'expected']
    Returns: None
    Start Line: 536
    End Line: 544
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, expected', (('foo="is a fish", bar="as well"', {'foo': 'is a fish', 'bar': 'as well'}), ('key_without_value', {'key_without_value': None})))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_parse_header_links:
    name: test_parse_header_links
    Module Path: None
    Signature: test_parse_header_links(value, expected)
    test_exe_cmd: .test_parse_header_links(value, expected)
    Arguments: ['value', 'expected']
    Returns: None
    Start Line: 645
    End Line: 665
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, expected', (('<http:/.../front.jpeg>; rel=front; type="image/jpeg"', [{'url': 'http:/.../front.jpeg', 'rel': 'front', 'type': 'image/jpeg'}]), ('<http:/.../front.jpeg>', [{'url': 'http:/.../front.jpeg'}]), ('<http:/.../front.jpeg>;', [{'url': 'http:/.../front.jpeg'}]), ('<http:/.../front.jpeg>; type="image/jpeg",<http://.../back.jpeg>;', [{'url': 'http:/.../front.jpeg', 'type': 'image/jpeg'}, {'url': 'http://.../back.jpeg'}]), ('', [])))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_pragmas:
    name: test_pragmas
    Module Path: None
    Signature: test_pragmas(self, content)
    test_exe_cmd: .TestContentEncodingDetection.test_pragmas(self, content)
    Arguments: ['self', 'content']
    Returns: None
    Start Line: 349
    End Line: 365
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('content', ('<meta charset="UTF-8">', '<meta http-equiv="Content-type" content="text/html;charset=UTF-8">', '<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />', '<?xml version="1.0" encoding="UTF-8"?>'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['HTML5 meta charset attribute', 'HTML4 pragma directive', 'XHTML 1.x served with text/html MIME type', 'XHTML 1.x served as XML']
    Runtime: python

  test_utils.py::test_precedence:
    name: test_precedence
    Module Path: None
    Signature: test_precedence(self)
    test_exe_cmd: .TestContentEncodingDetection.test_precedence(self)
    Arguments: ['self']
    Returns: None
    Start Line: 367
    End Line: 373
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_prepend_scheme_if_needed:
    name: test_prepend_scheme_if_needed
    Module Path: None
    Signature: test_prepend_scheme_if_needed(value, expected)
    test_exe_cmd: .test_prepend_scheme_if_needed(value, expected)
    Arguments: ['value', 'expected']
    Returns: None
    Start Line: 668
    End Line: 682
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, expected', (('example.com/path', 'http://example.com/path'), ('//example.com/path', 'http://example.com/path'), ('example.com:80', 'http://example.com:80'), ('http://user:pass@example.com/path?query', 'http://user:pass@example.com/path?query'), ('http://user@example.com/path?query', 'http://user@example.com/path?query')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_requote_uri_with_unquoted_percents:
    name: test_requote_uri_with_unquoted_percents
    Module Path: None
    Signature: test_requote_uri_with_unquoted_percents(uri, expected)
    test_exe_cmd: .test_requote_uri_with_unquoted_percents(uri, expected)
    Arguments: ['uri', 'expected']
    Returns: None
    Start Line: 444
    End Line: 461
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('uri, expected', (('http://example.com/fiz?buz=%25ppicture', 'http://example.com/fiz?buz=%25ppicture'), ('http://example.com/fiz?buz=%ppicture', 'http://example.com/fiz?buz=%25ppicture')))
    Docstring: See: https://github.com/psf/requests/issues/2356
    Description: 
    Description Embedding: 
    Comments: ["Ensure requoting doesn't break expectations", 'Ensure we handle unquoted percent signs in redirects']
    Runtime: python

  test_utils.py::test_select_proxies:
    name: test_select_proxies
    Module Path: None
    Signature: test_select_proxies(url, expected, proxies)
    test_exe_cmd: .test_select_proxies(url, expected, proxies)
    Arguments: ['url', 'expected', 'proxies']
    Returns: None
    Start Line: 510
    End Line: 533
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, expected, proxies', (('hTTp://u:p@Some.Host/path', 'http://some.host.proxy', http_proxies), ('hTTp://u:p@Other.Host/path', 'http://http.proxy', http_proxies), ('hTTp:///path', 'http://http.proxy', http_proxies), ('hTTps://Other.Host', None, http_proxies), ('file:///etc/motd', None, http_proxies), ('hTTp://u:p@Some.Host/path', 'socks5://some.host.proxy', all_proxies), ('hTTp://u:p@Other.Host/path', 'socks5://http.proxy', all_proxies), ('hTTp:///path', 'socks5://http.proxy', all_proxies), ('hTTps://Other.Host', 'socks5://http.proxy', all_proxies), ('http://u:p@other.host/path', 'http://http.proxy', mixed_proxies), ('http://u:p@some.host/path', 'http://some.host.proxy', mixed_proxies), ('https://u:p@other.host/path', 'socks5://http.proxy', mixed_proxies), ('https://u:p@some.host/path', 'socks5://http.proxy', mixed_proxies), ('https://', 'socks5://http.proxy', mixed_proxies), ('file:///etc/motd', 'socks5://http.proxy', all_proxies)))
    Docstring: Make sure we can select per-host proxies correctly.
    Description: 
    Description Embedding: 
    Comments: ['XXX: unsure whether this is reasonable behavior']
    Runtime: python

  test_utils.py::test_set_environ:
    name: test_set_environ
    Module Path: None
    Signature: test_set_environ(env_name, value)
    test_exe_cmd: .test_set_environ(env_name, value)
    Arguments: ['env_name', 'value']
    Returns: None
    Start Line: 901
    End Line: 916
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('env_name, value', (('no_proxy', '192.168.0.0/24,127.0.0.1,localhost.localdomain'), ('no_proxy', None), ('a_new_key', '192.168.0.0/24,127.0.0.1,localhost.localdomain'), ('a_new_key', None)))
    Docstring: Tests set_environ will set environ values and will restore the environ.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_set_environ_raises_exception:
    name: test_set_environ_raises_exception
    Module Path: None
    Signature: test_set_environ_raises_exception()
    test_exe_cmd: .test_set_environ_raises_exception()
    Arguments: None
    Returns: None
    Start Line: 919
    End Line: 926
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Tests set_environ will raise exceptions in context when the
    value parameter is None.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_should_bypass_proxies:
    name: test_should_bypass_proxies
    Module Path: None
    Signature: test_should_bypass_proxies(url, expected, monkeypatch)
    test_exe_cmd: .test_should_bypass_proxies(url, expected, monkeypatch)
    Arguments: ['url', 'expected', 'monkeypatch']
    Returns: None
    Start Line: 712
    End Line: 739
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, expected', (('http://192.168.0.1:5000/', True), ('http://192.168.0.1/', True), ('http://172.16.1.1/', True), ('http://172.16.1.1:5000/', True), ('http://localhost.localdomain:5000/v1.0/', True), ('http://google.com:6000/', True), ('http://172.16.1.12/', False), ('http://172.16.1.12:5000/', False), ('http://google.com:5000/v1.0/', False), ('file:///some/path/on/disk', True)))
    Docstring: Tests for function should_bypass_proxies to check if proxy
    can be bypassed or not
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_should_bypass_proxies_no_proxy:
    name: test_should_bypass_proxies_no_proxy
    Module Path: None
    Signature: test_should_bypass_proxies_no_proxy(url, expected, monkeypatch)
    test_exe_cmd: .test_should_bypass_proxies_no_proxy(url, expected, monkeypatch)
    Arguments: ['url', 'expected', 'monkeypatch']
    Returns: None
    Start Line: 793
    End Line: 812
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, expected', (('http://192.168.0.1:5000/', True), ('http://192.168.0.1/', True), ('http://172.16.1.1/', True), ('http://172.16.1.1:5000/', True), ('http://localhost.localdomain:5000/v1.0/', True), ('http://172.16.1.12/', False), ('http://172.16.1.12:5000/', False), ('http://google.com:5000/v1.0/', False)))
    Docstring: Tests for function should_bypass_proxies to check if proxy
    can be bypassed or not using the 'no_proxy' argument
    Description: 
    Description Embedding: 
    Comments: ["Test 'no_proxy' argument"]
    Runtime: python

  test_utils.py::test_should_bypass_proxies_pass_only_hostname:
    name: test_should_bypass_proxies_pass_only_hostname
    Module Path: None
    Signature: test_should_bypass_proxies_pass_only_hostname(url, expected)
    test_exe_cmd: .test_should_bypass_proxies_pass_only_hostname(url, expected)
    Arguments: ['url', 'expected']
    Returns: None
    Start Line: 742
    End Line: 761
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, expected', (('http://172.16.1.1/', '172.16.1.1'), ('http://172.16.1.1:5000/', '172.16.1.1'), ('http://user:pass@172.16.1.1', '172.16.1.1'), ('http://user:pass@172.16.1.1:5000', '172.16.1.1'), ('http://hostname/', 'hostname'), ('http://hostname:5000/', 'hostname'), ('http://user:pass@hostname', 'hostname'), ('http://user:pass@hostname:5000', 'hostname')))
    Docstring: The proxy_bypass function should be called with a hostname or IP without
    a port number or auth credentials.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_should_bypass_proxies_win_registry:
    name: test_should_bypass_proxies_win_registry
    Module Path: None
    Signature: test_should_bypass_proxies_win_registry(url, expected, override, monkeypatch)
    test_exe_cmd: .test_should_bypass_proxies_win_registry(url, expected, override, monkeypatch)
    Arguments: ['url', 'expected', 'override', 'monkeypatch']
    Returns: None
    Start Line: 815
    End Line: 865
    Complexity: 5
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.skipif(os.name != 'nt', reason='Test only on Windows'), pytest.mark.parametrize('url, expected, override', (('http://192.168.0.1:5000/', True, None), ('http://192.168.0.1/', True, None), ('http://172.16.1.1/', True, None), ('http://172.16.1.1:5000/', True, None), ('http://localhost.localdomain:5000/v1.0/', True, None), ('http://172.16.1.22/', False, None), ('http://172.16.1.22:5000/', False, None), ('http://google.com:5000/v1.0/', False, None), ('http://mylocalhostname:5000/v1.0/', True, '<local>'), ('http://192.168.0.1/', False, '')))
    Docstring: Tests for function should_bypass_proxies to check if proxy
    can be bypassed or not with Windows registry settings
    Description: 
    Description Embedding: 
    Comments: ['this could be a string (REG_SZ) or a 32-bit number (REG_DWORD)']
    Runtime: python

  test_utils.py::test_should_bypass_proxies_win_registry_ProxyOverride_value:
    name: test_should_bypass_proxies_win_registry_ProxyOverride_value
    Module Path: None
    Signature: test_should_bypass_proxies_win_registry_ProxyOverride_value(monkeypatch)
    test_exe_cmd: .test_should_bypass_proxies_win_registry_ProxyOverride_value(monkeypatch)
    Arguments: ['monkeypatch']
    Returns: None
    Start Line: 929
    End Line: 958
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.skipif(os.name != 'nt', reason='Test only on Windows')
    Docstring: Tests for function should_bypass_proxies to check if proxy
    can be bypassed or not with Windows ProxyOverride registry value ending with a semicolon.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_should_bypass_proxies_win_registry_bad_values:
    name: test_should_bypass_proxies_win_registry_bad_values
    Module Path: None
    Signature: test_should_bypass_proxies_win_registry_bad_values(monkeypatch)
    test_exe_cmd: .test_should_bypass_proxies_win_registry_bad_values(monkeypatch)
    Arguments: ['monkeypatch']
    Returns: None
    Start Line: 868
    End Line: 898
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.skipif(os.name != 'nt', reason='Test only on Windows')
    Docstring: Tests for function should_bypass_proxies to check if proxy
    can be bypassed or not with Windows invalid registry settings.
    Description: 
    Description Embedding: 
    Comments: ['Invalid response; Should be an int or int-y value']
    Runtime: python

  test_utils.py::test_string:
    name: test_string
    Module Path: None
    Signature: test_string(self)
    test_exe_cmd: .TestSuperLen.test_string(self)
    Arguments: ['self']
    Returns: None
    Start Line: 97
    End Line: 98
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_super_len_correctly_calculates_len_of_partially_read_file:
    name: test_super_len_correctly_calculates_len_of_partially_read_file
    Module Path: None
    Signature: test_super_len_correctly_calculates_len_of_partially_read_file(self)
    test_exe_cmd: .TestSuperLen.test_super_len_correctly_calculates_len_of_partially_read_file(self)
    Arguments: ['self']
    Returns: None
    Start Line: 65
    End Line: 69
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure that we handle partially consumed file like objects.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_super_len_handles_files_raising_weird_errors_in_tell:
    name: test_super_len_handles_files_raising_weird_errors_in_tell
    Module Path: None
    Signature: test_super_len_handles_files_raising_weird_errors_in_tell(self, error)
    test_exe_cmd: .TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell(self, error)
    Arguments: ['self', 'error']
    Returns: None
    Start Line: 71
    End Line: 82
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('error', [IOError, OSError])
    Docstring: If tell() raises errors, assume the cursor is at position zero.
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_super_len_tell_ioerror:
    name: test_super_len_tell_ioerror
    Module Path: None
    Signature: test_super_len_tell_ioerror(self, error)
    test_exe_cmd: .TestSuperLen.test_super_len_tell_ioerror(self, error)
    Arguments: ['self', 'error']
    Returns: None
    Start Line: 84
    End Line: 95
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('error', [IOError, OSError])
    Docstring: Ensure that if tell gives an IOError super_len doesn't fail
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_super_len_with__len__:
    name: test_super_len_with__len__
    Module Path: None
    Signature: test_super_len_with__len__(self)
    test_exe_cmd: .TestSuperLen.test_super_len_with__len__(self)
    Arguments: ['self']
    Returns: None
    Start Line: 126
    End Line: 129
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_super_len_with_fileno:
    name: test_super_len_with_fileno
    Module Path: None
    Signature: test_super_len_with_fileno(self)
    test_exe_cmd: .TestSuperLen.test_super_len_with_fileno(self)
    Arguments: ['self']
    Returns: None
    Start Line: 144
    End Line: 148
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_super_len_with_no__len__:
    name: test_super_len_with_no__len__
    Module Path: None
    Signature: test_super_len_with_no__len__(self)
    test_exe_cmd: .TestSuperLen.test_super_len_with_no__len__(self)
    Arguments: ['self']
    Returns: None
    Start Line: 131
    End Line: 136
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_super_len_with_no_matches:
    name: test_super_len_with_no_matches
    Module Path: None
    Signature: test_super_len_with_no_matches(self)
    test_exe_cmd: .TestSuperLen.test_super_len_with_no_matches(self)
    Arguments: ['self']
    Returns: None
    Start Line: 150
    End Line: 152
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: Ensure that objects without any length methods default to 0
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_super_len_with_tell:
    name: test_super_len_with_tell
    Module Path: None
    Signature: test_super_len_with_tell(self)
    test_exe_cmd: .TestSuperLen.test_super_len_with_tell(self)
    Arguments: ['self']
    Returns: None
    Start Line: 138
    End Line: 142
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_tarfile_member:
    name: test_tarfile_member
    Module Path: None
    Signature: test_tarfile_member(self, tmpdir)
    test_exe_cmd: .TestSuperLen.test_tarfile_member(self, tmpdir)
    Arguments: ['self', 'tmpdir']
    Returns: None
    Start Line: 114
    End Line: 124
    Complexity: 3
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_to_native_string:
    name: test_to_native_string
    Module Path: None
    Signature: test_to_native_string(value, expected)
    test_exe_cmd: .test_to_native_string(value, expected)
    Arguments: ['value', 'expected']
    Returns: None
    Start Line: 685
    End Line: 694
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, expected', (('T', 'T'), (b'T', 'T'), ('T', 'T')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_unicode_is_ascii:
    name: test_unicode_is_ascii
    Module Path: None
    Signature: test_unicode_is_ascii(value, expected)
    test_exe_cmd: .test_unicode_is_ascii(value, expected)
    Arguments: ['value', 'expected']
    Returns: None
    Start Line: 781
    End Line: 790
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('value, expected', (('test', True), ('æíöû', False), ('ジェーピーニック', False)))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_unquote_unreserved:
    name: test_unquote_unreserved
    Module Path: None
    Signature: test_unquote_unreserved(uri, expected)
    test_exe_cmd: .test_unquote_unreserved(uri, expected)
    Arguments: ['uri', 'expected']
    Returns: None
    Start Line: 464
    End Line: 480
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('uri, expected', (('http://example.com/?a=%--', 'http://example.com/?a=%--'), ('http://example.com/?a=%300', 'http://example.com/?a=00')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['Illegal bytes', 'Reserved characters']
    Runtime: python

  test_utils.py::test_unzipped_paths_unchanged:
    name: test_unzipped_paths_unchanged
    Module Path: None
    Signature: test_unzipped_paths_unchanged(self, path)
    test_exe_cmd: .TestExtractZippedPaths.test_unzipped_paths_unchanged(self, path)
    Arguments: ['self', 'path']
    Returns: None
    Start Line: 314
    End Line: 324
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('path', ('/', __file__, pytest.__file__, '/etc/invalid/location'))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_urldefragauth:
    name: test_urldefragauth
    Module Path: None
    Signature: test_urldefragauth(url, expected)
    test_exe_cmd: .test_urldefragauth(url, expected)
    Arguments: ['url', 'expected']
    Returns: None
    Start Line: 697
    End Line: 709
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: pytest.mark.parametrize('url, expected', (('http://u:p@example.com/path?a=1#test', 'http://example.com/path?a=1'), ('http://example.com/path', 'http://example.com/path'), ('//u:p@example.com/path', '//example.com/path'), ('//example.com/path', '//example.com/path'), ('example.com/path', '//example.com/path'), ('scheme:u:p@example.com/path', 'scheme://example.com/path')))
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['test", "http://example.com/path?a=1"),']
    Runtime: python

  test_utils.py::test_valid:
    name: test_valid
    Module Path: None
    Signature: test_valid(self)
    test_exe_cmd: .TestAddressInNetwork.test_valid(self)
    Arguments: ['self']
    Returns: None
    Start Line: 284
    End Line: 285
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  test_utils.py::test_zipped_paths_extracted:
    name: test_zipped_paths_extracted
    Module Path: None
    Signature: test_zipped_paths_extracted(self, tmpdir)
    test_exe_cmd: .TestExtractZippedPaths.test_zipped_paths_extracted(self, tmpdir)
    Arguments: ['self', 'tmpdir']
    Returns: None
    Start Line: 326
    End Line: 337
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  testserver/server.py::basic_response_server:
    name: basic_response_server
    Module Path: None
    Signature: basic_response_server(cls)
    test_exe_cmd: server.Server.basic_response_server(cls)
    Arguments: ['cls']
    Returns: None
    Start Line: 61
    End Line: 65
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: classmethod
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  testserver/server.py::consume_socket_content:
    name: consume_socket_content
    Module Path: None
    Signature: consume_socket_content(sock, timeout)
    test_exe_cmd: server.consume_socket_content(sock, timeout)
    Arguments: ['sock', 'timeout']
    Returns: None
    Start Line: 7
    End Line: 22
    Complexity: 4
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python

  testserver/server.py::run:
    name: run
    Module Path: None
    Signature: run(self)
    test_exe_cmd: server.Server.run(self)
    Arguments: ['self']
    Returns: None
    Start Line: 67
    End Line: 80
    Complexity: 2
    Is Active: True
    Is Async: False
    Decorators: None
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: ['in case self.port = 0', 'just in case of exception']
    Runtime: python

  testserver/server.py::text_response_server:
    name: text_response_server
    Module Path: None
    Signature: text_response_server(cls, text, request_timeout)
    test_exe_cmd: server.Server.text_response_server(cls, text, request_timeout)
    Arguments: ['cls', 'text', 'request_timeout']
    Returns: None
    Start Line: 51
    End Line: 59
    Complexity: 1
    Is Active: True
    Is Async: False
    Decorators: classmethod
    Docstring: None
    Description: 
    Description Embedding: 
    Comments: None
    Runtime: python